#!/usr/bin/python3


import os
import argparse
import subprocess
import re


__version__ = 'v01'


if os.path.exists('/usr/bin/eblook'):
    EBLOOK = '/usr/bin/eblook'
if os.path.exists('/usr/local/bin/eblook'):
    EBLOOK = '/usr/local/bin/eblook'

GAIJI_KOJIEN = {
    'za422': '„ÄêÊñá„Äë',
    'za423': 'Ôºë',
    'za425': 'Ôºí',
    # 'za426': '',
    'za427': '„Äê‰∏Ä„Äë', 'za428': '„Äê‰∫å„Äë',
    # 'za429': '',
    'za42a': 'Ôºì',
    # 'za42b': '',
    # 'za42c': '',
    'za42d': 'Ôºà„Ä±„ÅÆÊ®™Êõ∏„ÅçÔºâ„Äë', 'za42e': '„ÄêÊº¢Â≠ó',  # 2„Å§„Åß1„Å§
    # 'za42f': '',
    # 'za430': '',
    # 'za431': '',
    'za432': 'Ôºî',
    # 'za433': '',
    # 'za434': '',
    # 'za435': '',
    'za436': 'Ôºï',
    # 'za437': '',
    'za438': '£ë•',
    # 'za439': '',
    # 'za43a': '',
    # 'za43b': '',
    'za43c': 'Ôºñ',
    # 'za43d': '',
    # 'za43e': '',
    # 'za43f': '',
    'za440': 'Ôºó',
    # 'za441': '',
    # 'za442': '',
    # 'za443': '',
    'za444': '„Äê‰∏â„Äë',
    'za648': 'Ôºò',
    # 'za4': 'Ôºô',
    'zac49': '´íí',  # Èáë‰∏ò
    'zac6e': 'ëñÄ',  # Ê¢µÂ≠óÔºàÈòø„ÅÆÈü≥Ë®≥„Å®„Å™„Å£„ÅüÂ≠óÔºâ
    'zaf57': '„£∫',
    'zb476': '‚ªû',
    'zb76e': 'Êôå',
    'zb773': 'Ô®ë',
    'zb847': 'ÔºàÂ≠£Ôºâ', 'zb848': 'ÔºàÂëâÔºâ', 'zb849': 'ÔºàÊº¢Ôºâ', 'zb84a': 'ÔºàÂîêÔºâ',
    'zb84b': 'ÔºàÊÖ£Ôºâ', 'zb84c': 'ÔºàÂêåÔºâ', 'zb84d': 'ÔºàÂØæÔºâ',
    'zb84f': '„ÄêA„Äë',
    'zb850': '„ÄêÊº¢„Äë',
    'zb851': '„ÄêÊÑè', 'zb852': 'Âë≥„Äë',    # „ÄêÊÑèÂë≥„Äë
    'zb853': '„ÄêËß£', 'zb854': 'Â≠ó„Äë',    # „ÄêËß£Â≠ó„Äë
    'zb855': '„Äê‰∏ã', 'zb856': '„Å§„Åç„Äë',  # „Äê‰∏ã„Å§„Åç„Äë
    'zb857': '„ÄêÈõ£', 'zb858': 'Ë™≠„Äë',    # „ÄêÈõ£Ë™≠„Äë
    'zb929': 'Âºé',
    'zb931': 'Âçã',
    'zb956': '†Ü¢',  # „Å≤„Å®„ÇÑ„Å≠
    'zb95a': '´ùÜ', 'zb95b': '„†Ø', 'zb95c': '‰ª°',
    'zb97c': 'ÊØè',
    'zba2b': '†ä≥', # ‚∫Ö„™Ö
    'zba4e': '„ÄêÊº¢Â≠óÔºàÂÇ∑„ÅÆ„Å§„Åè„ÇäÔºâ„Äë', 'zba4f': '„ÄêÊº¢Â≠óÔºà‰øÆ„ÅÆÂΩ°„ÅåÁæΩÔºâ„Äë',
    'zba58': 'ÂÉ®', 'zba59': 'Ëèê',
    'zba72': '„ÄêÊº¢Â≠óÔºàÂÖº„ÅÆ„ÇΩ„ÅåÂÖ´Ôºâ„Äë', 'zba73': '„ÄêÊº¢Â≠óÔºàÂÖ≠„ÅÆÁÇπ„Å™„ÅóÔºâ„Äë',
    'zbb24': '„ÄêÊº¢Â≠óÔºàÊúÄ„ÅÆÁï∞Â≠ó‰ΩìÔºàÊú¨Â≠óÔºâÔºâ„Äë',
    'zbb2d': 'ÂÜ£',
    'zbb42': 'ÈÄ¨',
    'zbb4e': '„ù¥',
    'zbb61': '„ÄêÊº¢Â≠óÔºàËÇñ„ÅÆ‚∫å„ÅåÂ∞èÔºâ„Äë',
    'zbc42': '„ÄêÊº¢Â≠óÔºàÂçë„ÅÆÁÇπ„Å™„ÅóÔºâ„Äë', 'zbc43': 'Âä¶',
    'zbc5f': '„ÄêÊº¢Â≠óÔºàÈõ£Ëß£ÊñáÂ≠óÔºâ„Äë', 'zbc60': '„ÄêÊº¢Â≠óÔºàÂéü„ÅÆÂ∞è„ÅåÊ∞¥Ôºâ„Äë',
    'zbc61': 'Âéù',
    'zbc72': '‚∫à', 'zbc73': 'ß∞º',
    'zbc7c': '†Æ∑',
    'zbd22': 'Âê≥', 'zbd23': 'Âê¥', 'zbd24': 'Âêø', 'zbd25': 'Âëè',
    'zbd3d': 'Âìø',
    'zbd5e': 'Âñø',
    'zbe2a': 'Âõü',
    'zbe37': 'Èò´',
    'zbf21': '„ÄêÊº¢Â≠óÔºàÂ§¢„ÅÆÂ§ï„ÅåÁõÆÔºâ„Äë',
    'zbf22': '„ù±', 'zbf23': 'Â§£', 'zbf24': 'Â§§',
    'zbf30': 'Â¶í',
    'zbf3b': 'Â®Ä',
    'zbf79': 'ÂØò', 'zbf7a': '„ÄêÊº¢Â≠óÔºàÂ∏ö„ÅÆÂ∑æ„ÅåÂèàÔºâ„Äë',
    'zc024': '„ÄêÊº¢Â≠óÔºàÂØæ„ÅÆÁÇπ„Å™„ÅóÔºâ„Äë',
    'zc23d': '„ÄêÊº¢Â≠óÔºàÈõ£Ëß£ÊñáÂ≠óÔºâ„Äë',
    'zc02b': '‚∫å',
    'zc04a': '„ü¢',
    'zc137': '„ÄêÊº¢Â≠óÔºàÁèçÁç£„ÅÆÂêçÔºâ„Äë',
    'zc145': 'Ëæ°',
    'zc17b': 'ÁãÄ', 'zc17c': '„ÄêÊº¢Â≠óÔºàÁàøÁæäÔºâ„Äë',
    'zc224': '•ùï',  # Á¶æ‰∫°
    'zc23c': 'Áæë',
    'zc37b': '‰çÉ', 'zc37c': '„ÄêÊº¢Â≠óÔºàÈÅï„ÅÆ2ÁÇπ„Åó„Çì„Å´„Çá„ÅÜÔºâ„Äë',
    'zc46b': 'ÈòΩ',
    'zc524': '®∫¨',  # ÈòùÁïå
    'zc530': '‚∫ç',
    'zc534': '„ÄêÊº¢Â≠óÔºàÊúà„ÅÆÁï∞Â≠ó‰ΩìÔºâ„Äë',
    'zc72c': '¢´¶',  # ÊâåÁôæ
    'zc771': 'Êíæ',
    'zc828': 'Êï∏', 'zc829': 'Èºî',
    'zc835': 'Êñã',
    'zc83b': '„ÄêÊº¢Â≠óÔºàÊóÅ„ÅÆÁï∞Â≠ó‰ΩìÔºâ„Äë',
    'zc845': 'Êó∂',
    'zc84b': '„ÄêÊº¢Â≠óÔºàÊôÇ„ÅÆÁï∞Â≠ó‰ΩìÔºâ„Äë',
    'zc874': '„ÄêÊº¢Â≠óÔºàÊúà„ÅÆÁï∞Â≠ó‰ΩìÔºâ„Äë',
    'zc965': 'Êûí',
    'zcb53': '„ÄêÊº¢Â≠óÔºàÊ∞ó„ÅÆÁï∞Â≠ó‰ΩìÔºâ„Äë',
    'zcb6c': '„ÄêÊº¢Â≠óÔºàÊ≥ï„ÅÆÁï∞Â≠ó‰ΩìÔºâ„Äë', 'zcb6d': '„≥í',
    'zcb73': 'Ô©Ö',
    'zcc29': '„ÄêÊº¢Â≠óÔºàÊ∂à„ÅÆ‚∫å„ÅåÂ∞èÔºâ„Äë',
    'zcd4d': 'ÁÖÅ',
    'zcf2a': '‚∫™',
    'zcf68': 'Áúú', 'zcf69': 'Áú¢',
    'zd031': '®•®',  # ÈáëÁüõ
    'zd27b': '‚∫∑',
    'zd358': '¶ßü',  # ËàåÊ≤ì
    'zd465': 'Ë°ï',
    'zd65d': '„ÄêÊº¢Â≠óÔºàËµ∑„ÅÆÂ∑±„ÅåÂ∑≥Ôºâ„Äë',
    'zd759': 'Ëæ§',
    'zd873': 'Èõ±',
    'zd94e': 'È†ñ',
    'zd970': '„ÄêÊº¢Â≠óÔºàÈ£ü„ÅÆÁï∞Â≠ó‰ΩìÔºâ„Äë', 'zd971': '„ÄêÊº¢Â≠óÔºàÈ£ü„ÅÆÁï∞Â≠ó‰ΩìÔºâ„Äë',
    'zda38': 'È¶±',
    'zda62': 'È´ô',
    'zdb33': 'ÈØã',
    'zdb35': 'ÈØà',
    'zdc35': 'Â£¥',
}

GAIJI_KANJIGEN = {
    'ha121': 'ƒÅ', 'ha122': '√°', 'ha123': '«é', 'ha124': '√†',
    'ha125': 'ƒì', 'ha126': '√©', 'ha127': 'ƒõ', 'ha128': '√®',
    'ha129': 'ƒ´', 'ha12a': '√≠', 'ha12b': '«ê', 'ha12c': '√¨',
    'ha12d': '≈ç', 'ha12e': '√≥', 'ha12f': '«í', 'ha130': '√≤',
    'ha131': '≈´', 'ha132': '√∫', 'ha133': '«î', 'ha134': '√π',
    'ha137': '«ö',
    # 'ha138': '',
    'ha139': '√º',
    'ha13a': '„ÉÆ', 'ha13b': '„É∞', 'ha13c': '„É±',
    'za13a': '„ÉÆ', 'za13b': '„É∞', 'za13c': '„É±',
    'za121': 'ƒÅ',
    'za141': 'ÂøÑ',
    'za143': '‚∫ò',
    'za149': '‚Ωß',
    'za158': '‚ªå',
    'za160': '‚ù∂', 'za161': '‚ù∑', 'za162': '‚ù∏', 'za163': '‚ùπ', 'za164': '‚ù∫',
    'za165': '‚ùª', 'za166': '‚ùº', 'za167': '‚ùΩ', 'za168': '‚ùæ', 'za169': '‚ùø',
    'za16a': '‚ì´', 'za16b': '‚ì¨', 'za16c': '‚ì≠', 'za16d': '‚ìÆ',
    'za16f': '„Äê‰∏Ä„Äë', 'za170': '„Äê‰∫å„Äë', 'za171': '„Äê‰∏â„Äë',
    'za173': '‚ë†', 'za174': '‚ë°', 'za175': '‚ë¢', 'za176': '‚ë£', 'za177': '‚ë§',
    'za178': '‚ë•', 'za179': '‚ë¶', 'za17a': '‚ëß', 'za17b': '‚ë®', 'za17c': '‚ë©',
    'za229': '‚èã',
    'za22d': '‚Äî',
    'za233': '„ÄêÂëâ„Äë', 'za234': '„ÄêÊº¢„Äë', 'za235': '„ÄêÂîê„Äë', 'za236': '„ÄêÊÖ£„Äë',
}

GAIJI_CHUJITEN = {
    'ha121': '„Éª', 'ha122': 'Ôºö', 'ha123': 'Ô∏ô',
    'ha172': 'ÔºàÔºüÔºâ',
    'ha174': 'ÔºàÔºüÔºâ',
    'ha26b': 'ÔΩ•',
    'za321': '„ÄêÂêç„Äë', 'za322': '„Äê‰ª£„Äë', 'za323': '„ÄêÂΩ¢„Äë', 'za324': '„ÄêÂãï„Äë',
    'za325': '„ÄêÂâØ„Äë', 'za326': '„ÄêÊé•„Äë', 'za327': '„ÄêÂâç„Äë', 'za328': '„ÄêÂÜ†„Äë',
    'za329': '„ÄêÈñì„Äë',
    'za32a': '„ÄêÂä©', 'za32b': 'Âãï„Äë',  # „ÄêÂä©Âãï„Äë
    'za32c': '„ÄêÊé•', 'za32d': 'È†≠„Äë', 'za32e': 'Â∞æ„Äë',  # „ÄêÊé•È†≠„Äë/„ÄêÊé•Â∞æ„Äë
    'za32f': '„ÄêÔºµ„Äë', 'za330': '„ÄêÔº£„Äë',
    'za332': 'ÔºàÂæ©Ôºâ',
    'za333': '„ÄêÔº°„Äë', 'za334': '„ÄêÔº∞„Äë', 'za335': 'ÔºàËá™Ôºâ', 'za336': 'Ôºà‰ªñÔºâ',
    'za337': '„ÄêÊàê', 'za338': 'Âè•„Äë',  # „ÄêÊàêÂè•„Äë
    'za339': '‚ô™', 'za33a': '‚úì',
    'za33c': '‚â°',
    'za33f': '‚Üí',
    'za34f': '‚áî',
    'za37e': '‚ôÆ',
}

GAIJI_GENIUS = {
    'ha12d': '(…ô)',
    # 'ha174': '',
    'ha270': '…™ÃÄ',
    'zb430': '„ÄêÔº£„Äë', 'zb431': '„ÄêÔºµ„Äë',
    'zb478': '‚Üí',
    'zb434': '‚Üù',
    'zb43b': 'Ô∏ô',
    'zb44e': '‚ôÆ',
}

GAIJI_BIZTEC = {
    'ha13c': '√©',
    'za143': 'II',
    'za148': '‚ñ∂',
    'za149': '((', 'za14a': '))',
    'za14d': '‚áî',
    'za153': '-',
    'za154': '„ÄêÔºµ„Äë',
}

GAIJI_NANMED = {
    'hb124': '√ñ',
    'hb127': '√™',
    'hb129': '√§',
    'hb12b': '√©', 'hb12c': '√™', 'hb12d': '√®', 'hb12e': '√´',
    'hb136': '√∂',
    'hb138': '√º',
    'za122': '‚ë†', 'za123': '‚ë°', 'za124': '‚ë¢', 'za125': '‚ë£', 'za126': '‚ë§',
    'za127': '‚ë•', 'za128': '‚ë¶', 'za129': '‚ëß',
}


class Dictionary:

    def __init__(self) -> None:
        self.number: int = -1
        self.a_name: str = ''
        self.k_name: str = ''
        self.gaiji: dict = {}


class Item:

    def __init__(self) -> None:
        self.dictionary = None
        self.number = -1
        self.code = ''
        self.title = ''
        self.content = ''

    def make_up_title(self, title: str) -> str:
        gaiji: dict = self.dictionary.gaiji
        for g in gaiji:
            while re.match('^(.|\n)*<gaiji=' + g + '>(.|\n)*$', title, re.I):
                title = re.sub('<gaiji=' + g + '>', gaiji[g], title, re.I)
        return title

    def get_content(self, dictionary_directory: str) -> str:
        gaiji = self.dictionary.gaiji
        number = self.dictionary.number
        command = 'echo "' \
            + 'select ' + str(number) + '\n' \
            + 'content ' + self.code \
            + '" | ' \
            + EBLOOK + ' ' + dictionary_directory
        try:
            sr = subprocess.run(command,
                                check=True,
                                shell=True,
                                stdout=subprocess.PIPE,
                                encoding="utf-8")
        except subprocess.CalledProcessError:
            return None
        so = sr.stdout
        so = re.sub('^eblook> eblook> ', '', so)
        so = re.sub('\neblook> ', '', so)
        for g in gaiji:
            while re.match('^(.|\n)*<gaiji=' + g + '>(.|\n)*$', so, re.I):
                so = re.sub('<gaiji=' + g + '>', gaiji[g], so, re.I)
        so = re.sub('<prev>(.*?)</prev>', 'ÂâçÔºö\\1', so)
        so = re.sub('<next>(.*?)</next>', 'Ê¨°Ôºö\\1', so)
        so = re.sub('<reference>(.*?)</reference=([0-9]+:[0-9]+)>',
                    '\\1<' + str(number) + ':\\2>',
                    so)
        return so

    def print_item(self) -> None:
        print('## „Äê' + self.dictionary.k_name
              + '\u3000' + self.title + '„Äë')
        print(self.content + '\n')


class Eblook:

    def __init__(self) -> None:
        self.dictionary_directory: str = ''
        self.dictionaries: list[Dictionary] = []
        self.search_word: str = ''
        self.items: list[Item] = []

    def set_dictionaries(self, dictionary_directory: str) -> bool:
        self.dictionary_directory = dictionary_directory
        command = 'echo "' \
            + 'list' \
            + '" | ' \
            + EBLOOK + ' ' + self.dictionary_directory
        try:
            sr = subprocess.run(command,
                                check=True,
                                shell=True,
                                stdout=subprocess.PIPE,
                                encoding='utf-8')
        except subprocess.CalledProcessError:
            return False
        so = sr.stdout
        so = re.sub('^eblook> ', '', so)
        so = re.sub('\neblook> $', '', so)
        dictionaries: list[Dictionary] = []
        for sos in so.split('\n'):
            res = '\\s*([0-9]+)\\.\\s+(\\S+)\\s+(.*)$'
            if re.match(res, sos):
                dic = Dictionary()
                dic.number = int(re.sub(res, '\\1', sos))
                dic.a_name = re.sub(res, '\\2', sos)
                dic.k_name = re.sub(res, '\\3', sos)
                dic.gaiji = self._get_gaiji(dic.a_name)
                if re.match('^kojien', dic.a_name):
                    for g in GAIJI_KOJIEN:
                        dic.gaiji[g] = GAIJI_KOJIEN[g]
                if dic.a_name == 'kanjigen':
                    for g in GAIJI_KANJIGEN:
                        dic.gaiji[g] = GAIJI_KANJIGEN[g]
                if dic.a_name == 'chujiten':
                    for g in GAIJI_CHUJITEN:
                        dic.gaiji[g] = GAIJI_CHUJITEN[g]
                if dic.a_name == 'genius4':
                    for g in GAIJI_GENIUS:
                        dic.gaiji[g] = GAIJI_GENIUS[g]
                if dic.a_name == 'biztec4a':
                    for g in GAIJI_BIZTEC:
                        dic.gaiji[g] = GAIJI_BIZTEC[g]
                if dic.a_name == 'nanmed18':
                    for g in GAIJI_NANMED:
                        dic.gaiji[g] = GAIJI_NANMED[g]
                dictionaries.append(dic)
        self.dictionaries = dictionaries
        return True

    def _get_gaiji(self, a_name) -> dict:
        gaiji_directory = self.dictionary_directory + '/GAIJI_XML'
        if not os.path.exists(gaiji_directory):
            return {}
        if not os.path.isdir(gaiji_directory):
            return {}
        for dne in os.listdir(gaiji_directory):
            if not re.match('^.*\\.plist$', dne):
                continue
            x = a_name.lower()
            y = dne.lower()
            y = re.sub('\\.plist$', '', y)
            if x.upper() == y.upper():
                with open(gaiji_directory + '/' + dne, 'r') as f:
                    gaiji = {}
                    for line in f.readlines():
                        line = line.rstrip()
                        res = '^.*<key>(.+)</key><string>(.+)</string>.*$'
                        if re.match(res, line):
                            k = re.sub(res, '\\1', line).lower()
                            s = re.sub(res, '\\2', line)
                            gaiji[k] = s
                    return gaiji
        for dne in os.listdir(gaiji_directory):
            if not re.match('^.*\\.plist$', dne):
                continue
            x = a_name.lower()
            x = re.sub('[0-9]+', '', x)
            y = dne.lower()
            y = re.sub('\\.plist$', '', y)
            y = re.sub('[0-9]+', '', y)
            if x.upper() == y.upper():  #
                with open(gaiji_directory + '/' + dne, 'r') as f:
                    gaiji = {}
                    for line in f.readlines():
                        line = line.rstrip()
                        res = '^.*<key>(.+)</key><string>(.+)</string>.*$'
                        if re.match(res, line):
                            k = re.sub(res, '\\1', line).lower()
                            s = re.sub(res, '\\2', line)
                            gaiji[k] = s
                    return gaiji
        return {}

    def set_search_word(self, search_word: str) -> bool:
        self.search_word = search_word
        items: [Item] = []
        if re.match('^([0-9]+):([0-9]+:[0-9]+)$', search_word):
            dc = re.sub('^([0-9]+):([0-9]+:[0-9]+)$', '\\1', search_word)
            cc = re.sub('^([0-9]+):([0-9]+:[0-9]+)$', '\\2', search_word)
            for d in self.dictionaries:
                if d.number == int(dc):
                    i = Item()
                    i.dictionary = d
                    i.code = cc
                    i.content = i.get_content(self.dictionary_directory)
                    items.append(i)
        else:
            for d in self.dictionaries:
                command = 'echo "' \
                    + 'select ' + str(d.number) + '\n' \
                    + 'search ' + search_word \
                    + '" | ' \
                    + EBLOOK + ' ' + self.dictionary_directory
                try:
                    sr = subprocess.run(command,
                                        check=True,
                                        shell=True,
                                        stdout=subprocess.PIPE,
                                        encoding="utf-8")
                except subprocess.CalledProcessError:
                    return False
                so = sr.stdout
                so = re.sub('^eblook> eblook> ', '', so)
                so = re.sub('\neblook> ', '', so)
                for sos in so.split('\n'):
                    res = '\\s*([0-9]+)\\.\\s+(\\S+)\\s+(.*)$'
                    if re.match(res, sos):
                        i = Item()
                        i.dictionary = d
                        i.number = int(re.sub(res, '\\1', sos))
                        i.code = re.sub(res, '\\2', sos)
                        i.title = re.sub(res, '\\3', sos)
                        i.title = i.make_up_title(i.title)
                        i.content = i.get_content(self.dictionary_directory)
                        items.append(i)
        self.items = items
        return True


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description='eblook„ÅÆ„É©„É≥„ÉÅ„É£„Éº„Åß„Åô',
        add_help=False)
    parser.add_argument(
        '-h', '--help',
        action='help',
        help='„Éò„É´„Éó„É°„ÉÉ„Çª„Éº„Ç∏„ÇíË°®Á§∫„Åó„Åæ„Åô')
    parser.add_argument(
        '-v', '--version',
        action='version',
        version=('%(prog)s ' + __version__),
        help='„Éê„Éº„Ç∏„Éß„É≥Áï™Âè∑„ÇíË°®Á§∫„Åó„Åæ„Åô')
    parser.add_argument(
        'dictionary_directory',
        help='ËæûÊõ∏„Éá„Ç£„É¨„ÇØ„Éà„É™„Éº')
    parser.add_argument(
        'search_word',
        help='Ê§úÁ¥¢„Åô„ÇãË®ÄËëâ')
    args = parser.parse_args()

    eb = Eblook()
    eb.set_dictionaries(args.dictionary_directory)
    eb.set_search_word(args.search_word)

    for ei in eb.items:
        ei.print_item()
