#!/usr/bin/python3
# Name:         makdo_gui.py
# Version:      v07 Furuichibashi
# Time-stamp:   <2024.08.21-08:30:53-JST>

# makdo_gui.py
# Copyright (C) 2022-2024  Seiichiro HATA
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


# 2022.07.21 v01 Hiroshima
# 2022.08.24 v02 Shin-Hakushima
# 2022.12.25 v03 Yokogawa
# 2023.01.07 v04 Mitaki
# 2023.03.16 v05 Aki-Nagatsuka
# 2023.06.07 v06 Shimo-Gion
# 2024.04.02 v07 Furuichibashi


# USAGE
# from makdo.makdo_gui import Makdo
# Makdo()


import os
import sys
import shutil
import argparse
import re
import datetime
import chardet
import zipfile
import tempfile
import tkinter
import tkinter.filedialog
import tkinter.simpledialog
import tkinter.messagebox
import tkinter.font
from tkinterdnd2 import TkinterDnD, DND_FILES
import importlib
import makdo.makdo_md2docx
import makdo.makdo_docx2md
import openpyxl
import webbrowser

if sys.platform == 'win32':
    import win32com.client  # pip install pywin32
elif sys.platform == 'darwin':
    pass
elif sys.platform == 'linux':
    import subprocess


__version__ = 'v07 Furuichibashi'

WINDOW_SIZE = '900x600'
GOTHIC_FONT = 'ＭＳ ゴシック'
MINCHO_FONT = 'ＭＳ 明朝'
# GOTHIC_FONT = 'IPAゴシック'
# MINCHO_FONT = 'IPA明朝'
# GOTHIC_FONT = 'BIZ UDゴシック'
# MINCHO_FONT = 'BIZ UD明朝 Medium'
# GOTHIC_FONT = 'Noto Sans Mono CJK JP'
# MINCHO_FONT = 'Noto Serif CJK JP'
NOT_ESCAPED = '^((?:(?:.|\n)*?[^\\\\])??(?:\\\\\\\\)*?)??'

BLACK_SPACE = ('#9191FF', '#000000', '#2323FF')  # (0.6, 240), BK, (0.2, 240)
WHITE_SPACE = ('#C0C000', '#FFFFFF', '#F7F700')  # (0.7,  60), WH, (0.9,  60)

COLOR_SPACE = (
    # Y=   0.3        0.5        0.7        0.9
    ('#FF1C1C', '#FF5D5D', '#FF9E9E', '#FFDFDF'),  # 000 : comment
    ('#DE2900', '#FF603C', '#FFA08A', '#FFDFD8'),  # 010 : fold
    ('#A63A00', '#FF6512', '#FFA271', '#FFE0D0'),  # 020 : del
    ('#864300', '#E07000', '#FFA64D', '#FFE1C4'),  # 030 : sect1
    ('#714900', '#BC7A00', '#FFAC10', '#FFE3AF'),  # 040 : sect2 第１
    ('#604E00', '#A08300', '#E0B700', '#FFE882'),  # 050 : sect3 １
    ('#525200', '#898900', '#C0C000', '#F7F700'),  # 060 : sect4 (1), 判断者
    ('#465600', '#758F00', '#A4C900', '#D5FF1A'),  # 070 : sect5 ア
    ('#3A5A00', '#619500', '#88D100', '#C2FF50'),  # 080 : sect6 (ｱ), paren1
    ('#2F5D00', '#4E9B00', '#6DD900', '#B8FF70'),  # 090 : sect7 ａ,  paren2
    ('#226100', '#38A200', '#4FE200', '#B0FF86'),  # 100 : sect8 (a), paren3
    ('#136500', '#1FA900', '#2CED00', '#AAFF97'),  # 110 :
    ('#006B00', '#00B200', '#00FA00', '#A5FFA5'),  # 120 : br, pgbr, fd
    ('#006913', '#00AF20', '#00F52D', '#A1FFB2'),  # 130 :
    ('#006724', '#00AC3C', '#00F154', '#9DFFBF'),  # 140 :
    ('#006633', '#00AA55', '#00EE77', '#98FFCC'),  # 150 : length reviser
    ('#006441', '#00A76D', '#00EA99', '#94FFDA'),  # 160 :
    ('#006351', '#00A586', '#00E7BC', '#8EFFEA'),  # 170 :
    ('#006161', '#00A2A2', '#00E3E3', '#87FFFF'),  # 180 : algin, 申立人
    ('#005F75', '#009FC3', '#21D6FF', '#B5F1FF'),  # 190 :
    ('#005D8E', '#009AED', '#59C5FF', '#C8ECFF'),  # 200 : (fsp), ins
    ('#0059B2', '#1F8FFF', '#79BCFF', '#D2E9FF'),  # 210 : chap1 第１編, hnumb
    ('#0053EF', '#4385FF', '#8EB6FF', '#D9E7FF'),  # 220 : chap2 第１章, (tab)
    ('#1F48FF', '#5F7CFF', '#9FB1FF', '#DFE5FF'),  # 230 : chap3 第１節
    ('#3F3FFF', '#7676FF', '#ADADFF', '#E4E4FF'),  # 240 : chap4 第１款, (hsp)
    ('#5B36FF', '#8A70FF', '#B9A9FF', '#E8E2FF'),  # 250 : chap5 第１目
    ('#772EFF', '#9E6AFF', '#C5A5FF', '#ECE1FF'),  # 260 :
    ('#9226FF', '#B164FF', '#D0A2FF', '#EFE0FF'),  # 270 :
    ('#B01DFF', '#C75DFF', '#DD9EFF', '#F4DFFF'),  # 280 :
    ('#D312FF', '#E056FF', '#EC9AFF', '#F9DDFF'),  # 290 :
    ('#FF05FF', '#FF4DFF', '#FF94FF', '#FFDBFF'),  # 300 : 相手方
    ('#FF0AD2', '#FF50DF', '#FF96EC', '#FFDCF9'),  # 310 :
    ('#FF0EAB', '#FF53C3', '#FF98DB', '#FFDDF3'),  # 320 :
    ('#FF1188', '#FF55AA', '#FF99CC', '#FFDDEE'),  # 330 : list, fnumb
    ('#FF1566', '#FF5892', '#FF9BBE', '#FFDEE9'),  # 340 :
    ('#FF1843', '#FF5A79', '#FF9CAE', '#FFDEE4'),  # 350 :
)

KEYWORDS = [
    ['(加害者' +
     '|被告|本訴被告|反訴原告|被控訴人|被上告人' +
     '|相手方' +
     '|被疑者|被告人|弁護人|対象弁護士' +
     '|乙|戊|辛)',
     'magenta'],
    ['(被害者' +
     '|原告|本訴原告|反訴被告|控訴人|上告人' +
     '|申立人' +
     '|検察官|検察事務官|懲戒請求者' +
     '|甲|丁|庚|癸)',
     'cyan'],
    ['(裁判官|審判官|調停官|調停委員|司法委員|専門委員|書記官|事務官|訴外|' +
     '|丙|己|壬)',
     'yellow']]

CONFIGURATION_SAMPLE = [
    '',
    '書題名: -',
    '文書式: 普通', '文書式: 契約', '文書式: 条文',
    '用紙サ: A3横', '用紙サ: A3縦', '用紙サ: A4横', '用紙サ: A4縦',
    '上余白: 3.5 cm',
    '下余白: 2.2 cm',
    '左余白: 3.0 cm',
    '右余白: 2.0 cm',
    '頭書き: ',
    '頁番号: 無', '頁番号: 有',
    '行番号: 無', '行番号: 有',
    '明朝体: Times New Roman / ＭＳ 明朝',
    'ゴシ体: = / ＭＳ ゴシック',
    '異字体: IPAmj明朝',
    '文字サ: 12 pt',
    '行間隔: 2.14 倍',
    '前余白: 0.0 倍, 0.0 倍, 0.0 倍, 0.0 倍, 0.0 倍, 0.0 倍',
    '後余白: 0.0 倍, 0.0 倍, 0.0 倍, 0.0 倍, 0.0 倍, 0.0 倍',
    '字間整: 無',
    '完成稿: 偽',
    '作成時: - USER',
    '更新時: - USER',
    '']

PARAGRAPH_SAMPLE = ['', '\t',
                    '<!-------q1--------q2--------q3------' +
                    '--q4--------q5--------q6--------q7-->',
                    '<!--コメント-->',
                    '# <!--タイトル-->', '## <!--第１-->', '### <!--１-->',
                    '#### <!--(1)-->', '##### <!--ア-->', '###### <!--(ｱ)-->',
                    '####### <!--ａ-->', '######## <!--(a)-->',
                    ': <!--左寄せ-->', ': <!--中寄せ--> :', '<!--右寄せ--> :',
                    '|<!--表のセル-->|<!--表のセル-->|',
                    '![<!--画像の名前-->](<!--画像のファイル名-->)',
                    '$ <!--第１編-->', '$$ <!--第１章-->', '$$$ <!--第１節-->',
                    '$$$$ <!--第１款-->', '$$$$$ <!--第１目-->',
                    '\\[<!--数式-->\\]', '<pgbr><!--改ページ-->',
                    '']

FONT_DECORATOR_SAMPLE = ['\t',
                         '*<!--斜体-->*',
                         '*<!--太字-->*',
                         '__<!--下線-->__',
                         '---<!--微-->---',
                         '--<!--小-->--',
                         '++<!--大-->++',
                         '+++<!--巨-->+++',
                         '^R^<!--字赤-->^R^',
                         '^Y^<!--字黄-->^Y^',
                         '^G^<!--字緑-->^G^',
                         '^C^<!--字シ-->^C^',
                         '^B^<!--字青-->^B^',
                         '^M^<!--字マ-->^M^',
                         '_R_<!--地赤-->_R_',
                         '_Y_<!--地黄-->_Y_',
                         '_G_<!--地緑-->_G_',
                         '_C_<!--地シ-->_C_',
                         '_B_<!--地青-->_B_',
                         '_M_<!--地マ-->_M_',
                         '@游明朝@<!--游明朝-->@游明朝@',
                         '', '\t']

# 平成22年内閣告示第2号
JOYOKANJI = (
    ('0001', '亜亞', 'ア', ''),
    ('0002', '哀', 'アイ、あわ-れ、あわ-れむ', ''),
    ('0003', '挨', 'アイ', ''),
    ('0004', '愛', 'アイ', '愛媛'),
    ('0005', '曖', 'アイ', ''),
    ('0006', '悪惡', 'アク、オ、わる-い', ''),
    ('0007', '握', 'アク、にぎ-る', ''),
    ('0008', '圧壓', 'アツ', ''),
    ('0009', '扱', 'あつか-う', ''),
    ('0010', '宛', 'あ-てる', ''),
    ('0011', '嵐', 'あらし', ''),
    ('0012', '安', 'アン、やす-い', ''),
    ('0013', '案', 'アン', ''),
    ('0014', '暗', 'アン、くら-い', ''),
    ('0015', '以', 'イ', ''),
    ('0016', '衣', 'イ、ころも', '浴衣'),
    ('0017', '位', 'イ、くらい', '三位一体、従三位'),
    ('0018', '囲圍', 'イ、かこ-む、かこ-う', ''),
    ('0019', '医醫', 'イ', ''),
    ('0020', '依', 'イ、（エ）', ''),
    ('0021', '委', 'イ、ゆだ-ねる', ''),
    ('0022', '威', 'イ', ''),
    ('0023', '為爲', 'イ', '為替'),
    ('0024', '畏', 'イ、おそ-れる', ''),
    ('0025', '胃', 'イ', ''),
    ('0026', '尉', 'イ', ''),
    ('0027', '異', 'イ、こと', ''),
    ('0028', '移', 'イ、うつ-る、うつ-す', ''),
    ('0029', '萎', 'イ、な-える', ''),
    ('0030', '偉', 'イ、えら-い', ''),
    ('0031', '椅', 'イ', ''),
    ('0032', '彙', 'イ', ''),
    ('0033', '意', 'イ', '意気地'),
    ('0034', '違', 'イ、ちが-う、ちが-える', ''),
    ('0035', '維', 'イ', ''),
    ('0036', '慰', 'イ、なぐさ-める、なぐさ-む', ''),
    ('0037', '遺', 'イ、（ユイ）', ''),
    ('0038', '緯', 'イ', ''),
    ('0039', '域', 'イキ', ''),
    ('0040', '育', 'イク、そだ-つ、そだ-てる、はぐく-む', ''),
    ('0041', '一', 'イチ、イツ、ひと、ひと-つ', '一日、一人'),
    ('0042', '壱壹', 'イチ', ''),
    ('0043', '逸逸', 'イツ', ''),
    ('0044', '茨', '（いばら）', '茨城'),
    ('0045', '芋', 'いも', ''),
    ('0046', '引', 'イン、ひ-く、ひ-ける', ''),
    ('0047', '印', 'イン、しるし', ''),
    ('0048', '因', 'イン、よ-る', ''),
    ('0049', '咽', 'イン', ''),
    ('0050', '姻', 'イン', ''),
    ('0051', '員', 'イン', ''),
    ('0052', '院', 'イン', ''),
    ('0053', '淫', 'イン、みだ-ら', ''),
    ('0054', '陰', 'イン、かげ、かげ-る', ''),
    ('0055', '飲飮', 'イン、の-む', ''),
    ('0056', '隠隱', 'イン、かく-す、かく-れる', ''),
    ('0057', '韻', 'イン', ''),
    ('0058', '右', 'ウ、ユウ、みぎ', ''),
    ('0059', '宇', 'ウ', ''),
    ('0060', '羽羽', 'ウ、は、はね', ''),
    ('0061', '雨', 'ウ、あめ、（あま）', '五月雨、時雨、梅雨、春雨、小雨、霧雨'),
    ('0062', '唄', '（うた）', ''),
    ('0063', '鬱', 'ウツ', ''),
    ('0064', '畝', 'うね', ''),
    ('0065', '浦', 'うら', ''),
    ('0066', '運', 'ウン、はこ-ぶ', ''),
    ('0067', '雲', 'ウン、くも', ''),
    ('0068', '永', 'エイ、なが-い', ''),
    ('0069', '泳', 'エイ、およ-ぐ', ''),
    ('0070', '英', 'エイ', ''),
    ('0071', '映', 'エイ、うつ-る、うつ-す、は-える', ''),
    ('0072', '栄榮', 'エイ、さか-える、は-え、は-える', ''),
    ('0073', '営營', 'エイ、いとな-む', ''),
    ('0074', '詠', 'エイ、よ-む', ''),
    ('0075', '影', 'エイ、かげ', ''),
    ('0076', '鋭銳', 'エイ、するど-い', ''),
    ('0077', '衛衞', 'エイ', ''),
    ('0078', '易', 'エキ、イ、やさ-しい', ''),
    ('0079', '疫', 'エキ、（ヤク）', ''),
    ('0080', '益益', 'エキ、（ヤク）', ''),
    ('0081', '液', 'エキ', ''),
    ('0082', '駅驛', 'エキ', ''),
    ('0083', '悦悅', 'エツ', ''),
    ('0084', '越', 'エツ、こ-す、こ-える', ''),
    ('0085', '謁謁', 'エツ', ''),
    ('0086', '閲閱', 'エツ', ''),
    ('0087', '円圓', 'エン、まる-い', ''),
    ('0088', '延', 'エン、の-びる、の-べる、の-ばす', ''),
    ('0089', '沿', 'エン、そ-う', ''),
    ('0090', '炎', 'エン、ほのお', ''),
    ('0091', '怨', 'エン、オン', ''),
    ('0092', '宴', 'エン', ''),
    ('0093', '媛', 'エン', '愛媛'),
    ('0094', '援', 'エン', ''),
    ('0095', '園', 'エン、その', ''),
    ('0096', '煙', 'エン、けむ-る、けむり、けむ-い', ''),
    ('0097', '猿', 'エン、さる', ''),
    ('0098', '遠', 'エン、（オン）、とお-い', ''),
    ('0099', '鉛', 'エン、なまり', ''),
    ('0100', '塩鹽', 'エン、しお', ''),
    ('0101', '演', 'エン', ''),
    ('0102', '縁緣', 'エン、ふち', '因縁'),
    ('0103', '艶艷', 'エン、つや', ''),
    ('0104', '汚', 'オ、けが-す、けが-れる、けが-らわしい、よご-す、よご-れる、きたな-い', ''),
    ('0105', '王', 'オウ', '親王、勤王'),
    ('0106', '凹', 'オウ', '凸凹'),
    ('0107', '央', 'オウ', ''),
    ('0108', '応應', 'オウ、こた-える', '反応、順応'),
    ('0109', '往', 'オウ', ''),
    ('0110', '押', 'オウ、お-す、お-さえる', ''),
    ('0111', '旺', 'オウ', ''),
    ('0112', '欧歐', 'オウ', ''),
    ('0113', '殴毆', 'オウ、なぐ-る', ''),
    ('0114', '桜櫻', 'オウ、さくら', ''),
    ('0115', '翁', 'オウ', ''),
    ('0116', '奥奧', 'オウ、おく', ''),
    ('0117', '横橫', 'オウ、よこ', ''),
    ('0118', '岡', '（おか）', ''),
    ('0119', '屋', 'オク、や', '母屋、数寄屋、数奇屋、部屋、八百屋、紺屋'),
    ('0120', '億', 'オク', ''),
    ('0121', '憶', 'オク', ''),
    ('0122', '臆', 'オク', ''),
    ('0123', '虞', 'おそれ', ''),
    ('0124', '乙', 'オツ', '乙女、早乙女'),
    ('0125', '俺', 'おれ', ''),
    ('0126', '卸', 'おろ-す、おろし', ''),
    ('0127', '音', 'オン、イン、おと、ね', '観音'),
    ('0128', '恩', 'オン', ''),
    ('0129', '温溫', 'オン、あたた-か、あたた-かい、あたた-まる、あたた-める', ''),
    ('0130', '穏穩', 'オン、おだ-やか', '安穏'),
    ('0131', '下', 'カ、ゲ、した、しも、もと、さ-げる、さ-がる、くだ-る、くだ-す、くだ-さる、お-ろす、お-りる', '下手'),
    ('0132', '化', 'カ、ケ、ば-ける、ば-かす', ''),
    ('0133', '火', 'カ、ひ、（ほ）', ''),
    ('0134', '加', 'カ、くわ-える、くわ-わる', ''),
    ('0135', '可', 'カ', ''),
    ('0136', '仮假', 'カ、（ケ）、かり', '仮名'),
    ('0137', '何', 'カ、なに、（なん）', ''),
    ('0138', '花', 'カ、はな', ''),
    ('0139', '佳', 'カ', ''),
    ('0140', '価價', 'カ、あたい', ''),
    ('0141', '果', 'カ、は-たす、は-てる、は-て', '果物'),
    ('0142', '河', 'カ、かわ', '河岸、河原'),
    ('0143', '苛', 'カ', ''),
    ('0144', '科', 'カ', ''),
    ('0145', '架', 'カ、か-ける、か-かる', ''),
    ('0146', '夏', 'カ、（ゲ）、なつ', ''),
    ('0147', '家', 'カ、ケ、いえ、や', '母家'),
    ('0148', '荷', 'カ、に', ''),
    ('0149', '華', 'カ、（ケ）、はな', ''),
    ('0150', '菓', 'カ', ''),
    ('0151', '貨', 'カ', ''),
    ('0152', '渦', 'カ、うず', ''),
    ('0153', '過', 'カ、す-ぎる、す-ごす、あやま-つ、あやま-ち', ''),
    ('0154', '嫁', 'カ、よめ、とつ-ぐ', ''),
    ('0155', '暇', 'カ、ひま', ''),
    ('0156', '禍禍', 'カ', ''),
    ('0157', '靴', 'カ、くつ', ''),
    ('0158', '寡', 'カ', ''),
    ('0159', '歌', 'カ、うた、うた-う', '詩歌'),
    ('0160', '箇', 'カ', ''),
    ('0161', '稼', 'カ、かせ-ぐ', ''),
    ('0162', '課', 'カ', ''),
    ('0163', '蚊', 'か', '蚊帳'),
    ('0164', '牙', 'ガ、（ゲ）、きば', ''),
    ('0165', '瓦', 'ガ、かわら', ''),
    ('0166', '我', 'ガ、われ、わ', ''),
    ('0167', '画畫', 'ガ、カク', ''),
    ('0168', '芽', 'ガ、め', ''),
    ('0169', '賀', 'ガ', '滋賀'),
    ('0170', '雅', 'ガ', ''),
    ('0171', '餓', 'ガ', ''),
    ('0172', '介', 'カイ', ''),
    ('0173', '回', 'カイ、（エ）、まわ-る、まわ-す', ''),
    ('0174', '灰', 'カイ、はい', ''),
    ('0175', '会會', 'カイ、エ、あ-う', ''),
    ('0176', '快', 'カイ、こころよ-い', ''),
    ('0177', '戒', 'カイ、いまし-める', ''),
    ('0178', '改', 'カイ、あらた-める、あらた-まる', ''),
    ('0179', '怪', 'カイ、あや-しい、あや-しむ', ''),
    ('0180', '拐', 'カイ', ''),
    ('0181', '悔悔', 'カイ、く-いる、く-やむ、くや-しい', ''),
    ('0182', '海海', 'カイ、うみ', '海女、海士、海原'),
    ('0183', '界', 'カイ', ''),
    ('0184', '皆', 'カイ、みな', ''),
    ('0185', '械', 'カイ', ''),
    ('0186', '絵繪', 'カイ、エ', ''),
    ('0187', '開', 'カイ、ひら-く、ひら-ける、あ-く、あ-ける', ''),
    ('0188', '階', 'カイ', ''),
    ('0189', '塊', 'カイ、かたまり', ''),
    ('0190', '楷', 'カイ', ''),
    ('0191', '解', 'カイ、ゲ、と-く、と-かす、と-ける', ''),
    ('0192', '潰', 'カイ、つぶ-す、つぶ-れる', ''),
    ('0193', '壊壞', 'カイ、こわ-す、こわ-れる', ''),
    ('0194', '懐懷', 'カイ、ふところ、なつ-かしい、なつ-かしむ、なつ-く、なつ-ける', ''),
    ('0195', '諧', 'カイ', ''),
    ('0196', '貝', 'かい', ''),
    ('0197', '外', 'ガイ、ゲ、そと、ほか、はず-す、はず-れる', ''),
    ('0198', '劾', 'ガイ', ''),
    ('0199', '害', 'ガイ', ''),
    ('0200', '崖', 'ガイ、がけ', ''),
    ('0201', '涯', 'ガイ', ''),
    ('0202', '街', 'ガイ、（カイ）、まち', ''),
    ('0203', '慨慨', 'ガイ', ''),
    ('0204', '蓋', 'ガイ、ふた', ''),
    ('0205', '該', 'ガイ', ''),
    ('0206', '概槪', 'ガイ', ''),
    ('0207', '骸', 'ガイ', ''),
    ('0208', '垣', 'かき', ''),
    ('0209', '柿', 'かき', ''),
    ('0210', '各', 'カク、おのおの', ''),
    ('0211', '角', 'カク、かど、つの', ''),
    ('0212', '拡擴', 'カク', ''),
    ('0213', '革', 'カク、かわ', ''),
    ('0214', '格', 'カク、（コウ）', ''),
    ('0215', '核', 'カク', ''),
    ('0216', '殻殼', 'カク、から', ''),
    ('0217', '郭', 'カク', ''),
    ('0218', '覚覺', 'カク、おぼ-える、さ-ます、さ-める', ''),
    ('0219', '較', 'カク', ''),
    ('0220', '隔', 'カク、へだ-てる、へだ-たる', ''),
    ('0221', '閣', 'カク', ''),
    ('0222', '確', 'カク、たし-か、たし-かめる', ''),
    ('0223', '獲', 'カク、え-る', ''),
    ('0224', '嚇', 'カク', ''),
    ('0225', '穫', 'カク', ''),
    ('0226', '学學', 'ガク、まな-ぶ', ''),
    ('0227', '岳嶽', 'ガク、たけ', ''),
    ('0228', '楽樂', 'ガク、ラク、たの-しい、たの-しむ', '神楽'),
    ('0229', '額', 'ガク、ひたい', ''),
    ('0230', '顎', 'ガク、あご', ''),
    ('0231', '掛', 'か-ける、か-かる、かかり', ''),
    ('0232', '潟', 'かた', ''),
    ('0233', '括', 'カツ', ''),
    ('0234', '活', 'カツ', ''),
    ('0235', '喝喝', 'カツ', ''),
    ('0236', '渇渴', 'カツ、かわ-く', ''),
    ('0237', '割', 'カツ、わ-る、わり、わ-れる、さ-く', ''),
    ('0238', '葛', 'カツ、くず', ''),
    ('0239', '滑', 'カツ、コツ、すべ-る、なめ-らか', ''),
    ('0240', '褐褐', 'カツ', ''),
    ('0241', '轄', 'カツ', ''),
    ('0242', '且', 'か-つ', ''),
    ('0243', '株', 'かぶ', ''),
    ('0244', '釜', 'かま', ''),
    ('0245', '鎌', 'かま', ''),
    ('0246', '刈', 'か-る', ''),
    ('0247', '干', 'カン、ほ-す、ひ-る', ''),
    ('0248', '刊', 'カン', ''),
    ('0249', '甘', 'カン、あま-い、あま-える、あま-やかす', ''),
    ('0250', '汗', 'カン、あせ', ''),
    ('0251', '缶罐', 'カン', ''),
    ('0252', '完', 'カン', ''),
    ('0253', '肝', 'カン、きも', ''),
    ('0254', '官', 'カン', ''),
    ('0255', '冠', 'カン、かんむり', ''),
    ('0256', '巻卷', 'カン、ま-く、まき', ''),
    ('0257', '看', 'カン', ''),
    ('0258', '陥陷', 'カン、おちい-る、おとしい-れる', ''),
    ('0259', '乾', 'カン、かわ-く、かわ-かす', ''),
    ('0260', '勘', 'カン', ''),
    ('0261', '患', 'カン、わずら-う', ''),
    ('0262', '貫', 'カン、つらぬ-く', ''),
    ('0263', '寒', 'カン、さむ-い', ''),
    ('0264', '喚', 'カン', ''),
    ('0265', '堪', 'カン、た-える', '堪能'),
    ('0266', '換', 'カン、か-える、か-わる', ''),
    ('0267', '敢', 'カン', ''),
    ('0268', '棺', 'カン', ''),
    ('0269', '款', 'カン', ''),
    ('0270', '間', 'カン、ケン、あいだ、ま', ''),
    ('0271', '閑', 'カン', ''),
    ('0272', '勧勸', 'カン、すす-める', ''),
    ('0273', '寛寬', 'カン', ''),
    ('0274', '幹', 'カン、みき', ''),
    ('0275', '感', 'カン', ''),
    ('0276', '漢漢', 'カン', ''),
    ('0277', '慣', 'カン、な-れる、な-らす', ''),
    ('0278', '管', 'カン、くだ', ''),
    ('0279', '関關', 'カン、せき、かか-わる', ''),
    ('0280', '歓歡', 'カン', ''),
    ('0281', '監', 'カン', ''),
    ('0282', '緩', 'カン、ゆる-い、ゆる-やか、ゆる-む、ゆる-める', ''),
    ('0283', '憾', 'カン', ''),
    ('0284', '還', 'カン', ''),
    ('0285', '館館', 'カン、やかた', ''),
    ('0286', '環', 'カン', ''),
    ('0287', '簡', 'カン', ''),
    ('0288', '観觀', 'カン', ''),
    ('0289', '韓', 'カン', ''),
    ('0290', '艦', 'カン', ''),
    ('0291', '鑑', 'カン、かんが-みる', ''),
    ('0292', '丸', 'ガン、まる、まる-い、まる-める', ''),
    ('0293', '含', 'ガン、ふく-む、ふく-める', ''),
    ('0294', '岸', 'ガン、きし', '河岸'),
    ('0295', '岩', 'ガン、いわ', ''),
    ('0296', '玩', 'ガン', ''),
    ('0297', '眼', 'ガン、（ゲン）、まなこ', '眼鏡'),
    ('0298', '頑', 'ガン', ''),
    ('0299', '顔顏', 'ガン、かお', '笑顔'),
    ('0300', '願', 'ガン、ねが-う', ''),
    ('0301', '企', 'キ、くわだ-てる', ''),
    ('0302', '伎', 'キ', ''),
    ('0303', '危', 'キ、あぶ-ない、あや-うい、あや-ぶむ', ''),
    ('0304', '机', 'キ、つくえ', ''),
    ('0305', '気氣', 'キ、ケ', '意気地、浮気'),
    ('0306', '岐', 'キ', '岐阜'),
    ('0307', '希', 'キ', ''),
    ('0308', '忌', 'キ、い-む、い-まわしい', ''),
    ('0309', '汽', 'キ', ''),
    ('0310', '奇', 'キ', '数奇屋'),
    ('0311', '祈祈', 'キ、いの-る', ''),
    ('0312', '季', 'キ', ''),
    ('0313', '紀', 'キ', ''),
    ('0314', '軌', 'キ', ''),
    ('0315', '既旣', 'キ、すで-に', ''),
    ('0316', '記', 'キ、しる-す', ''),
    ('0317', '起', 'キ、お-きる、お-こる、お-こす', ''),
    ('0318', '飢', 'キ、う-える', ''),
    ('0319', '鬼', 'キ、おに', ''),
    ('0320', '帰歸', 'キ、かえ-る、かえ-す', ''),
    ('0321', '基', 'キ、もと、もとい', ''),
    ('0322', '寄', 'キ、よ-る、よ-せる', '数寄屋、最寄り、寄席'),
    ('0323', '規', 'キ', ''),
    ('0324', '亀龜', 'キ、かめ', ''),
    ('0325', '喜', 'キ、よろこ-ぶ', ''),
    ('0326', '幾', 'キ、いく', ''),
    ('0327', '揮', 'キ', ''),
    ('0328', '期', 'キ、（ゴ）', ''),
    ('0329', '棋', 'キ', ''),
    ('0330', '貴', 'キ、たっと-い、とうと-い、たっと-ぶ、とうと-ぶ', '富貴'),
    ('0331', '棄', 'キ', ''),
    ('0332', '毀', 'キ', ''),
    ('0333', '旗', 'キ、はた', ''),
    ('0334', '器器', 'キ、うつわ', ''),
    ('0335', '畿', 'キ', ''),
    ('0336', '輝', 'キ、かがや-く', ''),
    ('0337', '機', 'キ、はた', ''),
    ('0338', '騎', 'キ', ''),
    ('0339', '技', 'ギ、わざ', ''),
    ('0340', '宜', 'ギ', ''),
    ('0341', '偽僞', 'ギ、いつわ-る、にせ', ''),
    ('0342', '欺', 'ギ、あざむ-く', ''),
    ('0343', '義', 'ギ', ''),
    ('0344', '疑', 'ギ、うたが-う', ''),
    ('0345', '儀', 'ギ', ''),
    ('0346', '戯戲', 'ギ、たわむ-れる', ''),
    ('0347', '擬', 'ギ', ''),
    ('0348', '犠犧', 'ギ', ''),
    ('0349', '議', 'ギ', ''),
    ('0350', '菊', 'キク', ''),
    ('0351', '吉', 'キチ、キツ', ''),
    ('0352', '喫', 'キツ', ''),
    ('0353', '詰', 'キツ、つ-める、つ-まる、つ-む', ''),
    ('0354', '却', 'キャク', ''),
    ('0355', '客', 'キャク、カク', ''),
    ('0356', '脚', 'キャク、（キャ）、あし', ''),
    ('0357', '逆', 'ギャク、さか、さか-らう', ''),
    ('0358', '虐', 'ギャク、しいた-げる', ''),
    ('0359', '九', 'キュウ、ク、ここの、ここの-つ', ''),
    ('0360', '久', 'キュウ、（ク）、ひさ-しい', ''),
    ('0361', '及', 'キュウ、およ-ぶ、およ-び、およ-ぼす', ''),
    ('0362', '弓', 'キュウ、ゆみ', ''),
    ('0363', '丘', 'キュウ、おか', ''),
    ('0364', '旧舊', 'キュウ', ''),
    ('0365', '休', 'キュウ、やす-む、やす-まる、やす-める', ''),
    ('0366', '吸', 'キュウ、す-う', ''),
    ('0367', '朽', 'キュウ、く-ちる', ''),
    ('0368', '臼', 'キュウ、うす', ''),
    ('0369', '求', 'キュウ、もと-める', ''),
    ('0370', '究', 'キュウ、きわ-める', ''),
    ('0371', '泣', 'キュウ、な-く', ''),
    ('0372', '急', 'キュウ、いそ-ぐ', ''),
    ('0373', '級', 'キュウ', ''),
    ('0374', '糾', 'キュウ', ''),
    ('0375', '宮', 'キュウ、グウ、（ク）、みや', '宮城、宮内庁'),
    ('0376', '救', 'キュウ、すく-う', ''),
    ('0377', '球', 'キュウ、たま', ''),
    ('0378', '給', 'キュウ', ''),
    ('0379', '嗅', 'キュウ、か-ぐ', ''),
    ('0380', '窮', 'キュウ、きわ-める、きわ-まる', ''),
    ('0381', '牛', 'ギュウ、うし', ''),
    ('0382', '去', 'キョ、コ、さ-る', ''),
    ('0383', '巨', 'キョ', ''),
    ('0384', '居', 'キョ、い-る', '居士'),
    ('0385', '拒', 'キョ、こば-む', ''),
    ('0386', '拠據', 'キョ、コ', ''),
    ('0387', '挙擧', 'キョ、あ-げる、あ-がる', ''),
    ('0388', '虚虛', 'キョ、（コ）', ''),
    ('0389', '許', 'キョ、ゆる-す', ''),
    ('0390', '距', 'キョ', ''),
    ('0391', '魚', 'ギョ、うお、さかな', '雑魚'),
    ('0392', '御', 'ギョ、ゴ、おん', ''),
    ('0393', '漁', 'ギョ、リョウ', ''),
    ('0394', '凶', 'キョウ', ''),
    ('0395', '共', 'キョウ、とも', ''),
    ('0396', '叫', 'キョウ、さけ-ぶ', ''),
    ('0397', '狂', 'キョウ、くる-う、くる-おしい', ''),
    ('0398', '京', 'キョウ、ケイ', '京浜、京阪'),
    ('0399', '享', 'キョウ', ''),
    ('0400', '供', 'キョウ、（ク）、そな-える、とも', ''),
    ('0401', '協', 'キョウ', ''),
    ('0402', '況', 'キョウ', ''),
    ('0403', '峡峽', 'キョウ', ''),
    ('0404', '挟挾', 'キョウ、はさ-む、はさ-まる', ''),
    ('0405', '狭狹', 'キョウ、せま-い、せば-める、せば-まる', ''),
    ('0406', '恐', 'キョウ、おそ-れる、おそ-ろしい', ''),
    ('0407', '恭', 'キョウ、うやうや-しい', ''),
    ('0408', '胸', 'キョウ、むね、（むな）', ''),
    ('0409', '脅', 'キョウ、おびや-かす、おど-す、おど-かす', ''),
    ('0410', '強', 'キョウ、ゴウ、つよ-い、つよ-まる、つよ-める、し-いる', ''),
    ('0411', '教敎', 'キョウ、おし-える、おそ-わる', ''),
    ('0412', '郷鄕', 'キョウ、ゴウ', ''),
    ('0413', '境', 'キョウ、（ケイ）、さかい', ''),
    ('0414', '橋', 'キョウ、はし', ''),
    ('0415', '矯', 'キョウ、た-める', ''),
    ('0416', '鏡', 'キョウ、かがみ', '眼鏡'),
    ('0417', '競', 'キョウ、ケイ、きそ-う、せ-る', ''),
    ('0418', '響響', 'キョウ、ひび-く', ''),
    ('0419', '驚', 'キョウ、おどろ-く、おどろ-かす', ''),
    ('0420', '仰', 'ギョウ、（コウ）、あお-ぐ、おお-せ', ''),
    ('0421', '暁曉', 'ギョウ、あかつき', ''),
    ('0422', '業', 'ギョウ、ゴウ、わざ', ''),
    ('0423', '凝', 'ギョウ、こ-る、こ-らす', ''),
    ('0424', '曲', 'キョク、ま-がる、ま-げる', ''),
    ('0425', '局', 'キョク', ''),
    ('0426', '極', 'キョク、ゴク、きわ-める、きわ-まる、きわ-み', ''),
    ('0427', '玉', 'ギョク、たま', ''),
    ('0428', '巾', 'キン', ''),
    ('0429', '斤', 'キン', ''),
    ('0430', '均', 'キン', ''),
    ('0431', '近', 'キン、ちか-い', ''),
    ('0432', '金', 'キン、コン、かね、（かな）', ''),
    ('0433', '菌', 'キン', ''),
    ('0434', '勤勤', 'キン、（ゴン）、つと-める、つと-まる', ''),
    ('0435', '琴', 'キン、こと', ''),
    ('0436', '筋', 'キン、すじ', ''),
    ('0437', '僅', 'キン、わず-か', ''),
    ('0438', '禁', 'キン', ''),
    ('0439', '緊', 'キン', ''),
    ('0440', '錦', 'キン、にしき', ''),
    ('0441', '謹謹', 'キン、つつし-む', ''),
    ('0442', '襟', 'キン、えり', ''),
    ('0443', '吟', 'ギン', ''),
    ('0444', '銀', 'ギン', ''),
    ('0445', '区區', 'ク', ''),
    ('0446', '句', 'ク', ''),
    ('0447', '苦', 'ク、くる-しい、くる-しむ、くる-しめる、にが-い、にが-る', ''),
    ('0448', '駆驅', 'ク、か-ける、か-る', ''),
    ('0449', '具', 'グ', ''),
    ('0450', '惧', 'グ', ''),
    ('0451', '愚', 'グ、おろ-か', ''),
    ('0452', '空', 'クウ、そら、あ-く、あ-ける、から', ''),
    ('0453', '偶', 'グウ', ''),
    ('0454', '遇', 'グウ', ''),
    ('0455', '隅', 'グウ、すみ', ''),
    ('0456', '串', 'くし', ''),
    ('0457', '屈', 'クツ', ''),
    ('0458', '掘', 'クツ、ほ-る', ''),
    ('0459', '窟', 'クツ', ''),
    ('0460', '熊', 'くま', ''),
    ('0461', '繰', 'く-る', ''),
    ('0462', '君', 'クン、きみ', ''),
    ('0463', '訓', 'クン', ''),
    ('0464', '勲勳', 'クン', ''),
    ('0465', '薫薰', 'クン、かお-る', ''),
    ('0466', '軍', 'グン', ''),
    ('0467', '郡', 'グン', ''),
    ('0468', '群', 'グン、む-れる、む-れ、（むら）', ''),
    ('0469', '兄', 'ケイ、（キョウ）、あに', '兄さん'),
    ('0470', '刑', 'ケイ', ''),
    ('0471', '形', 'ケイ、ギョウ、かた、かたち', ''),
    ('0472', '系', 'ケイ', ''),
    ('0473', '径徑', 'ケイ', ''),
    ('0474', '茎莖', 'ケイ、くき', ''),
    ('0475', '係', 'ケイ、かか-る、かかり', ''),
    ('0476', '型', 'ケイ、かた', ''),
    ('0477', '契', 'ケイ、ちぎ-る', ''),
    ('0478', '計', 'ケイ、はか-る、はか-らう', '時計'),
    ('0479', '恵惠', 'ケイ、エ、めぐ-む', ''),
    ('0480', '啓', 'ケイ', ''),
    ('0481', '掲揭', 'ケイ、かか-げる', ''),
    ('0482', '渓溪', 'ケイ', ''),
    ('0483', '経經', 'ケイ、キョウ、へ-る', '読経'),
    ('0484', '蛍螢', 'ケイ、ほたる', ''),
    ('0485', '敬', 'ケイ、うやま-う', ''),
    ('0486', '景', 'ケイ', '景色'),
    ('0487', '軽輕', 'ケイ、かる-い、かろ-やか', ''),
    ('0488', '傾', 'ケイ、かたむ-く、かたむ-ける', ''),
    ('0489', '携', 'ケイ、たずさ-える、たずさ-わる', ''),
    ('0490', '継繼', 'ケイ、つ-ぐ', ''),
    ('0491', '詣', 'ケイ、もう-でる', ''),
    ('0492', '慶', 'ケイ', ''),
    ('0493', '憬', 'ケイ', '憧憬'),
    ('0494', '稽', 'ケイ', ''),
    ('0495', '憩', 'ケイ、いこ-い、いこ-う', ''),
    ('0496', '警', 'ケイ', ''),
    ('0497', '鶏鷄', 'ケイ、にわとり', ''),
    ('0498', '芸藝', 'ゲイ', ''),
    ('0499', '迎', 'ゲイ、むか-える', ''),
    ('0500', '鯨', 'ゲイ、くじら', ''),
    ('0501', '隙', 'ゲキ、すき', ''),
    ('0502', '劇', 'ゲキ', ''),
    ('0503', '撃擊', 'ゲキ、う-つ', ''),
    ('0504', '激', 'ゲキ、はげ-しい', ''),
    ('0505', '桁', 'けた', ''),
    ('0506', '欠缺', 'ケツ、か-ける、か-く', ''),
    ('0507', '穴', 'ケツ、あな', ''),
    ('0508', '血', 'ケツ、ち', ''),
    ('0509', '決', 'ケツ、き-める、き-まる', ''),
    ('0510', '結', 'ケツ、むす-ぶ、ゆ-う、ゆ-わえる', ''),
    ('0511', '傑', 'ケツ', ''),
    ('0512', '潔', 'ケツ、いさぎよ-い', ''),
    ('0513', '月', 'ゲツ、ガツ、つき', '五月、五月雨'),
    ('0514', '犬', 'ケン、いぬ', ''),
    ('0515', '件', 'ケン', ''),
    ('0516', '見', 'ケン、み-る、み-える、み-せる', ''),
    ('0517', '券', 'ケン', ''),
    ('0518', '肩', 'ケン、かた', ''),
    ('0519', '建', 'ケン、（コン）、た-てる、た-つ', ''),
    ('0520', '研硏', 'ケン、と-ぐ', ''),
    ('0521', '県縣', 'ケン', ''),
    ('0522', '倹儉', 'ケン', ''),
    ('0523', '兼', 'ケン、か-ねる', ''),
    ('0524', '剣劍', 'ケン、つるぎ', ''),
    ('0525', '拳', 'ケン、こぶし', ''),
    ('0526', '軒', 'ケン、のき', ''),
    ('0527', '健', 'ケン、すこ-やか', ''),
    ('0528', '険險', 'ケン、けわ-しい', ''),
    ('0529', '圏圈', 'ケン', ''),
    ('0530', '堅', 'ケン、かた-い', ''),
    ('0531', '検檢', 'ケン', ''),
    ('0532', '嫌', 'ケン、（ゲン）、きら-う、いや', ''),
    ('0533', '献獻', 'ケン、（コン）', ''),
    ('0534', '絹', 'ケン、きぬ', ''),
    ('0535', '遣', 'ケン、つか-う、つか-わす', ''),
    ('0536', '権權', 'ケン、（ゴン）', ''),
    ('0537', '憲', 'ケン', ''),
    ('0538', '賢', 'ケン、かしこ-い', ''),
    ('0539', '謙', 'ケン', ''),
    ('0540', '鍵', 'ケン、かぎ', ''),
    ('0541', '繭', 'ケン、まゆ', ''),
    ('0542', '顕顯', 'ケン', ''),
    ('0543', '験驗', 'ケン、（ゲン）', ''),
    ('0544', '懸', 'ケン、（ケ）、か-ける、か-かる', ''),
    ('0545', '元', 'ゲン、ガン、もと', ''),
    ('0546', '幻', 'ゲン、まぼろし', ''),
    ('0547', '玄', 'ゲン', '玄人'),
    ('0548', '言', 'ゲン、ゴン、い-う、こと', ''),
    ('0549', '弦', 'ゲン、つる', ''),
    ('0550', '限', 'ゲン、かぎ-る', ''),
    ('0551', '原', 'ゲン、はら', '海原、河原、川原'),
    ('0552', '現', 'ゲン、あらわ-れる、あらわ-す', ''),
    ('0553', '舷', 'ゲン', ''),
    ('0554', '減', 'ゲン、へ-る、へ-らす', ''),
    ('0555', '源', 'ゲン、みなもと', ''),
    ('0556', '厳嚴', 'ゲン、（ゴン）、おごそ-か、きび-しい', ''),
    ('0557', '己', 'コ、キ、おのれ', ''),
    ('0558', '戸戶', 'コ、と', ''),
    ('0559', '古', 'コ、ふる-い、ふる-す', ''),
    ('0560', '呼', 'コ、よ-ぶ', ''),
    ('0561', '固', 'コ、かた-める、かた-まる、かた-い', '固唾'),
    ('0562', '股', 'コ、また', ''),
    ('0563', '虎', 'コ、とら', ''),
    ('0564', '孤', 'コ', ''),
    ('0565', '弧', 'コ', ''),
    ('0566', '故', 'コ、ゆえ', ''),
    ('0567', '枯', 'コ、か-れる、か-らす', ''),
    ('0568', '個', 'コ', ''),
    ('0569', '庫', 'コ、（ク）', ''),
    ('0570', '湖', 'コ、みずうみ', ''),
    ('0571', '雇', 'コ、やと-う', ''),
    ('0572', '誇', 'コ、ほこ-る', ''),
    ('0573', '鼓', 'コ、つづみ', ''),
    ('0574', '錮', 'コ', ''),
    ('0575', '顧', 'コ、かえり-みる', ''),
    ('0576', '五', 'ゴ、いつ、いつ-つ', '五月、五月雨'),
    ('0577', '互', 'ゴ、たが-い', ''),
    ('0578', '午', 'ゴ', ''),
    ('0579', '呉吳', 'ゴ', ''),
    ('0580', '後', 'ゴ、コウ、のち、うし-ろ、あと、おく-れる', ''),
    ('0581', '娯娛', 'ゴ', ''),
    ('0582', '悟', 'ゴ、さと-る', ''),
    ('0583', '碁', 'ゴ', ''),
    ('0584', '語', 'ゴ、かた-る、かた-らう', ''),
    ('0585', '誤', 'ゴ、あやま-る', ''),
    ('0586', '護', 'ゴ', ''),
    ('0587', '口', 'コウ、ク、くち', ''),
    ('0588', '工', 'コウ、ク', ''),
    ('0589', '公', 'コウ、おおやけ', ''),
    ('0590', '勾', 'コウ', ''),
    ('0591', '孔', 'コウ', ''),
    ('0592', '功', 'コウ、（ク）', ''),
    ('0593', '巧', 'コウ、たく-み', ''),
    ('0594', '広廣', 'コウ、ひろ-い、ひろ-まる、ひろ-める、ひろ-がる、ひろ-げる', ''),
    ('0595', '甲', 'コウ、カン', ''),
    ('0596', '交', 'コウ、まじ-わる、まじ-える、ま-じる、ま-ざる、ま-ぜる、か-う、か-わす', ''),
    ('0597', '光', 'コウ、ひか-る、ひかり', ''),
    ('0598', '向', 'コウ、む-く、む-ける、む-かう、む-こう', ''),
    ('0599', '后', 'コウ', ''),
    ('0600', '好', 'コウ、この-む、す-く', ''),
    ('0601', '江', 'コウ、え', ''),
    ('0602', '考', 'コウ、かんが-える', ''),
    ('0603', '行', 'コウ、ギョウ、（アン）、い-く、ゆ-く、おこな-う', '行方'),
    ('0604', '坑', 'コウ', ''),
    ('0605', '孝', 'コウ', ''),
    ('0606', '抗', 'コウ', ''),
    ('0607', '攻', 'コウ、せ-める', ''),
    ('0608', '更', 'コウ、さら、ふ-ける、ふ-かす', ''),
    ('0609', '効效', 'コウ、き-く', ''),
    ('0610', '幸', 'コウ、さいわ-い、さち、しあわ-せ', ''),
    ('0611', '拘', 'コウ', ''),
    ('0612', '肯', 'コウ', ''),
    ('0613', '侯', 'コウ', ''),
    ('0614', '厚', 'コウ、あつ-い', ''),
    ('0615', '恒恆', 'コウ', ''),
    ('0616', '洪', 'コウ', ''),
    ('0617', '皇', 'コウ、オウ', '天皇'),
    ('0618', '紅', 'コウ、（ク）、べに、くれない', '紅葉'),
    ('0619', '荒', 'コウ、あら-い、あ-れる、あ-らす', ''),
    ('0620', '郊', 'コウ', ''),
    ('0621', '香', 'コウ、（キョウ）、か、かお-り、かお-る', ''),
    ('0622', '候', 'コウ、そうろう', ''),
    ('0623', '校', 'コウ', ''),
    ('0624', '耕', 'コウ、たがや-す', ''),
    ('0625', '航', 'コウ', ''),
    ('0626', '貢', 'コウ、（ク）、みつ-ぐ', ''),
    ('0627', '降', 'コウ、お-りる、お-ろす、ふ-る', ''),
    ('0628', '高', 'コウ、たか-い、たか、たか-まる、たか-める', ''),
    ('0629', '康', 'コウ', ''),
    ('0630', '控', 'コウ、ひか-える', ''),
    ('0631', '梗', 'コウ', ''),
    ('0632', '黄黃', 'コウ、オウ、き、（こ）', '硫黄'),
    ('0633', '喉', 'コウ、のど', ''),
    ('0634', '慌', 'コウ、あわ-てる、あわ-ただしい', ''),
    ('0635', '港', 'コウ、みなと', ''),
    ('0636', '硬', 'コウ、かた-い', ''),
    ('0637', '絞', 'コウ、しぼ-る、し-める、し-まる', ''),
    ('0638', '項', 'コウ', ''),
    ('0639', '溝', 'コウ、みぞ', ''),
    ('0640', '鉱鑛', 'コウ', ''),
    ('0641', '構', 'コウ、かま-える、かま-う', ''),
    ('0642', '綱', 'コウ、つな', ''),
    ('0643', '酵', 'コウ', ''),
    ('0644', '稿', 'コウ', ''),
    ('0645', '興', 'コウ、キョウ、おこ-る、おこ-す', ''),
    ('0646', '衡', 'コウ', ''),
    ('0647', '鋼', 'コウ、はがね', ''),
    ('0648', '講', 'コウ', ''),
    ('0649', '購', 'コウ', ''),
    ('0650', '乞', 'こ-う', ''),
    ('0651', '号號', 'ゴウ', ''),
    ('0652', '合', 'ゴウ、ガッ、（カッ）、あ-う、あ-わす、あ-わせる', '合点'),
    ('0653', '拷', 'ゴウ', ''),
    ('0654', '剛', 'ゴウ', ''),
    ('0655', '傲', 'ゴウ', ''),
    ('0656', '豪', 'ゴウ', ''),
    ('0657', '克', 'コク', ''),
    ('0658', '告吿', 'コク、つ-げる', ''),
    ('0659', '谷', 'コク、たに', ''),
    ('0660', '刻', 'コク、きざ-む', ''),
    ('0661', '国國', 'コク、くに', ''),
    ('0662', '黒黑', 'コク、くろ、くろ-い', ''),
    ('0663', '穀穀', 'コク', ''),
    ('0664', '酷', 'コク', ''),
    ('0665', '獄', 'ゴク', ''),
    ('0666', '骨', 'コツ、ほね', ''),
    ('0667', '駒', 'こま', ''),
    ('0668', '込', 'こ-む、こ-める', ''),
    ('0669', '頃', 'ころ', ''),
    ('0670', '今', 'コン、キン、いま', '今日、今朝、今年'),
    ('0671', '困', 'コン、こま-る', ''),
    ('0672', '昆', 'コン', '昆布'),
    ('0673', '恨', 'コン、うら-む、うら-めしい', ''),
    ('0674', '根', 'コン、ね', ''),
    ('0675', '婚', 'コン', ''),
    ('0676', '混', 'コン、ま-じる、ま-ざる、ま-ぜる、こ-む', ''),
    ('0677', '痕', 'コン、あと', ''),
    ('0678', '紺', 'コン', '紺屋'),
    ('0679', '魂', 'コン、たましい', ''),
    ('0680', '墾', 'コン', ''),
    ('0681', '懇', 'コン、ねんご-ろ', ''),
    ('0682', '左', 'サ、ひだり', ''),
    ('0683', '佐', 'サ', ''),
    ('0684', '沙', 'サ', ''),
    ('0685', '査', 'サ', ''),
    ('0686', '砂', 'サ、シャ、すな', '砂利'),
    ('0687', '唆', 'サ、そそのか-す', ''),
    ('0688', '差', 'サ、さ-す', '差し支える'),
    ('0689', '詐', 'サ', ''),
    ('0690', '鎖', 'サ、くさり', ''),
    ('0691', '座', 'ザ、すわ-る', ''),
    ('0692', '挫', 'ザ', ''),
    ('0693', '才', 'サイ', ''),
    ('0694', '再', 'サイ、（サ）、ふたた-び', ''),
    ('0695', '災', 'サイ、わざわ-い', ''),
    ('0696', '妻', 'サイ、つま', ''),
    ('0697', '采', 'サイ', ''),
    ('0698', '砕碎', 'サイ、くだ-く、くだ-ける', ''),
    ('0699', '宰', 'サイ', ''),
    ('0700', '栽', 'サイ', ''),
    ('0701', '彩', 'サイ、いろど-る', ''),
    ('0702', '採', 'サイ、と-る', ''),
    ('0703', '済濟', 'サイ、す-む、す-ます', ''),
    ('0704', '祭', 'サイ、まつ-る、まつ-り', ''),
    ('0705', '斎齋', 'サイ', ''),
    ('0706', '細', 'サイ、ほそ-い、ほそ-る、こま-か、こま-かい', ''),
    ('0707', '菜', 'サイ、な', ''),
    ('0708', '最', 'サイ、もっと-も', '最寄り'),
    ('0709', '裁', 'サイ、た-つ、さば-く', ''),
    ('0710', '債', 'サイ', ''),
    ('0711', '催', 'サイ、もよお-す', ''),
    ('0712', '塞', 'サイ、ソク、ふさ-ぐ、ふさ-がる', ''),
    ('0713', '歳歲', 'サイ、（セイ）', '二十歳'),
    ('0714', '載', 'サイ、の-せる、の-る', ''),
    ('0715', '際', 'サイ、きわ', ''),
    ('0716', '埼', '（さい）', '埼玉'),
    ('0717', '在', 'ザイ、あ-る', ''),
    ('0718', '材', 'ザイ', ''),
    ('0719', '剤劑', 'ザイ', ''),
    ('0720', '財', 'ザイ、（サイ）', ''),
    ('0721', '罪', 'ザイ、つみ', ''),
    ('0722', '崎', 'さき', ''),
    ('0723', '作', 'サク、サ、つく-る', ''),
    ('0724', '削', 'サク、けず-る', ''),
    ('0725', '昨', 'サク', '昨日'),
    ('0726', '柵', 'サク', ''),
    ('0727', '索', 'サク', ''),
    ('0728', '策', 'サク', ''),
    ('0729', '酢', 'サク、す', ''),
    ('0730', '搾', 'サク、しぼ-る', ''),
    ('0731', '錯', 'サク', ''),
    ('0732', '咲', 'さ-く', ''),
    ('0733', '冊册', 'サツ、サク', ''),
    ('0734', '札', 'サツ、ふだ', ''),
    ('0735', '刷', 'サツ、す-る', ''),
    ('0736', '刹', 'サツ、セツ', ''),
    ('0737', '拶', 'サツ', ''),
    ('0738', '殺殺', 'サツ、（サイ）、（セツ）、ころ-す', ''),
    ('0739', '察', 'サツ', ''),
    ('0740', '撮', 'サツ、と-る', ''),
    ('0741', '擦', 'サツ、す-る、す-れる', ''),
    ('0742', '雑雜', 'ザツ、ゾウ', '雑魚'),
    ('0743', '皿', 'さら', ''),
    ('0744', '三', 'サン、み、み-つ、みっ-つ', '三味線'),
    ('0745', '山', 'サン、やま', '山車、築山、富山'),
    ('0746', '参參', 'サン、まい-る', ''),
    ('0747', '桟棧', 'サン', '桟敷'),
    ('0748', '蚕蠶', 'サン、かいこ', ''),
    ('0749', '惨慘', 'サン、ザン、みじ-め', ''),
    ('0750', '産產', 'サン、う-む、う-まれる、うぶ', '土産'),
    ('0751', '傘', 'サン、かさ', ''),
    ('0752', '散', 'サン、ち-る、ち-らす、ち-らかす、ち-らかる', ''),
    ('0753', '算', 'サン', ''),
    ('0754', '酸', 'サン、す-い', ''),
    ('0755', '賛贊', 'サン', ''),
    ('0756', '残殘', 'ザン、のこ-る、のこ-す', '名残'),
    ('0757', '斬', 'ザン、き-る', ''),
    ('0758', '暫', 'ザン', ''),
    ('0759', '士', 'シ', '海士、居士、博士'),
    ('0760', '子', 'シ、ス、こ', '迷子、息子'),
    ('0761', '支', 'シ、ささ-える', '差し支える'),
    ('0762', '止', 'シ、と-まる、と-める', '波止場'),
    ('0763', '氏', 'シ、うじ', ''),
    ('0764', '仕', 'シ、（ジ）、つか-える', ''),
    ('0765', '史', 'シ', ''),
    ('0766', '司', 'シ', ''),
    ('0767', '四', 'シ、よ、よ-つ、よっ-つ、よん', ''),
    ('0768', '市', 'シ、いち', ''),
    ('0769', '矢', 'シ、や', ''),
    ('0770', '旨', 'シ、むね', ''),
    ('0771', '死', 'シ、し-ぬ', ''),
    ('0772', '糸絲', 'シ、いと', ''),
    ('0773', '至', 'シ、いた-る', ''),
    ('0774', '伺', 'シ、うかが-う', ''),
    ('0775', '志', 'シ、こころざ-す、こころざし', ''),
    ('0776', '私', 'シ、わたくし、わたし', ''),
    ('0777', '使', 'シ、つか-う', ''),
    ('0778', '刺', 'シ、さ-す、さ-さる', ''),
    ('0779', '始', 'シ、はじ-める、はじ-まる', ''),
    ('0780', '姉', 'シ、あね', '姉さん'),
    ('0781', '枝', 'シ、えだ', ''),
    ('0782', '祉祉', 'シ', ''),
    ('0783', '肢', 'シ', ''),
    ('0784', '姿', 'シ、すがた', ''),
    ('0785', '思', 'シ、おも-う', ''),
    ('0786', '指', 'シ、ゆび、さ-す', ''),
    ('0787', '施', 'シ、セ、ほどこ-す', ''),
    ('0788', '師', 'シ', '師走'),
    ('0789', '恣', 'シ', ''),
    ('0790', '紙', 'シ、かみ', ''),
    ('0791', '脂', 'シ、あぶら', ''),
    ('0792', '視視', 'シ', ''),
    ('0793', '紫', 'シ、むらさき', ''),
    ('0794', '詞', 'シ', '祝詞'),
    ('0795', '歯齒', 'シ、は', ''),
    ('0796', '嗣', 'シ', ''),
    ('0797', '試', 'シ、こころ-みる、ため-す', ''),
    ('0798', '詩', 'シ', '詩歌'),
    ('0799', '資', 'シ', ''),
    ('0800', '飼飼', 'シ、か-う', ''),
    ('0801', '誌', 'シ', ''),
    ('0802', '雌', 'シ、め、めす', ''),
    ('0803', '摯', 'シ', ''),
    ('0804', '賜', 'シ、たまわ-る', ''),
    ('0805', '諮', 'シ、はか-る', ''),
    ('0806', '示', 'ジ、シ、しめ-す', ''),
    ('0807', '字', 'ジ、あざ', '文字'),
    ('0808', '寺', 'ジ、てら', ''),
    ('0809', '次', 'ジ、シ、つ-ぐ、つぎ', ''),
    ('0810', '耳', 'ジ、みみ', ''),
    ('0811', '自', 'ジ、シ、みずか-ら', ''),
    ('0812', '似', 'ジ、に-る', ''),
    ('0813', '児兒', 'ジ、（ニ）', '稚児、鹿児島'),
    ('0814', '事', 'ジ、（ズ）、こと', ''),
    ('0815', '侍', 'ジ、さむらい', ''),
    ('0816', '治', 'ジ、チ、おさ-める、おさ-まる、なお-る、なお-す', ''),
    ('0817', '持', 'ジ、も-つ', ''),
    ('0818', '時', 'ジ、とき', '時雨、時計'),
    ('0819', '滋', 'ジ', '滋賀'),
    ('0820', '慈', 'ジ、いつく-しむ', ''),
    ('0821', '辞辭', 'ジ、や-める', ''),
    ('0822', '磁', 'ジ', ''),
    ('0823', '餌', 'ジ、えさ、え', ''),
    ('0824', '璽', 'ジ', ''),
    ('0825', '鹿', 'しか、（か）', '鹿児島'),
    ('0826', '式', 'シキ', ''),
    ('0827', '識', 'シキ', ''),
    ('0828', '軸', 'ジク', ''),
    ('0829', '七', 'シチ、なな、なな-つ、（なの）', '七夕、七日'),
    ('0830', '𠮟(叱)', 'シツ、しか-る', ''),
    ('0831', '失', 'シツ、うしな-う', ''),
    ('0832', '室', 'シツ、むろ', ''),
    ('0833', '疾', 'シツ', ''),
    ('0834', '執', 'シツ、シュウ、と-る', ''),
    ('0835', '湿濕', 'シツ、しめ-る、しめ-す', ''),
    ('0836', '嫉', 'シツ', ''),
    ('0837', '漆', 'シツ、うるし', ''),
    ('0838', '質', 'シツ、シチ、（チ）', ''),
    ('0839', '実實', 'ジツ、み、みの-る', ''),
    ('0840', '芝', 'しば', '芝生'),
    ('0841', '写寫', 'シャ、うつ-す、うつ-る', ''),
    ('0842', '社社', 'シャ、やしろ', ''),
    ('0843', '車', 'シャ、くるま', '山車'),
    ('0844', '舎舍', 'シャ', '田舎'),
    ('0845', '者者', 'シャ、もの', '猛者'),
    ('0846', '射', 'シャ、い-る', ''),
    ('0847', '捨', 'シャ、す-てる', ''),
    ('0848', '赦', 'シャ', ''),
    ('0849', '斜', 'シャ、なな-め', ''),
    ('0850', '煮煮', 'シャ、に-る、に-える、に-やす', ''),
    ('0851', '遮', 'シャ、さえぎ-る', ''),
    ('0852', '謝', 'シャ、あやま-る', ''),
    ('0853', '邪', 'ジャ', '風邪'),
    ('0854', '蛇', 'ジャ、ダ、へび', ''),
    ('0855', '尺', 'シャク', ''),
    ('0856', '借', 'シャク、か-りる', ''),
    ('0857', '酌', 'シャク、く-む', ''),
    ('0858', '釈釋', 'シャク', ''),
    ('0859', '爵', 'シャク', ''),
    ('0860', '若', 'ジャク、（ニャク）、わか-い、も-しくは', '若人'),
    ('0861', '弱', 'ジャク、よわ-い、よわ-る、よわ-まる、よわ-める', ''),
    ('0862', '寂', 'ジャク、（セキ）、さび、さび-しい、さび-れる', ''),
    ('0863', '手', 'シュ、て、（た）', '上手、手伝う、下手'),
    ('0864', '主', 'シュ、（ス）、ぬし、おも', ''),
    ('0865', '守', 'シュ、（ス）、まも-る、も-り', ''),
    ('0866', '朱', 'シュ', ''),
    ('0867', '取', 'シュ、と-る', '鳥取'),
    ('0868', '狩', 'シュ、か-る、か-り', ''),
    ('0869', '首', 'シュ、くび', ''),
    ('0870', '殊', 'シュ、こと', ''),
    ('0871', '珠', 'シュ', '数珠'),
    ('0872', '酒', 'シュ、さけ、（さか）', 'お神酒'),
    ('0873', '腫', 'シュ、は-れる、は-らす', ''),
    ('0874', '種', 'シュ、たね', ''),
    ('0875', '趣', 'シュ、おもむき', ''),
    ('0876', '寿壽', 'ジュ、ことぶき', ''),
    ('0877', '受', 'ジュ、う-ける、う-かる', ''),
    ('0878', '呪', 'ジュ、のろ-う', ''),
    ('0879', '授', 'ジュ、さず-ける、さず-かる', ''),
    ('0880', '需', 'ジュ', ''),
    ('0881', '儒', 'ジュ', ''),
    ('0882', '樹', 'ジュ', ''),
    ('0883', '収收', 'シュウ、おさ-める、おさ-まる', ''),
    ('0884', '囚', 'シュウ', ''),
    ('0885', '州', 'シュウ、す', ''),
    ('0886', '舟', 'シュウ、ふね、（ふな）', ''),
    ('0887', '秀', 'シュウ、ひい-でる', ''),
    ('0888', '周', 'シュウ、まわ-り', ''),
    ('0889', '宗', 'シュウ、ソウ', ''),
    ('0890', '拾', 'シュウ、ジュウ、ひろ-う', ''),
    ('0891', '秋', 'シュウ、あき', ''),
    ('0892', '臭臭', 'シュウ、くさ-い、にお-う', ''),
    ('0893', '修', 'シュウ、（シュ）、おさ-める、おさ-まる', ''),
    ('0894', '袖', 'シュウ、そで', ''),
    ('0895', '終', 'シュウ、お-わる、お-える', ''),
    ('0896', '羞', 'シュウ', ''),
    ('0897', '習', 'シュウ、なら-う', ''),
    ('0898', '週', 'シュウ', ''),
    ('0899', '就', 'シュウ、（ジュ）、つ-く、つ-ける', ''),
    ('0900', '衆', 'シュウ、（シュ）', ''),
    ('0901', '集', 'シュウ、あつ-まる、あつ-める、つど-う', ''),
    ('0902', '愁', 'シュウ、うれ-える、うれ-い', ''),
    ('0903', '酬', 'シュウ', ''),
    ('0904', '醜', 'シュウ、みにく-い', ''),
    ('0905', '蹴', 'シュウ、け-る', ''),
    ('0906', '襲', 'シュウ、おそ-う', ''),
    ('0907', '十', 'ジュウ、ジッ、とお、と', '十重二十重、二十、二十歳、二十日、十'),
    ('0908', '汁', 'ジュウ、しる', ''),
    ('0909', '充', 'ジュウ、あ-てる', ''),
    ('0910', '住', 'ジュウ、す-む、す-まう', ''),
    ('0911', '柔', 'ジュウ、ニュウ、やわ-らか、やわ-らかい', ''),
    ('0912', '重', 'ジュウ、チョウ、え、おも-い、かさ-ねる、かさ-なる', '十重二十重'),
    ('0913', '従從', 'ジュウ、（ショウ）、（ジュ）、したが-う、したが-える', ''),
    ('0914', '渋澁', 'ジュウ、しぶ、しぶ-い、しぶ-る', ''),
    ('0915', '銃', 'ジュウ', ''),
    ('0916', '獣獸', 'ジュウ、けもの', ''),
    ('0917', '縦縱', 'ジュウ、たて', ''),
    ('0918', '叔', 'シュク', '叔父、叔母'),
    ('0919', '祝祝', 'シュク、（シュウ）、いわ-う', '祝詞'),
    ('0920', '宿', 'シュク、やど、やど-る、やど-す', ''),
    ('0921', '淑', 'シュク', ''),
    ('0922', '粛肅', 'シュク', ''),
    ('0923', '縮', 'シュク、ちぢ-む、ちぢ-まる、ちぢ-める、ちぢ-れる、ちぢ-らす', ''),
    ('0924', '塾', 'ジュク', ''),
    ('0925', '熟', 'ジュク、う-れる', ''),
    ('0926', '出', 'シュツ、（スイ）、で-る、だ-す', ''),
    ('0927', '述', 'ジュツ、の-べる', ''),
    ('0928', '術', 'ジュツ', ''),
    ('0929', '俊', 'シュン', ''),
    ('0930', '春', 'シュン、はる', ''),
    ('0931', '瞬', 'シュン、またた-く', ''),
    ('0932', '旬', 'ジュン、（シュン）', ''),
    ('0933', '巡', 'ジュン、めぐ-る', 'お巡りさん'),
    ('0934', '盾', 'ジュン、たて', ''),
    ('0935', '准', 'ジュン', ''),
    ('0936', '殉', 'ジュン', ''),
    ('0937', '純', 'ジュン', ''),
    ('0938', '循', 'ジュン', ''),
    ('0939', '順', 'ジュン', ''),
    ('0940', '準', 'ジュン', ''),
    ('0941', '潤', 'ジュン、うるお-う、うるお-す、うる-む', ''),
    ('0942', '遵', 'ジュン', ''),
    ('0943', '処處', 'ショ', ''),
    ('0944', '初', 'ショ、はじ-め、はじ-めて、はつ、うい、そ-める', ''),
    ('0945', '所', 'ショ、ところ', ''),
    ('0946', '書', 'ショ、か-く', ''),
    ('0947', '庶', 'ショ', ''),
    ('0948', '暑暑', 'ショ、あつ-い', ''),
    ('0949', '署署', 'ショ', ''),
    ('0950', '緒緖', 'ショ、（チョ）、お', ''),
    ('0951', '諸諸', 'ショ', ''),
    ('0952', '女', 'ジョ、ニョ、（ニョウ）、おんな、め', '海女、乙女、早乙女'),
    ('0953', '如', 'ジョ、ニョ', ''),
    ('0954', '助', 'ジョ、たす-ける、たす-かる、すけ', ''),
    ('0955', '序', 'ジョ', ''),
    ('0956', '叙敍', 'ジョ', ''),
    ('0957', '徐', 'ジョ', ''),
    ('0958', '除', 'ジョ、（ジ）、のぞ-く', ''),
    ('0959', '小', 'ショウ、ちい-さい、こ、お', '小豆'),
    ('0960', '升', 'ショウ、ます', ''),
    ('0961', '少', 'ショウ、すく-ない、すこ-し', ''),
    ('0962', '召', 'ショウ、め-す', ''),
    ('0963', '匠', 'ショウ', ''),
    ('0964', '床', 'ショウ、とこ、ゆか', ''),
    ('0965', '抄', 'ショウ', ''),
    ('0966', '肖', 'ショウ', ''),
    ('0967', '尚尙', 'ショウ', ''),
    ('0968', '招', 'ショウ、まね-く', ''),
    ('0969', '承', 'ショウ、うけたまわ-る', ''),
    ('0970', '昇', 'ショウ、のぼ-る', ''),
    ('0971', '松', 'ショウ、まつ', ''),
    ('0972', '沼', 'ショウ、ぬま', ''),
    ('0973', '昭', 'ショウ', ''),
    ('0974', '宵', 'ショウ、よい', ''),
    ('0975', '将將', 'ショウ', ''),
    ('0976', '消', 'ショウ、き-える、け-す', ''),
    ('0977', '症', 'ショウ', ''),
    ('0978', '祥祥', 'ショウ', ''),
    ('0979', '称稱', 'ショウ', ''),
    ('0980', '笑', 'ショウ、わら-う、え-む', '笑顔'),
    ('0981', '唱', 'ショウ、とな-える', ''),
    ('0982', '商', 'ショウ、あきな-う', ''),
    ('0983', '渉涉', 'ショウ', ''),
    ('0984', '章', 'ショウ', ''),
    ('0985', '紹', 'ショウ', ''),
    ('0986', '訟', 'ショウ', ''),
    ('0987', '勝', 'ショウ、か-つ、まさ-る', ''),
    ('0988', '掌', 'ショウ', ''),
    ('0989', '晶', 'ショウ', ''),
    ('0990', '焼燒', 'ショウ、や-く、や-ける', ''),
    ('0991', '焦', 'ショウ、こ-げる、こ-がす、こ-がれる、あせ-る', ''),
    ('0992', '硝', 'ショウ', ''),
    ('0993', '粧', 'ショウ', ''),
    ('0994', '詔', 'ショウ、みことのり', ''),
    ('0995', '証證', 'ショウ', ''),
    ('0996', '象', 'ショウ、ゾウ', ''),
    ('0997', '傷', 'ショウ、きず、いた-む、いた-める', ''),
    ('0998', '奨奬', 'ショウ', ''),
    ('0999', '照', 'ショウ、て-る、て-らす、て-れる', ''),
    ('1000', '詳', 'ショウ、くわ-しい', ''),
    ('1001', '彰', 'ショウ', ''),
    ('1002', '障', 'ショウ、さわ-る', ''),
    ('1003', '憧', 'ショウ、あこが-れる', '憧憬'),
    ('1004', '衝', 'ショウ', ''),
    ('1005', '賞', 'ショウ', ''),
    ('1006', '償', 'ショウ、つぐな-う', ''),
    ('1007', '礁', 'ショウ', ''),
    ('1008', '鐘', 'ショウ、かね', ''),
    ('1009', '上', 'ジョウ、（ショウ）、うえ、（うわ）、かみ、あ-げる、あ-がる、のぼ-る、のぼ-せる、のぼ-す', '上手'),
    ('1010', '丈', 'ジョウ、たけ', ''),
    ('1011', '冗', 'ジョウ', ''),
    ('1012', '条條', 'ジョウ', ''),
    ('1013', '状狀', 'ジョウ', ''),
    ('1014', '乗乘', 'ジョウ、の-る、の-せる', ''),
    ('1015', '城', 'ジョウ、しろ', '茨城、宮城'),
    ('1016', '浄淨', 'ジョウ', ''),
    ('1017', '剰剩', 'ジョウ', ''),
    ('1018', '常', 'ジョウ、つね、とこ', ''),
    ('1019', '情', 'ジョウ、（セイ）、なさ-け', ''),
    ('1020', '場', 'ジョウ、ば', '波止場'),
    ('1021', '畳疊', 'ジョウ、たた-む、たたみ', ''),
    ('1022', '蒸', 'ジョウ、む-す、む-れる、む-らす', ''),
    ('1023', '縄繩', 'ジョウ、なわ', ''),
    ('1024', '壌壤', 'ジョウ', ''),
    ('1025', '嬢孃', 'ジョウ', ''),
    ('1026', '錠', 'ジョウ', ''),
    ('1027', '譲讓', 'ジョウ、ゆず-る', ''),
    ('1028', '醸釀', 'ジョウ、かも-す', ''),
    ('1029', '色', 'ショク、シキ、いろ', '景色'),
    ('1030', '拭', 'ショク、ふ-く、ぬぐ-う', ''),
    ('1031', '食', 'ショク、（ジキ）、く-う、く-らう、た-べる', ''),
    ('1032', '植', 'ショク、う-える、う-わる', ''),
    ('1033', '殖', 'ショク、ふ-える、ふ-やす', ''),
    ('1034', '飾', 'ショク、かざ-る', ''),
    ('1035', '触觸', 'ショク、ふ-れる、さわ-る', ''),
    ('1036', '嘱囑', 'ショク', ''),
    ('1037', '織', 'ショク、シキ、お-る', ''),
    ('1038', '職', 'ショク', ''),
    ('1039', '辱', 'ジョク、はずかし-める', ''),
    ('1040', '尻', 'しり', '尻尾'),
    ('1041', '心', 'シン、こころ', '心地'),
    ('1042', '申', 'シン、もう-す', ''),
    ('1043', '伸', 'シン、の-びる、の-ばす、の-べる', ''),
    ('1044', '臣', 'シン、ジン', ''),
    ('1045', '芯', 'シン', ''),
    ('1046', '身', 'シン、み', ''),
    ('1047', '辛', 'シン、から-い', ''),
    ('1048', '侵', 'シン、おか-す', ''),
    ('1049', '信', 'シン', ''),
    ('1050', '津', 'シン、つ', ''),
    ('1051', '神神', 'シン、ジン、かみ、（かん）、（こう）', 'お神酒、神楽、神奈川'),
    ('1052', '唇', 'シン、くちびる', ''),
    ('1053', '娠', 'シン', ''),
    ('1054', '振', 'シン、ふ-る、ふ-るう、ふ-れる', ''),
    ('1055', '浸', 'シン、ひた-す、ひた-る', ''),
    ('1056', '真眞', 'シン、ま', '真面目、真っ赤、真っ青'),
    ('1057', '針', 'シン、はり', ''),
    ('1058', '深', 'シン、ふか-い、ふか-まる、ふか-める', ''),
    ('1059', '紳', 'シン', ''),
    ('1060', '進', 'シン、すす-む、すす-める', ''),
    ('1061', '森', 'シン、もり', ''),
    ('1062', '診', 'シン、み-る', ''),
    ('1063', '寝寢', 'シン、ね-る、ね-かす', ''),
    ('1064', '慎愼', 'シン、つつし-む', ''),
    ('1065', '新', 'シン、あたら-しい、あら-た、にい', ''),
    ('1066', '審', 'シン', ''),
    ('1067', '震', 'シン、ふる-う、ふる-える', ''),
    ('1068', '薪', 'シン、たきぎ', ''),
    ('1069', '親', 'シン、おや、した-しい、した-しむ', ''),
    ('1070', '人', 'ジン、ニン、ひと', '大人、玄人、素人、仲人、一人、二人、若人'),
    ('1071', '刃', 'ジン、は', ''),
    ('1072', '仁', 'ジン、（ニ）', ''),
    ('1073', '尽盡', 'ジン、つ-くす、つ-きる、つ-かす', ''),
    ('1074', '迅', 'ジン', ''),
    ('1075', '甚', 'ジン、はなは-だ、はなは-だしい', ''),
    ('1076', '陣', 'ジン', ''),
    ('1077', '尋', 'ジン、たず-ねる', ''),
    ('1078', '腎', 'ジン', ''),
    ('1079', '須', 'ス', ''),
    ('1080', '図圖', 'ズ、ト、はか-る', ''),
    ('1081', '水', 'スイ、みず', '清水'),
    ('1082', '吹', 'スイ、ふ-く', '息吹、吹雪'),
    ('1083', '垂', 'スイ、た-れる、た-らす', ''),
    ('1084', '炊', 'スイ、た-く', ''),
    ('1085', '帥', 'スイ', ''),
    ('1086', '粋粹', 'スイ、いき', ''),
    ('1087', '衰', 'スイ、おとろ-える', ''),
    ('1088', '推', 'スイ、お-す', ''),
    ('1089', '酔醉', 'スイ、よ-う', ''),
    ('1090', '遂', 'スイ、と-げる', ''),
    ('1091', '睡', 'スイ', ''),
    ('1092', '穂穗', 'スイ、ほ', ''),
    ('1093', '随隨', 'ズイ', ''),
    ('1094', '髄髓', 'ズイ', ''),
    ('1095', '枢樞', 'スウ', ''),
    ('1096', '崇', 'スウ', ''),
    ('1097', '数數', 'スウ、（ス）、かず、かぞ-える', '数珠、数寄屋、数奇屋'),
    ('1098', '据', 'す-える、す-わる', ''),
    ('1099', '杉', 'すぎ', ''),
    ('1100', '裾', 'すそ', ''),
    ('1101', '寸', 'スン', ''),
    ('1102', '瀬瀨', 'せ', ''),
    ('1103', '是', 'ゼ', ''),
    ('1104', '井', 'セイ、（ショウ）、い', ''),
    ('1105', '世', 'セイ、セ、よ', ''),
    ('1106', '正', 'セイ、ショウ、ただ-しい、ただ-す、まさ', ''),
    ('1107', '生',
     'セイ、ショウ、い-きる、い-かす、い-ける、う-まれる、う-む、お-う、は-える、は-やす、き、なま',
     '芝生、弥生'),
    ('1108', '成', 'セイ、（ジョウ）、な-る、な-す', ''),
    ('1109', '西', 'セイ、サイ、にし', ''),
    ('1110', '声聲', 'セイ、（ショウ）、こえ、（こわ）', ''),
    ('1111', '制', 'セイ', ''),
    ('1112', '姓', 'セイ、ショウ', ''),
    ('1113', '征', 'セイ', ''),
    ('1114', '性', 'セイ、ショウ', ''),
    ('1115', '青靑', 'セイ、（ショウ）、あお、あお-い', '真っ青'),
    ('1116', '斉齊', 'セイ', ''),
    ('1117', '政', 'セイ、（ショウ）、まつりごと', ''),
    ('1118', '星', 'セイ、（ショウ）、ほし', ''),
    ('1119', '牲', 'セイ', ''),
    ('1120', '省', 'セイ、ショウ、かえり-みる、はぶ-く', ''),
    ('1121', '凄', 'セイ', ''),
    ('1122', '逝', 'セイ、ゆ-く、い-く', ''),
    ('1123', '清淸', 'セイ、（ショウ）、きよ-い、きよ-まる、きよ-める', '清水'),
    ('1124', '盛', 'セイ、（ジョウ）、も-る、さか-る、さか-ん', ''),
    ('1125', '婿', 'セイ、むこ', ''),
    ('1126', '晴晴', 'セイ、は-れる、は-らす', ''),
    ('1127', '勢', 'セイ、いきお-い', ''),
    ('1128', '聖', 'セイ', ''),
    ('1129', '誠', 'セイ、まこと', ''),
    ('1130', '精精', 'セイ、（ショウ）', ''),
    ('1131', '製', 'セイ', ''),
    ('1132', '誓', 'セイ、ちか-う', ''),
    ('1133', '静靜', 'セイ、（ジョウ）、しず、しず-か、しず-まる、しず-める', ''),
    ('1134', '請', 'セイ、（シン）、こ-う、う-ける', ''),
    ('1135', '整', 'セイ、ととの-える、ととの-う', ''),
    ('1136', '醒', 'セイ', ''),
    ('1137', '税稅', 'ゼイ', ''),
    ('1138', '夕', 'セキ、ゆう', '七夕'),
    ('1139', '斥', 'セキ', ''),
    ('1140', '石', 'セキ、（シャク）、（コク）、いし', ''),
    ('1141', '赤', 'セキ、（シャク）、あか、あか-い、あか-らむ、あか-らめる', '真っ赤'),
    ('1142', '昔', 'セキ、（シャク）、むかし', ''),
    ('1143', '析', 'セキ', ''),
    ('1144', '席', 'セキ', '寄席'),
    ('1145', '脊', 'セキ', ''),
    ('1146', '隻', 'セキ', ''),
    ('1147', '惜', 'セキ、お-しい、お-しむ', ''),
    ('1148', '戚', 'セキ', ''),
    ('1149', '責', 'セキ、せ-める', ''),
    ('1150', '跡', 'セキ、あと', ''),
    ('1151', '積', 'セキ、つ-む、つ-もる', ''),
    ('1152', '績', 'セキ', ''),
    ('1153', '籍', 'セキ', ''),
    ('1154', '切', 'セツ、（サイ）、き-る、き-れる', ''),
    ('1155', '折', 'セツ、お-る、おり、お-れる', ''),
    ('1156', '拙', 'セツ、つたな-い', ''),
    ('1157', '窃竊', 'セツ', ''),
    ('1158', '接', 'セツ、つ-ぐ', ''),
    ('1159', '設', 'セツ、もう-ける', ''),
    ('1160', '雪', 'セツ、ゆき', '雪崩、吹雪'),
    ('1161', '摂攝', 'セツ', ''),
    ('1162', '節節', 'セツ、（セチ）、ふし', ''),
    ('1163', '説說', 'セツ、（ゼイ）、と-く', ''),
    ('1164', '舌', 'ゼツ、した', ''),
    ('1165', '絶絕', 'ゼツ、た-える、た-やす、た-つ', ''),
    ('1166', '千', 'セン、ち', ''),
    ('1167', '川', 'セン、かわ', '川原、神奈川'),
    ('1168', '仙', 'セン', ''),
    ('1169', '占', 'セン、し-める、うらな-う', ''),
    ('1170', '先', 'セン、さき', ''),
    ('1171', '宣', 'セン', ''),
    ('1172', '専專', 'セン、もっぱ-ら', ''),
    ('1173', '泉', 'セン、いずみ', ''),
    ('1174', '浅淺', 'セン、あさ-い', ''),
    ('1175', '洗', 'セン、あら-う', ''),
    ('1176', '染', 'セン、そ-める、そ-まる、し-みる、し-み', ''),
    ('1177', '扇', 'セン、おうぎ', ''),
    ('1178', '栓', 'セン', ''),
    ('1179', '旋', 'セン', ''),
    ('1180', '船', 'セン、ふね、（ふな）', '伝馬船'),
    ('1181', '戦戰', 'セン、いくさ、たたか-う', ''),
    ('1182', '煎', 'セン、い-る', ''),
    ('1183', '羨', 'セン、うらや-む、うらや-ましい', ''),
    ('1184', '腺', 'セン', ''),
    ('1185', '詮', 'セン', ''),
    ('1186', '践踐', 'セン', ''),
    ('1187', '箋', 'セン', ''),
    ('1188', '銭錢', 'セン、ぜに', ''),
    ('1189', '潜潛', 'セン、ひそ-む、もぐ-る', ''),
    ('1190', '線', 'セン', '三味線'),
    ('1191', '遷', 'セン', ''),
    ('1192', '選', 'セン、えら-ぶ', ''),
    ('1193', '薦', 'セン、すす-める', ''),
    ('1194', '繊纖', 'セン', ''),
    ('1195', '鮮', 'セン、あざ-やか', ''),
    ('1196', '全', 'ゼン、まった-く、すべ-て', ''),
    ('1197', '前', 'ゼン、まえ', ''),
    ('1198', '善', 'ゼン、よ-い', ''),
    ('1199', '然', 'ゼン、ネン', ''),
    ('1200', '禅禪', 'ゼン', ''),
    ('1201', '漸', 'ゼン', ''),
    ('1202', '膳', 'ゼン', ''),
    ('1203', '繕', 'ゼン、つくろ-う', ''),
    ('1204', '狙', 'ソ、ねら-う', ''),
    ('1205', '阻', 'ソ、はば-む', ''),
    ('1206', '祖祖', 'ソ', ''),
    ('1207', '租', 'ソ', ''),
    ('1208', '素', 'ソ、ス', '素人'),
    ('1209', '措', 'ソ', ''),
    ('1210', '粗', 'ソ、あら-い', ''),
    ('1211', '組', 'ソ、く-む、くみ', ''),
    ('1212', '疎', 'ソ、うと-い、うと-む', ''),
    ('1213', '訴', 'ソ、うった-える', ''),
    ('1214', '塑', 'ソ', ''),
    ('1215', '遡', 'ソ、さかのぼ-る', ''),
    ('1216', '礎', 'ソ、いしずえ', ''),
    ('1217', '双雙', 'ソウ、ふた', ''),
    ('1218', '壮壯', 'ソウ', ''),
    ('1219', '早', 'ソウ、（サッ）、はや-い、はや-まる、はや-める', '早乙女、早苗'),
    ('1220', '争爭', 'ソウ、あらそ-う', ''),
    ('1221', '走', 'ソウ、はし-る', '師走'),
    ('1222', '奏', 'ソウ、かな-でる', ''),
    ('1223', '相', 'ソウ、ショウ、あい', '相撲'),
    ('1224', '荘莊', 'ソウ', ''),
    ('1225', '草', 'ソウ、くさ', '草履'),
    ('1226', '送', 'ソウ、おく-る', ''),
    ('1227', '倉', 'ソウ、くら', ''),
    ('1228', '捜搜', 'ソウ、さが-す', ''),
    ('1229', '挿揷', 'ソウ、さ-す', ''),
    ('1230', '桑', 'ソウ、くわ', ''),
    ('1231', '巣巢', 'ソウ、す', ''),
    ('1232', '掃', 'ソウ、は-く', ''),
    ('1233', '曹', 'ソウ', ''),
    ('1234', '曽曾', 'ソウ、（ゾ）', ''),
    ('1235', '爽', 'ソウ、さわ-やか', ''),
    ('1236', '窓', 'ソウ、まど', ''),
    ('1237', '創', 'ソウ、つく-る', ''),
    ('1238', '喪', 'ソウ、も', ''),
    ('1239', '痩瘦', 'ソウ、や-せる', ''),
    ('1240', '葬', 'ソウ、ほうむ-る', ''),
    ('1241', '装裝', 'ソウ、ショウ、よそお-う', ''),
    ('1242', '僧僧', 'ソウ', ''),
    ('1243', '想', 'ソウ、（ソ）', ''),
    ('1244', '層層', 'ソウ', ''),
    ('1245', '総總', 'ソウ', ''),
    ('1246', '遭', 'ソウ、あ-う', ''),
    ('1247', '槽', 'ソウ', ''),
    ('1248', '踪', 'ソウ', ''),
    ('1249', '操', 'ソウ、みさお、あやつ-る', ''),
    ('1250', '燥', 'ソウ', ''),
    ('1251', '霜', 'ソウ、しも', ''),
    ('1252', '騒騷', 'ソウ、さわ-ぐ', ''),
    ('1253', '藻', 'ソウ、も', ''),
    ('1254', '造', 'ゾウ、つく-る', ''),
    ('1255', '像', 'ゾウ', ''),
    ('1256', '増增', 'ゾウ、ま-す、ふ-える、ふ-やす', ''),
    ('1257', '憎憎', 'ゾウ、にく-む、にく-い、にく-らしい、にく-しみ', ''),
    ('1258', '蔵藏', 'ゾウ、くら', ''),
    ('1259', '贈贈', 'ゾウ、（ソウ）、おく-る', ''),
    ('1260', '臓臟', 'ゾウ', ''),
    ('1261', '即卽', 'ソク', ''),
    ('1262', '束', 'ソク、たば', ''),
    ('1263', '足', 'ソク、あし、た-りる、た-る、た-す', '足袋'),
    ('1264', '促', 'ソク、うなが-す', ''),
    ('1265', '則', 'ソク', ''),
    ('1266', '息', 'ソク、いき', '息吹、息子'),
    ('1267', '捉', 'ソク、とら-える', ''),
    ('1268', '速', 'ソク、はや-い、はや-める、はや-まる、すみ-やか', ''),
    ('1269', '側', 'ソク、がわ', '側'),
    ('1270', '測', 'ソク、はか-る', ''),
    ('1271', '俗', 'ゾク', ''),
    ('1272', '族', 'ゾク', ''),
    ('1273', '属屬', 'ゾク', ''),
    ('1274', '賊', 'ゾク', ''),
    ('1275', '続續', 'ゾク、つづ-く、つづ-ける', ''),
    ('1276', '卒', 'ソツ', ''),
    ('1277', '率', 'ソツ、リツ、ひき-いる', ''),
    ('1278', '存', 'ソン、ゾン', ''),
    ('1279', '村', 'ソン、むら', ''),
    ('1280', '孫', 'ソン、まご', ''),
    ('1281', '尊', 'ソン、たっと-い、とうと-い、たっと-ぶ、とうと-ぶ', ''),
    ('1282', '損', 'ソン、そこ-なう、そこ-ねる', ''),
    ('1283', '遜', 'ソン', ''),
    ('1284', '他', 'タ、ほか', ''),
    ('1285', '多', 'タ、おお-い', ''),
    ('1286', '汰', 'タ', ''),
    ('1287', '打', 'ダ、う-つ', ''),
    ('1288', '妥', 'ダ', ''),
    ('1289', '唾', 'ダ、つば', '固唾、唾'),
    ('1290', '堕墮', 'ダ', ''),
    ('1291', '惰', 'ダ', ''),
    ('1292', '駄', 'ダ', ''),
    ('1293', '太', 'タイ、タ、ふと-い、ふと-る', '太刀'),
    ('1294', '対對', 'タイ、ツイ', ''),
    ('1295', '体體', 'タイ、テイ、からだ', ''),
    ('1296', '耐', 'タイ、た-える', ''),
    ('1297', '待', 'タイ、ま-つ', ''),
    ('1298', '怠', 'タイ、おこた-る、なま-ける', ''),
    ('1299', '胎', 'タイ', ''),
    ('1300', '退', 'タイ、しりぞ-く、しりぞ-ける', '立ち退く'),
    ('1301', '帯帶', 'タイ、お-びる、おび', ''),
    ('1302', '泰', 'タイ', ''),
    ('1303', '堆', 'タイ', ''),
    ('1304', '袋', 'タイ、ふくろ', '足袋'),
    ('1305', '逮', 'タイ', ''),
    ('1306', '替', 'タイ、か-える、か-わる', '為替'),
    ('1307', '貸', 'タイ、か-す', ''),
    ('1308', '隊', 'タイ', ''),
    ('1309', '滞滯', 'タイ、とどこお-る', ''),
    ('1310', '態', 'タイ', ''),
    ('1311', '戴', 'タイ', ''),
    ('1312', '大', 'ダイ、タイ、おお、おお-きい、おお-いに', '大人、大和、大阪、大分'),
    ('1313', '代', 'ダイ、タイ、か-わる、か-える、よ、しろ', ''),
    ('1314', '台臺', 'ダイ、タイ', ''),
    ('1315', '第', 'ダイ', ''),
    ('1316', '題', 'ダイ', ''),
    ('1317', '滝瀧', 'たき', ''),
    ('1318', '宅', 'タク', ''),
    ('1319', '択擇', 'タク', ''),
    ('1320', '沢澤', 'タク、さわ', ''),
    ('1321', '卓', 'タク', ''),
    ('1322', '拓', 'タク', ''),
    ('1323', '託', 'タク', ''),
    ('1324', '濯', 'タク', ''),
    ('1325', '諾', 'ダク', ''),
    ('1326', '濁', 'ダク、にご-る、にご-す', ''),
    ('1327', '但', 'ただ-し', ''),
    ('1328', '達', 'タツ', '友達'),
    ('1329', '脱脫', 'ダツ、ぬ-ぐ、ぬ-げる', ''),
    ('1330', '奪', 'ダツ、うば-う', ''),
    ('1331', '棚', 'たな', ''),
    ('1332', '誰', 'だれ', ''),
    ('1333', '丹', 'タン', ''),
    ('1334', '旦', 'タン、ダン', ''),
    ('1335', '担擔', 'タン、かつ-ぐ、にな-う', ''),
    ('1336', '単單', 'タン', ''),
    ('1337', '炭', 'タン、すみ', ''),
    ('1338', '胆膽', 'タン', ''),
    ('1339', '探', 'タン、さぐ-る、さが-す', ''),
    ('1340', '淡', 'タン、あわ-い', ''),
    ('1341', '短', 'タン、みじか-い', ''),
    ('1342', '嘆嘆', 'タン、なげ-く、なげ-かわしい', ''),
    ('1343', '端', 'タン、はし、は、はた', ''),
    ('1344', '綻', 'タン、ほころ-びる', ''),
    ('1345', '誕', 'タン', ''),
    ('1346', '鍛', 'タン、きた-える', '鍛冶'),
    ('1347', '団團', 'ダン、（トン）', ''),
    ('1348', '男', 'ダン、ナン、おとこ', ''),
    ('1349', '段', 'ダン', ''),
    ('1350', '断斷', 'ダン、た-つ、ことわ-る', ''),
    ('1351', '弾彈', 'ダン、ひ-く、はず-む、たま', ''),
    ('1352', '暖', 'ダン、あたた-か、あたた-かい、あたた-まる、あたた-める', ''),
    ('1353', '談', 'ダン', ''),
    ('1354', '壇', 'ダン、（タン）', ''),
    ('1355', '地', 'チ、ジ', '意気地、心地'),
    ('1356', '池', 'チ、いけ', ''),
    ('1357', '知', 'チ、し-る', ''),
    ('1358', '値', 'チ、ね、あたい', ''),
    ('1359', '恥', 'チ、は-じる、はじ、は-じらう、は-ずかしい', ''),
    ('1360', '致', 'チ、いた-す', ''),
    ('1361', '遅遲', 'チ、おく-れる、おく-らす、おそ-い', ''),
    ('1362', '痴癡', 'チ', ''),
    ('1363', '稚', 'チ', '稚児'),
    ('1364', '置', 'チ、お-く', ''),
    ('1365', '緻', 'チ', ''),
    ('1366', '竹', 'チク、たけ', '竹刀'),
    ('1367', '畜', 'チク', ''),
    ('1368', '逐', 'チク', ''),
    ('1369', '蓄', 'チク、たくわ-える', ''),
    ('1370', '築', 'チク、きず-く', '築山'),
    ('1371', '秩', 'チツ', ''),
    ('1372', '窒', 'チツ', ''),
    ('1373', '茶', 'チャ、サ', ''),
    ('1374', '着', 'チャク、（ジャク）、き-る、き-せる、つ-く、つ-ける', ''),
    ('1375', '嫡', 'チャク', ''),
    ('1376', '中', 'チュウ、（ジュウ）、なか', ''),
    ('1377', '仲', 'チュウ、なか', '仲人'),
    ('1378', '虫蟲', 'チュウ、むし', ''),
    ('1379', '沖', 'チュウ、おき', ''),
    ('1380', '宙', 'チュウ', ''),
    ('1381', '忠', 'チュウ', ''),
    ('1382', '抽', 'チュウ', ''),
    ('1383', '注', 'チュウ、そそ-ぐ', ''),
    ('1384', '昼晝', 'チュウ、ひる', ''),
    ('1385', '柱', 'チュウ、はしら', ''),
    ('1386', '衷', 'チュウ', ''),
    ('1387', '酎', 'チュウ', ''),
    ('1388', '鋳鑄', 'チュウ、い-る', ''),
    ('1389', '駐', 'チュウ', ''),
    ('1390', '著著', 'チョ、あらわ-す、いちじる-しい', ''),
    ('1391', '貯', 'チョ', ''),
    ('1392', '丁', 'チョウ、テイ', ''),
    ('1393', '弔', 'チョウ、とむら-う', ''),
    ('1394', '庁廳', 'チョウ', ''),
    ('1395', '兆', 'チョウ、きざ-す、きざ-し', ''),
    ('1396', '町', 'チョウ、まち', ''),
    ('1397', '長', 'チョウ、なが-い', '八百長'),
    ('1398', '挑', 'チョウ、いど-む', ''),
    ('1399', '帳', 'チョウ', '蚊帳'),
    ('1400', '張', 'チョウ、は-る', ''),
    ('1401', '彫', 'チョウ、ほ-る', ''),
    ('1402', '眺', 'チョウ、なが-める', ''),
    ('1403', '釣', 'チョウ、つ-る', ''),
    ('1404', '頂', 'チョウ、いただ-く、いただき', ''),
    ('1405', '鳥', 'チョウ、とり', '鳥取'),
    ('1406', '朝', 'チョウ、あさ', '今朝'),
    ('1407', '貼', 'チョウ、は-る', '貼付'),
    ('1408', '超', 'チョウ、こ-える、こ-す', ''),
    ('1409', '腸', 'チョウ', ''),
    ('1410', '跳', 'チョウ、は-ねる、と-ぶ', ''),
    ('1411', '徴徵', 'チョウ', ''),
    ('1412', '嘲', 'チョウ、あざけ-る', ''),
    ('1413', '潮', 'チョウ、しお', ''),
    ('1414', '澄', 'チョウ、す-む、す-ます', ''),
    ('1415', '調', 'チョウ、しら-べる、ととの-う、ととの-える', ''),
    ('1416', '聴聽', 'チョウ、き-く', ''),
    ('1417', '懲懲', 'チョウ、こ-りる、こ-らす、こ-らしめる', ''),
    ('1418', '直', 'チョク、ジキ、ただ-ちに、なお-す、なお-る', ''),
    ('1419', '勅', 'チョク', ''),
    ('1420', '捗', 'チョク', ''),
    ('1421', '沈', 'チン、しず-む、しず-める', ''),
    ('1422', '珍', 'チン、めずら-しい', ''),
    ('1423', '朕', 'チン', ''),
    ('1424', '陳', 'チン', ''),
    ('1425', '賃', 'チン', ''),
    ('1426', '鎮鎭', 'チン、しず-める、しず-まる', ''),
    ('1427', '追', 'ツイ、お-う', ''),
    ('1428', '椎', 'ツイ', ''),
    ('1429', '墜', 'ツイ', ''),
    ('1430', '通', 'ツウ、（ツ）、とお-る、とお-す、かよ-う', ''),
    ('1431', '痛', 'ツウ、いた-い、いた-む、いた-める', ''),
    ('1432', '塚塚', 'つか', ''),
    ('1433', '漬', 'つ-ける、つ-かる', ''),
    ('1434', '坪', 'つぼ', ''),
    ('1435', '爪', 'つめ、（つま）', ''),
    ('1436', '鶴', 'つる', ''),
    ('1437', '低', 'テイ、ひく-い、ひく-める、ひく-まる', ''),
    ('1438', '呈', 'テイ', ''),
    ('1439', '廷', 'テイ', ''),
    ('1440', '弟', 'テイ、（ダイ）、（デ）、おとうと', ''),
    ('1441', '定', 'テイ、ジョウ、さだ-める、さだ-まる、さだ-か', ''),
    ('1442', '底', 'テイ、そこ', ''),
    ('1443', '抵', 'テイ', ''),
    ('1444', '邸', 'テイ', ''),
    ('1445', '亭', 'テイ', ''),
    ('1446', '貞', 'テイ', ''),
    ('1447', '帝', 'テイ', ''),
    ('1448', '訂', 'テイ', ''),
    ('1449', '庭', 'テイ、にわ', ''),
    ('1450', '逓遞', 'テイ', ''),
    ('1451', '停', 'テイ', ''),
    ('1452', '偵', 'テイ', ''),
    ('1453', '堤', 'テイ、つつみ', ''),
    ('1454', '提', 'テイ、さ-げる', ''),
    ('1455', '程', 'テイ、ほど', ''),
    ('1456', '艇', 'テイ', ''),
    ('1457', '締', 'テイ、し-まる、し-める', ''),
    ('1458', '諦', 'テイ、あきら-める', ''),
    ('1459', '泥', 'デイ、どろ', ''),
    ('1460', '的', 'テキ、まと', ''),
    ('1461', '笛', 'テキ、ふえ', ''),
    ('1462', '摘', 'テキ、つ-む', ''),
    ('1463', '滴', 'テキ、しずく、したた-る', ''),
    ('1464', '適', 'テキ', ''),
    ('1465', '敵', 'テキ、かたき', ''),
    ('1466', '溺', 'デキ、おぼ-れる', ''),
    ('1467', '迭', 'テツ', ''),
    ('1468', '哲', 'テツ', ''),
    ('1469', '鉄鐵', 'テツ', ''),
    ('1470', '徹', 'テツ', ''),
    ('1471', '撤', 'テツ', ''),
    ('1472', '天', 'テン、あめ、（あま）', ''),
    ('1473', '典', 'テン', ''),
    ('1474', '店', 'テン、みせ', ''),
    ('1475', '点點', 'テン', '合点'),
    ('1476', '展', 'テン', ''),
    ('1477', '添', 'テン、そ-える、そ-う', ''),
    ('1478', '転轉', 'テン、ころ-がる、ころ-げる、ころ-がす、ころ-ぶ', ''),
    ('1479', '塡(填)', 'テン', ''),
    ('1480', '田', 'デン、た', '田舎'),
    ('1481', '伝傳', 'デン、つた-わる、つた-える、つた-う', '手伝う、伝馬船'),
    ('1482', '殿', 'デン、テン、との、どの', ''),
    ('1483', '電', 'デン', ''),
    ('1484', '斗', 'ト', ''),
    ('1485', '吐', 'ト、は-く', ''),
    ('1486', '妬', 'ト、ねた-む', ''),
    ('1487', '徒', 'ト', ''),
    ('1488', '途', 'ト', ''),
    ('1489', '都都', 'ト、ツ、みやこ', ''),
    ('1490', '渡', 'ト、わた-る、わた-す', ''),
    ('1491', '塗', 'ト、ぬ-る', ''),
    ('1492', '賭', 'ト、か-ける', ''),
    ('1493', '土', 'ド、ト、つち', '土産'),
    ('1494', '奴', 'ド', ''),
    ('1495', '努', 'ド、つと-める', ''),
    ('1496', '度', 'ド、（ト）、（タク）、たび', ''),
    ('1497', '怒', 'ド、いか-る、おこ-る', ''),
    ('1498', '刀', 'トウ、かたな', '竹刀、太刀'),
    ('1499', '冬', 'トウ、ふゆ', ''),
    ('1500', '灯燈', 'トウ、ひ', ''),
    ('1501', '当當', 'トウ、あ-たる、あ-てる', ''),
    ('1502', '投', 'トウ、な-げる', '投網'),
    ('1503', '豆', 'トウ、（ズ）、まめ', '小豆'),
    ('1504', '東', 'トウ、ひがし', ''),
    ('1505', '到', 'トウ', ''),
    ('1506', '逃', 'トウ、に-げる、に-がす、のが-す、のが-れる', ''),
    ('1507', '倒', 'トウ、たお-れる、たお-す', ''),
    ('1508', '凍', 'トウ、こお-る、こご-える', ''),
    ('1509', '唐', 'トウ、から', ''),
    ('1510', '島', 'トウ、しま', '鹿児島'),
    ('1511', '桃', 'トウ、もも', ''),
    ('1512', '討', 'トウ、う-つ', ''),
    ('1513', '透', 'トウ、す-く、す-かす、す-ける', ''),
    ('1514', '党黨', 'トウ', ''),
    ('1515', '悼', 'トウ、いた-む', ''),
    ('1516', '盗盜', 'トウ、ぬす-む', ''),
    ('1517', '陶', 'トウ', ''),
    ('1518', '塔', 'トウ', ''),
    ('1519', '搭', 'トウ', ''),
    ('1520', '棟', 'トウ、むね、（むな）', ''),
    ('1521', '湯', 'トウ、ゆ', ''),
    ('1522', '痘', 'トウ', ''),
    ('1523', '登', 'トウ、ト、のぼ-る', ''),
    ('1524', '答', 'トウ、こた-える、こた-え', ''),
    ('1525', '等', 'トウ、ひと-しい', ''),
    ('1526', '筒', 'トウ、つつ', ''),
    ('1527', '統', 'トウ、す-べる', ''),
    ('1528', '稲稻', 'トウ、いね、（いな）', ''),
    ('1529', '踏', 'トウ、ふ-む、ふ-まえる', ''),
    ('1530', '糖', 'トウ', ''),
    ('1531', '頭', 'トウ、ズ、（ト）、あたま、かしら', ''),
    ('1532', '謄', 'トウ', ''),
    ('1533', '藤', 'トウ、ふじ', ''),
    ('1534', '闘鬭鬪', 'トウ、たたか-う', ''),
    ('1535', '騰', 'トウ', ''),
    ('1536', '同', 'ドウ、おな-じ', ''),
    ('1537', '洞', 'ドウ、ほら', ''),
    ('1538', '胴', 'ドウ', ''),
    ('1539', '動', 'ドウ、うご-く、うご-かす', ''),
    ('1540', '堂', 'ドウ', ''),
    ('1541', '童', 'ドウ、わらべ', ''),
    ('1542', '道', 'ドウ、（トウ）、みち', ''),
    ('1543', '働', 'ドウ、はたら-く', ''),
    ('1544', '銅', 'ドウ', ''),
    ('1545', '導', 'ドウ、みちび-く', ''),
    ('1546', '瞳', 'ドウ、ひとみ', ''),
    ('1547', '峠', 'とうげ', ''),
    ('1548', '匿', 'トク', ''),
    ('1549', '特', 'トク', ''),
    ('1550', '得', 'トク、え-る、う-る', ''),
    ('1551', '督', 'トク', ''),
    ('1552', '徳德', 'トク', ''),
    ('1553', '篤', 'トク', ''),
    ('1554', '毒', 'ドク', ''),
    ('1555', '独獨', 'ドク、ひと-り', ''),
    ('1556', '読讀', 'ドク、トク、（トウ）、よ-む', '読経'),
    ('1557', '栃', '（とち）', '栃木'),
    ('1558', '凸', 'トツ', '凸凹'),
    ('1559', '突突', 'トツ、つ-く', ''),
    ('1560', '届屆', 'とど-ける、とど-く', ''),
    ('1561', '屯', 'トン', ''),
    ('1562', '豚', 'トン、ぶた', ''),
    ('1563', '頓', 'トン', ''),
    ('1564', '貪', 'ドン、むさぼ-る', ''),
    ('1565', '鈍', 'ドン、にぶ-い、にぶ-る', ''),
    ('1566', '曇', 'ドン、くも-る', ''),
    ('1567', '丼', 'どんぶり、（どん）', ''),
    ('1568', '那', 'ナ', ''),
    ('1569', '奈', 'ナ', '神奈川、奈良'),
    ('1570', '内內', 'ナイ、（ダイ）、うち', ''),
    ('1571', '梨', 'なし', ''),
    ('1572', '謎', 'なぞ', ''),
    ('1573', '鍋', 'なべ', ''),
    ('1574', '南', 'ナン、（ナ）、みなみ', ''),
    ('1575', '軟', 'ナン、やわ-らか、やわ-らかい', ''),
    ('1576', '難難', 'ナン、かた-い、むずか-しい', '難しい'),
    ('1577', '二', 'ニ、ふた、ふた-つ', '十重二十重、二十、二十歳、二十日、二人、二日'),
    ('1578', '尼', 'ニ、あま', ''),
    ('1579', '弐貳', 'ニ', ''),
    ('1580', '匂', 'にお-う', ''),
    ('1581', '肉', 'ニク', ''),
    ('1582', '虹', 'にじ', ''),
    ('1583', '日', 'ニチ、ジツ、ひ、か', '明日、昨日、今日、一日、二十日、日和、二日、七日'),
    ('1584', '入', 'ニュウ、い-る、い-れる、はい-る', ''),
    ('1585', '乳', 'ニュウ、ちち、ち', '乳母'),
    ('1586', '尿', 'ニョウ', ''),
    ('1587', '任', 'ニン、まか-せる、まか-す', ''),
    ('1588', '妊', 'ニン', ''),
    ('1589', '忍', 'ニン、しの-ぶ、しの-ばせる', ''),
    ('1590', '認', 'ニン、みと-める', ''),
    ('1591', '寧', 'ネイ', ''),
    ('1592', '熱', 'ネツ、あつ-い', ''),
    ('1593', '年', 'ネン、とし', '今年'),
    ('1594', '念', 'ネン', ''),
    ('1595', '捻', 'ネン', ''),
    ('1596', '粘', 'ネン、ねば-る', ''),
    ('1597', '燃', 'ネン、も-える、も-やす、も-す', ''),
    ('1598', '悩惱', 'ノウ、なや-む、なや-ます', ''),
    ('1599', '納', 'ノウ、（ナッ）、（ナ）、（ナン）、（トウ）、おさ-める、おさ-まる', ''),
    ('1600', '能', 'ノウ', '堪能'),
    ('1601', '脳腦', 'ノウ', ''),
    ('1602', '農', 'ノウ', ''),
    ('1603', '濃', 'ノウ、こ-い', ''),
    ('1604', '把', 'ハ', ''),
    ('1605', '波', 'ハ、なみ', '波止場'),
    ('1606', '派', 'ハ', ''),
    ('1607', '破', 'ハ、やぶ-る、やぶ-れる', ''),
    ('1608', '覇霸', 'ハ', ''),
    ('1609', '馬', 'バ、うま、（ま）', '伝馬船'),
    ('1610', '婆', 'バ', ''),
    ('1611', '罵', 'バ、ののし-る', ''),
    ('1612', '拝拜', 'ハイ、おが-む', ''),
    ('1613', '杯', 'ハイ、さかずき', ''),
    ('1614', '背', 'ハイ、せ、せい、そむ-く、そむ-ける', ''),
    ('1615', '肺', 'ハイ', ''),
    ('1616', '俳', 'ハイ', ''),
    ('1617', '配', 'ハイ、くば-る', ''),
    ('1618', '排', 'ハイ', ''),
    ('1619', '敗', 'ハイ、やぶ-れる', ''),
    ('1620', '廃廢', 'ハイ、すた-れる、すた-る', ''),
    ('1621', '輩', 'ハイ', ''),
    ('1622', '売賣', 'バイ、う-る、う-れる', ''),
    ('1623', '倍', 'バイ', ''),
    ('1624', '梅梅', 'バイ、うめ', '梅雨'),
    ('1625', '培', 'バイ、つちか-う', ''),
    ('1626', '陪', 'バイ', ''),
    ('1627', '媒', 'バイ', ''),
    ('1628', '買', 'バイ、か-う', ''),
    ('1629', '賠', 'バイ', ''),
    ('1630', '白', 'ハク、ビャク、しろ、（しら）、しろ-い', '白髪'),
    ('1631', '伯', 'ハク', '伯父、伯母'),
    ('1632', '拍', 'ハク、（ヒョウ）', ''),
    ('1633', '泊', 'ハク、と-まる、と-める', ''),
    ('1634', '迫', 'ハク、せま-る', ''),
    ('1635', '剝(剥)', 'ハク、は-がす、は-ぐ、は-がれる、は-げる', ''),
    ('1636', '舶', 'ハク', ''),
    ('1637', '博', 'ハク、（バク）', '博士'),
    ('1638', '薄', 'ハク、うす-い、うす-める、うす-まる、うす-らぐ、うす-れる', ''),
    ('1639', '麦麥', 'バク、むぎ', ''),
    ('1640', '漠', 'バク', ''),
    ('1641', '縛', 'バク、しば-る', ''),
    ('1642', '爆', 'バク', ''),
    ('1643', '箱', 'はこ', ''),
    ('1644', '箸', 'はし', ''),
    ('1645', '畑', 'はた、はたけ', ''),
    ('1646', '肌', 'はだ', ''),
    ('1647', '八', 'ハチ、や、や-つ、やっ-つ、（よう）', '八百長、八百屋'),
    ('1648', '鉢', 'ハチ、（ハツ）', ''),
    ('1649', '発發', 'ハツ、ホツ', ''),
    ('1650', '髪髮', 'ハツ、かみ', '白髪'),
    ('1651', '伐', 'バツ', ''),
    ('1652', '抜拔', 'バツ、ぬ-く、ぬ-ける、ぬ-かす、ぬ-かる', ''),
    ('1653', '罰', 'バツ、バチ', ''),
    ('1654', '閥', 'バツ', ''),
    ('1655', '反', 'ハン、（ホン）、（タン）、そ-る、そ-らす', ''),
    ('1656', '半', 'ハン、なか-ば', ''),
    ('1657', '氾', 'ハン', ''),
    ('1658', '犯', 'ハン、おか-す', ''),
    ('1659', '帆', 'ハン、ほ', ''),
    ('1660', '汎', 'ハン', ''),
    ('1661', '伴', 'ハン、バン、ともな-う', ''),
    ('1662', '判', 'ハン、バン', ''),
    ('1663', '坂', 'ハン、さか', ''),
    ('1664', '阪', 'ハン', '大阪'),
    ('1665', '板', 'ハン、バン、いた', ''),
    ('1666', '版', 'ハン', ''),
    ('1667', '班', 'ハン', ''),
    ('1668', '畔', 'ハン', ''),
    ('1669', '般', 'ハン', ''),
    ('1670', '販', 'ハン', ''),
    ('1671', '斑', 'ハン', ''),
    ('1672', '飯飯', 'ハン、めし', ''),
    ('1673', '搬', 'ハン', ''),
    ('1674', '煩', 'ハン、（ボン）、わずら-う、わずら-わす', ''),
    ('1675', '頒', 'ハン', ''),
    ('1676', '範', 'ハン', ''),
    ('1677', '繁繁', 'ハン', ''),
    ('1678', '藩', 'ハン', ''),
    ('1679', '晩晚', 'バン', ''),
    ('1680', '番', 'バン', ''),
    ('1681', '蛮蠻', 'バン', ''),
    ('1682', '盤', 'バン', ''),
    ('1683', '比', 'ヒ、くら-べる', ''),
    ('1684', '皮', 'ヒ、かわ', ''),
    ('1685', '妃', 'ヒ', ''),
    ('1686', '否', 'ヒ、いな', ''),
    ('1687', '批', 'ヒ', ''),
    ('1688', '彼', 'ヒ、かれ、（かの）', ''),
    ('1689', '披', 'ヒ', ''),
    ('1690', '肥', 'ヒ、こ-える、こえ、こ-やす、こ-やし', ''),
    ('1691', '非', 'ヒ', ''),
    ('1692', '卑卑', 'ヒ、いや-しい、いや-しむ、いや-しめる', ''),
    ('1693', '飛', 'ヒ、と-ぶ、と-ばす', ''),
    ('1694', '疲', 'ヒ、つか-れる', ''),
    ('1695', '秘祕', 'ヒ、ひ-める', ''),
    ('1696', '被', 'ヒ、こうむ-る', ''),
    ('1697', '悲', 'ヒ、かな-しい、かな-しむ', ''),
    ('1698', '扉', 'ヒ、とびら', ''),
    ('1699', '費', 'ヒ、つい-やす、つい-える', ''),
    ('1700', '碑碑', 'ヒ', ''),
    ('1701', '罷', 'ヒ', ''),
    ('1702', '避', 'ヒ、さ-ける', ''),
    ('1703', '尾', 'ビ、お', '尻尾'),
    ('1704', '眉', 'ビ、（ミ）、まゆ', ''),
    ('1705', '美', 'ビ、うつく-しい', ''),
    ('1706', '備', 'ビ、そな-える、そな-わる', ''),
    ('1707', '微', 'ビ', ''),
    ('1708', '鼻', 'ビ、はな', ''),
    ('1709', '膝', 'ひざ', ''),
    ('1710', '肘', 'ひじ', ''),
    ('1711', '匹', 'ヒツ、ひき', ''),
    ('1712', '必', 'ヒツ、かなら-ず', ''),
    ('1713', '泌', 'ヒツ、ヒ', '分泌'),
    ('1714', '筆', 'ヒツ、ふで', ''),
    ('1715', '姫姬', 'ひめ', ''),
    ('1716', '百', 'ヒャク', '八百長、八百屋'),
    ('1717', '氷', 'ヒョウ、こおり、ひ', ''),
    ('1718', '表', 'ヒョウ、おもて、あらわ-す、あらわ-れる', ''),
    ('1719', '俵', 'ヒョウ、たわら', ''),
    ('1720', '票', 'ヒョウ', ''),
    ('1721', '評', 'ヒョウ', ''),
    ('1722', '漂', 'ヒョウ、ただよ-う', ''),
    ('1723', '標', 'ヒョウ', ''),
    ('1724', '苗', 'ビョウ、なえ、（なわ）', '早苗'),
    ('1725', '秒', 'ビョウ', ''),
    ('1726', '病', 'ビョウ、（ヘイ）、や-む、やまい', ''),
    ('1727', '描', 'ビョウ、えが-く、か-く', ''),
    ('1728', '猫', 'ビョウ、ねこ', ''),
    ('1729', '品', 'ヒン、しな', ''),
    ('1730', '浜濱', 'ヒン、はま', ''),
    ('1731', '貧', 'ヒン、ビン、まず-しい', ''),
    ('1732', '賓賓', 'ヒン', ''),
    ('1733', '頻頻', 'ヒン', ''),
    ('1734', '敏敏', 'ビン', ''),
    ('1735', '瓶甁', 'ビン', ''),
    ('1736', '不', 'フ、ブ', ''),
    ('1737', '夫', 'フ、（フウ）、おっと', ''),
    ('1738', '父', 'フ、ちち', '叔父、伯父、父さん'),
    ('1739', '付', 'フ、つ-ける、つ-く', '貼付'),
    ('1740', '布', 'フ、ぬの', '昆布'),
    ('1741', '扶', 'フ', ''),
    ('1742', '府', 'フ', ''),
    ('1743', '怖', 'フ、こわ-い', ''),
    ('1744', '阜', '（フ）', '岐阜'),
    ('1745', '附', 'フ', ''),
    ('1746', '訃', 'フ', ''),
    ('1747', '負', 'フ、ま-ける、ま-かす、お-う', ''),
    ('1748', '赴', 'フ、おもむ-く', ''),
    ('1749', '浮', 'フ、う-く、う-かれる、う-かぶ、う-かべる', '浮気、浮つく'),
    ('1750', '婦', 'フ', ''),
    ('1751', '符', 'フ', ''),
    ('1752', '富', 'フ、（フウ）、と-む、とみ', '富山、富貴'),
    ('1753', '普', 'フ', ''),
    ('1754', '腐', 'フ、くさ-る、くさ-れる、くさ-らす', ''),
    ('1755', '敷', 'フ、し-く', '桟敷'),
    ('1756', '膚', 'フ', ''),
    ('1757', '賦', 'フ', ''),
    ('1758', '譜', 'フ', ''),
    ('1759', '侮侮', 'ブ、あなど-る', ''),
    ('1760', '武', 'ブ、ム', ''),
    ('1761', '部', 'ブ', '部屋'),
    ('1762', '舞', 'ブ、ま-う、まい', ''),
    ('1763', '封', 'フウ、ホウ', ''),
    ('1764', '風', 'フウ、（フ）、かぜ、（かざ）', '風邪'),
    ('1765', '伏', 'フク、ふ-せる、ふ-す', ''),
    ('1766', '服', 'フク', ''),
    ('1767', '副', 'フク', ''),
    ('1768', '幅', 'フク、はば', ''),
    ('1769', '復', 'フク', ''),
    ('1770', '福福', 'フク', ''),
    ('1771', '腹', 'フク、はら', ''),
    ('1772', '複', 'フク', ''),
    ('1773', '覆', 'フク、おお-う、くつがえ-す、くつがえ-る', ''),
    ('1774', '払拂', 'フツ、はら-う', ''),
    ('1775', '沸', 'フツ、わ-く、わ-かす', ''),
    ('1776', '仏佛', 'ブツ、ほとけ', ''),
    ('1777', '物', 'ブツ、モツ、もの', '果物'),
    ('1778', '粉', 'フン、こ、こな', ''),
    ('1779', '紛', 'フン、まぎ-れる、まぎ-らす、まぎ-らわす、まぎ-らわしい', ''),
    ('1780', '雰', 'フン', ''),
    ('1781', '噴', 'フン、ふ-く', ''),
    ('1782', '墳', 'フン', ''),
    ('1783', '憤', 'フン、いきどお-る', ''),
    ('1784', '奮', 'フン、ふる-う', ''),
    ('1785', '分', 'ブン、フン、ブ、わ-ける、わ-かれる、わ-かる、わ-かつ', '大分'),
    ('1786', '文', 'ブン、モン、ふみ', '文字'),
    ('1787', '聞', 'ブン、モン、き-く、き-こえる', ''),
    ('1788', '丙', 'ヘイ', ''),
    ('1789', '平', 'ヘイ、ビョウ、たい-ら、ひら', ''),
    ('1790', '兵', 'ヘイ、ヒョウ', ''),
    ('1791', '併倂', 'ヘイ、あわ-せる', ''),
    ('1792', '並竝', 'ヘイ、なみ、なら-べる、なら-ぶ、なら-びに', ''),
    ('1793', '柄', 'ヘイ、がら、え', ''),
    ('1794', '陛', 'ヘイ', ''),
    ('1795', '閉', 'ヘイ、と-じる、と-ざす、し-める、し-まる', ''),
    ('1796', '塀塀', 'ヘイ', ''),
    ('1797', '幣', 'ヘイ', ''),
    ('1798', '弊', 'ヘイ', ''),
    ('1799', '蔽', 'ヘイ', ''),
    ('1800', '餅餠', 'ヘイ、もち', ''),
    ('1801', '米', 'ベイ、マイ、こめ', ''),
    ('1802', '壁', 'ヘキ、かべ', ''),
    ('1803', '璧', 'ヘキ', ''),
    ('1804', '癖', 'ヘキ、くせ', ''),
    ('1805', '別', 'ベツ、わか-れる', ''),
    ('1806', '蔑', 'ベツ、さげす-む', ''),
    ('1807', '片', 'ヘン、かた', ''),
    ('1808', '辺邊', 'ヘン、あた-り、べ', ''),
    ('1809', '返', 'ヘン、かえ-す、かえ-る', ''),
    ('1810', '変變', 'ヘン、か-わる、か-える', ''),
    ('1811', '偏', 'ヘン、かたよ-る', ''),
    ('1812', '遍', 'ヘン', ''),
    ('1813', '編', 'ヘン、あ-む', ''),
    ('1814', '弁辨瓣辯', 'ベン', ''),
    ('1815', '便', 'ベン、ビン、たよ-り', ''),
    ('1816', '勉勉', 'ベン', ''),
    ('1817', '歩步', 'ホ、ブ、（フ）、ある-く、あゆ-む', ''),
    ('1818', '保', 'ホ、たも-つ', ''),
    ('1819', '哺', 'ホ', ''),
    ('1820', '捕', 'ホ、と-らえる、と-らわれる、と-る、つか-まえる、つか-まる', ''),
    ('1821', '補', 'ホ、おぎな-う', ''),
    ('1822', '舗舖', 'ホ', '老舗'),
    ('1823', '母', 'ボ、はは', '乳母、叔母、伯母、母屋、母家、母さん'),
    ('1824', '募', 'ボ、つの-る', ''),
    ('1825', '墓', 'ボ、はか', ''),
    ('1826', '慕', 'ボ、した-う', ''),
    ('1827', '暮', 'ボ、く-れる、く-らす', ''),
    ('1828', '簿', 'ボ', ''),
    ('1829', '方', 'ホウ、かた', '行方'),
    ('1830', '包', 'ホウ、つつ-む', ''),
    ('1831', '芳', 'ホウ、かんば-しい', ''),
    ('1832', '邦', 'ホウ', ''),
    ('1833', '奉', 'ホウ、（ブ）、たてまつ-る', ''),
    ('1834', '宝寶', 'ホウ、たから', ''),
    ('1835', '抱', 'ホウ、だ-く、いだ-く、かか-える', ''),
    ('1836', '放', 'ホウ、はな-す、はな-つ、はな-れる、ほう-る', ''),
    ('1837', '法', 'ホウ、（ハッ）、（ホッ）', ''),
    ('1838', '泡', 'ホウ、あわ', ''),
    ('1839', '胞', 'ホウ', ''),
    ('1840', '俸', 'ホウ', ''),
    ('1841', '倣', 'ホウ、なら-う', ''),
    ('1842', '峰', 'ホウ、みね', ''),
    ('1843', '砲', 'ホウ', ''),
    ('1844', '崩', 'ホウ、くず-れる、くず-す', '雪崩'),
    ('1845', '訪', 'ホウ、おとず-れる、たず-ねる', ''),
    ('1846', '報', 'ホウ、むく-いる', ''),
    ('1847', '蜂', 'ホウ、はち', ''),
    ('1848', '豊豐', 'ホウ、ゆた-か', ''),
    ('1849', '飽', 'ホウ、あ-きる、あ-かす', ''),
    ('1850', '褒襃', 'ホウ、ほ-める', ''),
    ('1851', '縫', 'ホウ、ぬ-う', ''),
    ('1852', '亡', 'ボウ、（モウ）、な-い', ''),
    ('1853', '乏', 'ボウ、とぼ-しい', ''),
    ('1854', '忙', 'ボウ、いそが-しい', ''),
    ('1855', '坊', 'ボウ、（ボッ）', ''),
    ('1856', '妨', 'ボウ、さまた-げる', ''),
    ('1857', '忘', 'ボウ、わす-れる', ''),
    ('1858', '防', 'ボウ、ふせ-ぐ', ''),
    ('1859', '房', 'ボウ、ふさ', ''),
    ('1860', '肪', 'ボウ', ''),
    ('1861', '某', 'ボウ', ''),
    ('1862', '冒', 'ボウ、おか-す', ''),
    ('1863', '剖', 'ボウ', ''),
    ('1864', '紡', 'ボウ、つむ-ぐ', ''),
    ('1865', '望', 'ボウ、モウ、のぞ-む', ''),
    ('1866', '傍', 'ボウ、かたわ-ら', ''),
    ('1867', '帽', 'ボウ', ''),
    ('1868', '棒', 'ボウ', ''),
    ('1869', '貿', 'ボウ', ''),
    ('1870', '貌', 'ボウ', ''),
    ('1871', '暴', 'ボウ、（バク）、あば-く、あば-れる', ''),
    ('1872', '膨', 'ボウ、ふく-らむ、ふく-れる', ''),
    ('1873', '謀', 'ボウ、（ム）、はか-る', ''),
    ('1874', '頰(頬)', 'ほお', ''),
    ('1875', '北', 'ホク、きた', ''),
    ('1876', '木', 'ボク、モク、き、（こ）', '木綿'),
    ('1877', '朴', 'ボク', ''),
    ('1878', '牧', 'ボク、まき', ''),
    ('1879', '睦', 'ボク', ''),
    ('1880', '僕', 'ボク', ''),
    ('1881', '墨墨', 'ボク、すみ', ''),
    ('1882', '撲', 'ボク', '相撲'),
    ('1883', '没沒', 'ボツ', ''),
    ('1884', '勃', 'ボツ', ''),
    ('1885', '堀', 'ほり', ''),
    ('1886', '本', 'ホン、もと', ''),
    ('1887', '奔', 'ホン', ''),
    ('1888', '翻飜', 'ホン、ひるがえ-る、ひるがえ-す', ''),
    ('1889', '凡', 'ボン、（ハン）', ''),
    ('1890', '盆', 'ボン', ''),
    ('1891', '麻', 'マ、あさ', ''),
    ('1892', '摩', 'マ', ''),
    ('1893', '磨', 'マ、みが-く', ''),
    ('1894', '魔', 'マ', ''),
    ('1895', '毎每', 'マイ', ''),
    ('1896', '妹', 'マイ、いもうと', ''),
    ('1897', '枚', 'マイ', ''),
    ('1898', '昧', 'マイ', ''),
    ('1899', '埋', 'マイ、う-める、う-まる、う-もれる', ''),
    ('1900', '幕', 'マク、バク', ''),
    ('1901', '膜', 'マク', ''),
    ('1902', '枕', 'まくら', ''),
    ('1903', '又', 'また', ''),
    ('1904', '末', 'マツ、バツ、すえ', ''),
    ('1905', '抹', 'マツ', ''),
    ('1906', '万萬', 'マン、バン', ''),
    ('1907', '満滿', 'マン、み-ちる、み-たす', ''),
    ('1908', '慢', 'マン', ''),
    ('1909', '漫', 'マン', ''),
    ('1910', '未', 'ミ', ''),
    ('1911', '味', 'ミ、あじ、あじ-わう', '三味線'),
    ('1912', '魅', 'ミ', ''),
    ('1913', '岬', 'みさき', ''),
    ('1914', '密', 'ミツ', ''),
    ('1915', '蜜', 'ミツ', ''),
    ('1916', '脈', 'ミャク', ''),
    ('1917', '妙', 'ミョウ', ''),
    ('1918', '民', 'ミン、たみ', ''),
    ('1919', '眠', 'ミン、ねむ-る、ねむ-い', ''),
    ('1920', '矛', 'ム、ほこ', ''),
    ('1921', '務', 'ム、つと-める、つと-まる', ''),
    ('1922', '無', 'ム、ブ、な-い', ''),
    ('1923', '夢', 'ム、ゆめ', ''),
    ('1924', '霧', 'ム、きり', ''),
    ('1925', '娘', 'むすめ', ''),
    ('1926', '名', 'メイ、ミョウ、な', '仮名、名残'),
    ('1927', '命', 'メイ、ミョウ、いのち', ''),
    ('1928', '明',
     'メイ、ミョウ、あ-かり、あか-るい、あか-るむ、あか-らむ、あき-らか、あ-ける、あ-く、あ-くる、あ-かす',
     '明日'),
    ('1929', '迷', 'メイ、まよ-う', '迷子'),
    ('1930', '冥', 'メイ、ミョウ', ''),
    ('1931', '盟', 'メイ', ''),
    ('1932', '銘', 'メイ', ''),
    ('1933', '鳴', 'メイ、な-く、な-る、な-らす', ''),
    ('1934', '滅', 'メツ、ほろ-びる、ほろ-ぼす', ''),
    ('1935', '免免', 'メン、まぬか-れる', '免れる'),
    ('1936', '面', 'メン、おも、おもて、つら', '真面目'),
    ('1937', '綿', 'メン、わた', '木綿'),
    ('1938', '麺麵', 'メン', ''),
    ('1939', '茂', 'モ、しげ-る', ''),
    ('1940', '模', 'モ、ボ', ''),
    ('1941', '毛', 'モウ、け', ''),
    ('1942', '妄', 'モウ、ボウ', ''),
    ('1943', '盲', 'モウ', ''),
    ('1944', '耗', 'モウ、（コウ）', ''),
    ('1945', '猛', 'モウ', '猛者'),
    ('1946', '網', 'モウ、あみ', '投網'),
    ('1947', '目', 'モク、（ボク）、め、（ま）', '真面目'),
    ('1948', '黙默', 'モク、だま-る', ''),
    ('1949', '門', 'モン、かど', ''),
    ('1950', '紋', 'モン', ''),
    ('1951', '問', 'モン、と-う、と-い、（とん）', '問屋'),
    ('1952', '冶', 'ヤ', '鍛冶'),
    ('1953', '夜', 'ヤ、よ、よる', ''),
    ('1954', '野', 'ヤ、の', '野良'),
    ('1955', '弥彌', 'や', '弥生'),
    ('1956', '厄', 'ヤク', ''),
    ('1957', '役', 'ヤク、エキ', ''),
    ('1958', '約', 'ヤク', ''),
    ('1959', '訳譯', 'ヤク、わけ', ''),
    ('1960', '薬藥', 'ヤク、くすり', ''),
    ('1961', '躍', 'ヤク、おど-る', ''),
    ('1962', '闇', 'やみ', ''),
    ('1963', '由', 'ユ、ユウ、（ユイ）、よし', ''),
    ('1964', '油', 'ユ、あぶら', ''),
    ('1965', '喩', 'ユ', ''),
    ('1966', '愉', 'ユ', ''),
    ('1967', '諭', 'ユ、さと-す', ''),
    ('1968', '輸', 'ユ', ''),
    ('1969', '癒', 'ユ、い-える、い-やす', ''),
    ('1970', '唯', 'ユイ、（イ）', ''),
    ('1971', '友', 'ユウ、とも', '友達'),
    ('1972', '有', 'ユウ、ウ、あ-る', ''),
    ('1973', '勇', 'ユウ、いさ-む', ''),
    ('1974', '幽', 'ユウ', ''),
    ('1975', '悠', 'ユウ', ''),
    ('1976', '郵', 'ユウ', ''),
    ('1977', '湧', 'ユウ、わ-く', ''),
    ('1978', '猶', 'ユウ', ''),
    ('1979', '裕', 'ユウ', ''),
    ('1980', '遊', 'ユウ、（ユ）、あそ-ぶ', ''),
    ('1981', '雄', 'ユウ、お、おす', ''),
    ('1982', '誘', 'ユウ、さそ-う', ''),
    ('1983', '憂', 'ユウ、うれ-える、うれ-い、う-い', ''),
    ('1984', '融', 'ユウ', ''),
    ('1985', '優', 'ユウ、やさ-しい、すぐ-れる', ''),
    ('1986', '与與', 'ヨ、あた-える', ''),
    ('1987', '予豫', 'ヨ', ''),
    ('1988', '余餘', 'ヨ、あま-る、あま-す', ''),
    ('1989', '誉譽', 'ヨ、ほま-れ', ''),
    ('1990', '預', 'ヨ、あず-ける、あず-かる', ''),
    ('1991', '幼', 'ヨウ、おさな-い', ''),
    ('1992', '用', 'ヨウ、もち-いる', ''),
    ('1993', '羊', 'ヨウ、ひつじ', ''),
    ('1994', '妖', 'ヨウ、あや-しい', ''),
    ('1995', '洋', 'ヨウ', ''),
    ('1996', '要', 'ヨウ、かなめ、い-る', ''),
    ('1997', '容', 'ヨウ', ''),
    ('1998', '庸', 'ヨウ', ''),
    ('1999', '揚', 'ヨウ、あ-げる、あ-がる', ''),
    ('2000', '揺搖', 'ヨウ、ゆ-れる、ゆ-る、ゆ-らぐ、ゆ-るぐ、ゆ-する、ゆ-さぶる、ゆ-すぶる', ''),
    ('2001', '葉', 'ヨウ、は', '紅葉'),
    ('2002', '陽', 'ヨウ', ''),
    ('2003', '溶', 'ヨウ、と-ける、と-かす、と-く', ''),
    ('2004', '腰', 'ヨウ、こし', ''),
    ('2005', '様樣', 'ヨウ、さま', ''),
    ('2006', '瘍', 'ヨウ', ''),
    ('2007', '踊', 'ヨウ、おど-る、おど-り', ''),
    ('2008', '窯', 'ヨウ、かま', ''),
    ('2009', '養', 'ヨウ、やしな-う', ''),
    ('2010', '擁', 'ヨウ', ''),
    ('2011', '謡謠', 'ヨウ、うたい、うた-う', ''),
    ('2012', '曜', 'ヨウ', ''),
    ('2013', '抑', 'ヨク、おさ-える', ''),
    ('2014', '沃', 'ヨク', ''),
    ('2015', '浴', 'ヨク、あ-びる、あ-びせる', '浴衣'),
    ('2016', '欲', 'ヨク、ほっ-する、ほ-しい', ''),
    ('2017', '翌', 'ヨク', ''),
    ('2018', '翼', 'ヨク、つばさ', ''),
    ('2019', '拉', 'ラ', ''),
    ('2020', '裸', 'ラ、はだか', ''),
    ('2021', '羅', 'ラ', ''),
    ('2022', '来來', 'ライ、く-る、きた-る、きた-す', ''),
    ('2023', '雷', 'ライ、かみなり', ''),
    ('2024', '頼賴', 'ライ、たの-む、たの-もしい、たよ-る', ''),
    ('2025', '絡', 'ラク、から-む、から-まる、から-める', ''),
    ('2026', '落', 'ラク、お-ちる、お-とす', ''),
    ('2027', '酪', 'ラク', ''),
    ('2028', '辣', 'ラツ', ''),
    ('2029', '乱亂', 'ラン、みだ-れる、みだ-す', ''),
    ('2030', '卵', 'ラン、たまご', ''),
    ('2031', '覧覽', 'ラン', ''),
    ('2032', '濫', 'ラン', ''),
    ('2033', '藍', 'ラン、あい', ''),
    ('2034', '欄欄', 'ラン', ''),
    ('2035', '吏', 'リ', ''),
    ('2036', '利', 'リ、き-く', '砂利'),
    ('2037', '里', 'リ、さと', ''),
    ('2038', '理', 'リ', ''),
    ('2039', '痢', 'リ', ''),
    ('2040', '裏', 'リ、うら', ''),
    ('2041', '履', 'リ、は-く', '草履'),
    ('2042', '璃', 'リ', ''),
    ('2043', '離', 'リ、はな-れる、はな-す', ''),
    ('2044', '陸', 'リク', ''),
    ('2045', '立', 'リツ、（リュウ）、た-つ、た-てる', '立ち退く'),
    ('2046', '律', 'リツ、（リチ）', ''),
    ('2047', '慄', 'リツ', ''),
    ('2048', '略', 'リャク', ''),
    ('2049', '柳', 'リュウ、やなぎ', ''),
    ('2050', '流', 'リュウ、（ル）、なが-れる、なが-す', ''),
    ('2051', '留', 'リュウ、（ル）、と-める、と-まる', ''),
    ('2052', '竜龍', 'リュウ、たつ', ''),
    ('2053', '粒', 'リュウ、つぶ', ''),
    ('2054', '隆隆', 'リュウ', ''),
    ('2055', '硫', 'リュウ', '硫黄'),
    ('2056', '侶', 'リョ', ''),
    ('2057', '旅', 'リョ、たび', ''),
    ('2058', '虜虜', 'リョ', ''),
    ('2059', '慮', 'リョ', ''),
    ('2060', '了', 'リョウ', ''),
    ('2061', '両兩', 'リョウ', ''),
    ('2062', '良', 'リョウ、よ-い', '野良、奈良'),
    ('2063', '料', 'リョウ', ''),
    ('2064', '涼', 'リョウ、すず-しい、すず-む', ''),
    ('2065', '猟獵', 'リョウ', ''),
    ('2066', '陵', 'リョウ、みささぎ', ''),
    ('2067', '量', 'リョウ、はか-る', ''),
    ('2068', '僚', 'リョウ', ''),
    ('2069', '領', 'リョウ', ''),
    ('2070', '寮', 'リョウ', ''),
    ('2071', '療', 'リョウ', ''),
    ('2072', '瞭', 'リョウ', ''),
    ('2073', '糧', 'リョウ、（ロウ）、かて', ''),
    ('2074', '力', 'リョク、リキ、ちから', ''),
    ('2075', '緑綠', 'リョク、（ロク）、みどり', ''),
    ('2076', '林', 'リン、はやし', ''),
    ('2077', '厘', 'リン', ''),
    ('2078', '倫', 'リン', ''),
    ('2079', '輪', 'リン、わ', ''),
    ('2080', '隣', 'リン、とな-る、となり', ''),
    ('2081', '臨', 'リン、のぞ-む', ''),
    ('2082', '瑠', 'ル', ''),
    ('2083', '涙淚', 'ルイ、なみだ', ''),
    ('2084', '累', 'ルイ', ''),
    ('2085', '塁壘', 'ルイ', ''),
    ('2086', '類類', 'ルイ、たぐ-い', ''),
    ('2087', '令', 'レイ', ''),
    ('2088', '礼禮', 'レイ、ライ', ''),
    ('2089', '冷', 'レイ、つめ-たい、ひ-える、ひ-や、ひ-やす、ひ-やかす、さ-める、さ-ます', ''),
    ('2090', '励勵', 'レイ、はげ-む、はげ-ます', ''),
    ('2091', '戻戾', 'レイ、もど-す、もど-る', ''),
    ('2092', '例', 'レイ、たと-える', ''),
    ('2093', '鈴', 'レイ、リン、すず', ''),
    ('2094', '零', 'レイ', ''),
    ('2095', '霊靈', 'レイ、リョウ、たま', ''),
    ('2096', '隷', 'レイ', ''),
    ('2097', '齢齡', 'レイ', ''),
    ('2098', '麗', 'レイ、うるわ-しい', ''),
    ('2099', '暦曆', 'レキ、こよみ', ''),
    ('2100', '歴歷', 'レキ', ''),
    ('2101', '列', 'レツ', ''),
    ('2102', '劣', 'レツ、おと-る', ''),
    ('2103', '烈', 'レツ', ''),
    ('2104', '裂', 'レツ、さ-く、さ-ける', ''),
    ('2105', '恋戀', 'レン、こ-う、こい、こい-しい', ''),
    ('2106', '連', 'レン、つら-なる、つら-ねる、つ-れる', ''),
    ('2107', '廉', 'レン', ''),
    ('2108', '練練', 'レン、ね-る', ''),
    ('2109', '錬鍊', 'レン', ''),
    ('2110', '呂', 'ロ', ''),
    ('2111', '炉爐', 'ロ', ''),
    ('2112', '賂', 'ロ', ''),
    ('2113', '路', 'ロ、じ', ''),
    ('2114', '露', 'ロ、（ロウ）、つゆ', ''),
    ('2115', '老', 'ロウ、お-いる、ふ-ける', '老舗'),
    ('2116', '労勞', 'ロウ', ''),
    ('2117', '弄', 'ロウ、もてあそ-ぶ', ''),
    ('2118', '郎郞', 'ロウ', ''),
    ('2119', '朗朗', 'ロウ、ほが-らか', ''),
    ('2120', '浪', 'ロウ', ''),
    ('2121', '廊廊', 'ロウ', ''),
    ('2122', '楼樓', 'ロウ', ''),
    ('2123', '漏', 'ロウ、も-る、も-れる、も-らす', ''),
    ('2124', '籠', 'ロウ、かご、こ-もる', ''),
    ('2125', '六', 'ロク、む、む-つ、むっ-つ、（むい）', ''),
    ('2126', '録錄', 'ロク', ''),
    ('2127', '麓', 'ロク、ふもと', ''),
    ('2128', '論', 'ロン', ''),
    ('2129', '和', 'ワ、（オ）、やわ-らぐ、やわ-らげる、なご-む、なご-やか', '日和、大和'),
    ('2130', '話', 'ワ、はな-す、はなし', ''),
    ('2131', '賄', 'ワイ、まかな-う', ''),
    ('2132', '脇', 'わき', ''),
    ('2133', '惑', 'ワク、まど-う', ''),
    ('2134', '枠', 'わく', ''),
    ('2135', '湾灣', 'ワン', ''),
    ('2136', '腕', 'ワン、うで', ''),
)

TYPEFACES = (
    '1⑴①', '2⑵②', '3⑶③', '4⑷④', '5⑸⑤', '6⑹⑥', '7⑺⑦', '8⑻⑧', '9⑼⑨',
    '印㊞', '有㈲', '株㈱', '社㈳', '財㈶', '学㈻',
    '吉𠮷', '崎﨑嵜', '高髙',
    '侠俠', '巌巖', '桑桒', '桧檜', '槙槇', '祐祐', '祷禱', '禄祿', '秦䅈',
    '穣穰', '第㐧', '蝉蟬',  '鴎鷗', '鴬鶯',
    # 常用漢字
    '亜亞', '悪惡', '圧壓', '囲圍', '医醫', '為爲', '壱壹', '逸逸', '飲飮',
    '隠隱', '羽羽', '栄榮', '営營', '鋭銳', '衛衞', '益益', '駅驛', '悦悅',
    '謁謁', '閲閱', '円圓', '塩鹽', '縁緣', '艶艷', '応應', '欧歐', '殴毆',
    '桜櫻', '奥奧', '横橫', '温溫', '穏穩', '仮假', '価價', '禍禍', '画畫',
    '会會', '悔悔', '海海', '絵繪', '壊壞', '懐懷', '慨慨', '概槪', '拡擴',
    '殻殼', '覚覺', '学學', '岳嶽', '楽樂', '喝喝', '渇渴', '褐褐', '缶罐',
    '巻卷', '陥陷', '勧勸', '寛寬', '漢漢', '関關', '歓歡', '館館', '観觀',
    '顔顏', '気氣', '祈祈', '既旣', '帰歸', '亀龜', '器器', '偽僞', '戯戲',
    '犠犧', '旧舊', '拠據', '挙擧', '虚虛', '峡峽', '挟挾', '狭狹', '教敎',
    '郷鄕', '響響', '暁曉', '勤勤', '謹謹', '区區', '駆驅駈',  # "駈"を追加
    '勲勳', '薫薰',
    '径徑', '茎莖', '恵惠', '掲揭', '渓溪', '経經', '蛍螢', '軽輕', '継繼',
    '鶏鷄', '芸藝', '撃擊', '欠缺', '研硏', '県縣', '倹儉', '剣劍', '険險',
    '圏圈', '検檢', '献獻', '権權', '顕顯', '験驗', '厳嚴', '戸戶', '呉吳',
    '娯娛', '広廣', '効效', '恒恆', '黄黃', '鉱鑛', '号號', '告吿', '国國',
    '黒黑', '穀穀', '砕碎', '済濟', '斎齋', '歳歲', '剤劑', '冊册', '殺殺',
    '雑雜', '参參', '桟棧', '蚕蠶', '惨慘', '産產', '賛贊', '残殘', '糸絲',
    '祉祉', '視視', '歯齒', '飼飼', '児兒', '辞辭', '𠮟叱', '湿濕', '実實',
    '写寫', '社社', '舎舍', '者者', '煮煮', '釈釋', '寿壽', '収收', '臭臭',
    '従從', '渋澁', '獣獸', '縦縱', '祝祝', '粛肅', '処處', '暑暑', '署署',
    '緒緖', '諸諸', '叙敍敘',  # "敘"を追加
    '尚尙', '将將', '祥祥', '称稱', '渉涉', '焼燒',
    '証證', '奨奬', '条條', '状狀', '乗乘', '浄淨', '剰剩', '畳疊', '縄繩',
    '壌壤', '嬢孃', '譲讓', '醸釀', '触觸', '嘱囑', '神神', '真眞', '寝寢',
    '慎愼', '尽盡', '図圖', '粋粹', '酔醉', '穂穗', '随隨', '髄髓', '枢樞',
    '数數', '瀬瀨', '声聲', '青靑', '斉齊', '清淸', '晴晴', '精精', '静靜',
    '税稅', '窃竊', '摂攝', '節節', '説說', '絶絕', '専專', '浅淺', '戦戰',
    '践踐', '銭錢', '潜潛', '繊纖', '禅禪', '祖祖', '双雙', '壮壯', '争爭',
    '荘莊', '捜搜', '挿揷', '巣巢', '曽曾', '痩瘦', '装裝', '僧僧', '層層',
    '総總', '騒騷', '増增', '憎憎', '蔵藏', '贈贈', '臓臟', '即卽', '属屬',
    '続續', '堕墮', '対對', '体體', '帯帶', '滞滯', '台臺', '滝瀧', '択擇',
    '沢澤', '脱脫', '担擔', '単單', '胆膽', '嘆嘆', '団團', '断斷', '弾彈',
    '遅遲', '痴癡', '虫蟲', '昼晝', '鋳鑄', '著著', '庁廳', '徴徵', '聴聽',
    '懲懲', '鎮鎭', '塚塚', '逓遞', '鉄鐵', '点點', '転轉', '塡填', '伝傳',
    '都都', '灯燈', '当當', '党黨', '盗盜', '稲稻', '闘鬭鬪', '徳德', '独獨',
    '読讀', '突突', '届屆', '内內', '難難', '弐貳', '悩惱', '脳腦', '覇霸',
    '拝拜', '廃廢', '売賣', '梅梅', '剝剥', '麦麥', '発發', '髪髮', '抜拔',
    '飯飯', '繁繁', '晩晚', '蛮蠻', '卑卑', '秘祕', '碑碑', '姫姬',
    '浜濱濵',  # "濵"を追加
    '賓賓', '頻頻', '敏敏', '瓶甁', '侮侮', '福福', '払拂', '仏佛', '併倂',
    '並竝', '塀塀', '餅餠', '辺邊', '変變', '弁辨瓣辯', '勉勉', '歩步', '舗舖',
    '宝寶', '豊豐', '褒襃', '頰頬', '墨墨', '没沒', '翻飜', '毎每', '万萬',
    '満滿', '免免', '麺麵', '黙默', '弥彌', '訳譯', '薬藥', '与與', '予豫',
    '余餘', '誉譽', '揺搖', '様樣', '謡謠', '来來', '頼賴', '乱亂', '覧覽',
    '欄欄', '竜龍', '隆隆', '虜虜', '両兩', '猟獵', '緑綠', '涙淚', '塁壘',
    '類類', '礼禮礼',  # "礼"を追加
    '励勵', '戻戾', '霊靈', '齢齡', '暦曆', '歴歷', '恋戀',
    '練練', '錬鍊', '炉爐', '労勞', '郎郞', '朗朗', '廊廊', '楼樓', '録錄',
    '湾灣',
)

SAMPLE_BASIS = '''
# ★（タイトル）

v=+1.0
### ★（第1項）

★

### ★（第2項）

★
'''

SAMPLE_LAW = '''
v=+0.5 V=+0.5
$ 総則

v=+0.5 V=+0.5
$$ 通則

v=+0.5
: （基本原則）

##
私権は、公共の福祉に適合しなければならない。

###
権利の行使及び義務の履行は、信義に従い誠実に行わなければならない。

###
権利の濫用は、これを許さない。

v=+0.5
: （解釈の基準）

##
この法律は、個人の尊厳と両性の本質的平等を旨として、解釈しなければならない。

v=+0.5 V=+0.5
$$ 人

v=+0.5 V=+0.5
$$$ 権利能力

v=+0.5
##
私権の享有は、出生に始まる。

###
外国人は、法令又は条約の規定により禁止される場合を除き、私権を享有する。

v=+0.5 V=+0.5
$$$ 意思能力

v=+0.5
##-#
法律行為の当事者が意思表示をした時に意思能力を有しなかったときは、
その法律行為は、無効とする。

v=+0.5 V=+0.5
$$$ 行為能力

v=+0.5
: （成年）

##
年齢十八歳をもって、成年とする。

v=+0.5
: （未成年者の法律行為）

##
未成年者が法律行為をするには、その法定代理人の同意を得なければならない。
ただし、単に権利を得、又は義務を免れる法律行為については、この限りでない。

###
前項の規定に反する法律行為は、取り消すことができる。

###
第一項の規定にかかわらず、法定代理人が目的を定めて処分を許した財産は、
その目的の範囲内において、未成年者が自由に処分することができる。
目的を定めないで処分を許した財産を処分するときも、同様とする。

v=+0.5
: （未成年者の営業の許可）

##
一種又は数種の営業を許された未成年者は、その営業に関しては、
成年者と同一の行為能力を有する。

###
前項の場合において、未成年者がその営業に堪えることができない事由があるときは、
その法定代理人は、第四編（親族）の規定に従い、その許可を取り消し、
又はこれを制限することができる。

v=+0.5
: （後見開始の審判）

##
精神上の障害により事理を弁識する能力を欠く常況にある者については、
家庭裁判所は、本人、配偶者、四親等内の親族、未成年後見人、未成年後見監督人、
保佐人、保佐監督人、補助人、補助監督人又は検察官の請求により、
後見開始の審判をすることができる。

v=+0.5
: （成年被後見人及び成年後見人）

##
後見開始の審判を受けた者は、成年被後見人とし、これに成年後見人を付する。

v=+0.5
: （成年被後見人の法律行為）

##
成年被後見人の法律行為は、取り消すことができる。
ただし、日用品の購入その他日常生活に関する行為については、この限りでない。

v=+0.5
: （後見開始の審判の取消し）

##
第七条に規定する原因が消滅したときは、家庭裁判所は、本人、配偶者、
四親等内の親族、後見人（未成年後見人及び成年後見人をいう。以下同じ。）、
後見監督人（未成年後見監督人及び成年後見監督人をいう。以下同じ。）又は
検察官の請求により、後見開始の審判を取り消さなければならない。

v=+0.5
: （保佐開始の審判）

##
精神上の障害により事理を弁識する能力が著しく不十分である者については、
家庭裁判所は、本人、配偶者、四親等内の親族、後見人、後見監督人、補助人、
補助監督人又は検察官の請求により、保佐開始の審判をすることができる。
ただし、第七条に規定する原因がある者については、この限りでない。

v=+0.5
: （被保佐人及び保佐人）

##
保佐開始の審判を受けた者は、被保佐人とし、これに保佐人を付する。

v=+0.5
: （保佐人の同意を要する行為等）

##
被保佐人が次に掲げる行為をするには、その保佐人の同意を得なければならない。
ただし、第九条ただし書に規定する行為については、この限りでない。

####
元本を領収し、又は利用すること。

####
借財又は保証をすること。

####
不動産その他重要な財産に関する権利の得喪を目的とする行為をすること。

####
訴訟行為をすること。

####
贈与、和解又は仲裁合意
（仲裁法（平成十五年法律第百三十八号）第二条第一項に規定する仲裁合意をいう。）
をすること。

####
相続の承認若しくは放棄又は遺産の分割をすること。

####
贈与の申込みを拒絶し、遺贈を放棄し、負担付贈与の申込みを承諾し、
又は負担付遺贈を承認すること。

####
新築、改築、増築又は大修繕をすること。

####
第六百二条に定める期間を超える賃貸借をすること。

####
前各号に掲げる行為を制限行為能力者
（未成年者、成年被後見人、被保佐人及び第十七条第一項の審判を受けた被補助人を
いう。以下同じ。）の法定代理人としてすること。

###
家庭裁判所は、
第十一条本文に規定する者又は保佐人若しくは保佐監督人の請求により、
被保佐人が前項各号に掲げる行為以外の行為をする場合であっても
その保佐人の同意を得なければならない旨の審判をすることができる。
ただし、第九条ただし書に規定する行為については、この限りでない。

###
保佐人の同意を得なければならない行為について、
保佐人が被保佐人の利益を害するおそれがないにもかかわらず同意をしないときは、
家庭裁判所は、被保佐人の請求により、保佐人の同意に代わる許可を与えることができる。

###
保佐人の同意を得なければならない行為であって、
その同意又はこれに代わる許可を得ないでしたものは、取り消すことができる。
'''

SAMPLE_PETITION = '''
# 訴状

v=+0.5
令和★年★月★日 :

v=+0.5
: ★裁判所　御中

v=+0.5
<!--------------------------vv----------------------------vv------------->
: \\　　　　　　　　　　　　　原告★訴訟代理人弁護士　　　　★
: \\　　　　　　　　　　　　　　　同　　　　　　　　　　　　★
: \\　　　　　　　　　　　　　　　同（担当）　　　　　　　　★

v=+0.5
: 〒★－★　広島市★
<!--------------------------vv----------------------------vv------------->
: \\　　　　　　　　　　　　　原告　　　　　　　　　　　　　★
: \\　　　　　　　　　　　　　上記代表者代表取締役　　　　　★

: 〒★－★　広島市★
<!--------------------------vv----------------------------vv------------->
: \\　　　　　　　　　　　　　原告　　　　　　　　　　　　　★
: \\　　　　　　　　　　　　　上記代表者代表取締役　　　　　★

: 〒★－★　広島市★
: \\　　　　　　　★法律事務所（送達場所）
<!--------------------------vv----------------------------vv------------->
: \\　　　　　　　　　　　　　原告★訴訟代理人弁護士　　　　★
: \\　　　　　　　　　　　　　　　同　　　　　　　　　　　　★
: \\　　　　　　　　　　　　　　　同（担当）　　　　　　　　★
: \\　　　　　　　TEL ★－★－★　　FAX ★－★－★

: 〒★－★　広島市★
<!--------------------------vv----------------------------vv------------->
: \\　　　　　　　　　　　　　被告　　　　　　　　　　　　　★
: \\　　　　　　　　　　　　　上記代表者代表取締役　　　　　★

: 〒★－★　広島市★
<!--------------------------vv----------------------------vv------------->
: \\　　　　　　　　　　　　　被告　　　　　　　　　　　　　★
: \\　　　　　　　　　　　　　上記代表者代表取締役　　　　　★

v=+1.0
: ★請求事件
: 訴訟物の価額　　★★★★万★★★★円
: 貼用印紙額　　　　　　★万★★★★円

## 請求の趣旨

###
被告★は、原告に対し、★連帯して、
★円及びこれに対する令和★年★月★日から支払済みまで年３分
の割合による金員を支払え。

###
訴訟費用は被告★の負担とする。

<<=1 <=1
との判決並びに仮執行の宣言を求める。

# 請求の原因

### ★について

★

### ★について

★

### まとめ

よって、原告は、被告★に対し、不法行為に基づき、
損害金★円及びこれに対する本件事故日である
令和★年★月★日から支払済みまで民法所定年３分
の割合による遅延損害金の支払を求める。

v=+1.0
# ##=1 ###=1

: 証拠方法 :

### 甲第１号証　　　　　★
### 甲第２号証　　　　　★
### 甲第３号証　　　　　★
### 甲第４号証　　　　　★
### 甲第５号証　　　　　★
### 甲第６号証　　　　　★
### 甲第７号証　　　　　★
### 甲第８号証　　　　　★
### 甲第９号証　　　　　★
### 甲第１０号証　　　　★
### 甲第１１号証　　　　★

v=+1.0
# ##=1 ###=1

: 附属書類 :

### 訴状副本　　　　　　　　　　　　　　★通<!--[被告の数]-->
### 資格証明書　　　　　　　　　　　　　★通<!--[法人当事者の数]-->
### 訴訟委任状　　　　　　　　　　　　　★通<!--[原告の数]-->
### 甲号証の写し　　　　　　　　　　　各★通<!--[被告の数＋1]-->
'''

SAMPLE_EVIDENCE = '''
: 令和★年（★）第★号　★請求事件
: 原告　★
: 被告　★

v=+0.5
# 証拠説明書

v=+0.5
令和★年★月★日 :

v=+0.5
: ★裁判所　御中

v=+0.5
<!--------------------------vv----------------------------vv------------->
: \\　　　　　　　　　　　　　★★★訴訟代理人弁護士　　　　★
: \\　　　　　　　　　　　　　　　同　　　　　　　　　　　　★
: \\　　　　　　　　　　　　　　　同（担当）　　　　　　　　★

v=+1.0
--
|号証 |標目|原写|作成日|作成者|立証趣旨|備考|
=
|:----|:---------|:--:|:-------|:-----------|:-----------------------|:---------|
|★1|★書|原本|R★.★.★|★|①★であったこと<br>②★であったこと||
|★2|★書|原本|R★.★.★|★|①★であったこと<br>②★であったこと||
|★3|★書|原本|R★.★.★|★|①★であったこと<br>②★であったこと||
--
'''

SAMPLE_SETTLEMENT = '''
# 和解契約書

v=+1.0
★（以下「甲」という。）と
★（以下「乙」という。）は、
★に関し、次のとおり和解した。

## （★）

★

###
★

###
★

## （債務）

乙は、甲に対し、
★万★円の債務を負っていることを認める。

## （支払）

乙は、甲に対し、
令和★年★月★日限り、
前条の★万★円を下記の口座に振り込んで支払う。
ただし、振込手数料は乙の負担とする。

<=-1.0 v=+0.5
金融機関__　　　　　　　　　　　__　本支店名__　　　　　　　　　　　__

<=-1.0 v=+0.5
普通・当座等__　　　　　　　__　口座番号__　　　　　　　　　　　　　__

<=-1.0 v=+0.5
<名義/フリガナ>__　　　　　　　　　　　　　　　　　　　　　　　　　　　　　__

## （清算条項）

甲と乙は、甲と乙の間には、
★本件に関し、
上記各条項に定めるほか、何らの債権債務のないことを相互に確認する。

v=+1.0
本和解の成立を証するため、本書を★通作成し、各自1通を所持するものとする。

# ##=1 ###=1

v=+1.0
: 令和★年★月★日

v=+1.0
: 甲　　　　★
: \\　　　　　　　　　　　★　　　　　　　　　　　　　　　　　　　　㊞

: ★代理人　★
: \\　　　　　　　弁護士　★　　　　　　　　　　　　　　　　　　　　㊞

v=+0.5
: ★　住所　^DDD^__　　　　　　　　　　　　　　　　　　　　　　　　　　　　__^DDD^

v=+0.5
: \\　　氏名　__　　　　　　　　　　　　　　　　　　　　　　　　　　　㊞__
'''

DONT_EDIT_MESSAGE = '<!--【以下は必要なデータですので編集しないでください】-->'


class CharsState:

    def __init__(self):
        self.del_or_ins = ''
        self.is_in_comment = False
        self.parentheses = []
        self.has_underline = False
        self.has_specific_font = False
        self.is_length_reviser = False
        self.chapter_depth = 0
        self.section_depth = 0

    def __eq__(self, other):
        if self.del_or_ins != other.del_or_ins:
            return False
        if self.is_in_comment != other.is_in_comment:
            return False
        if self.parentheses != other.parentheses:
            return False
        if self.has_underline != other.has_underline:
            return False
        if self.has_specific_font != other.has_specific_font:
            return False
        return True

    def copy(self):
        copy = CharsState()
        copy.del_or_ins = self.del_or_ins
        copy.is_in_comment = self.is_in_comment
        for p in self.parentheses:
            copy.parentheses.append(p)
        copy.has_underline = self.has_underline
        copy.has_specific_font = self.has_specific_font
        copy.is_length_reviser = self.is_length_reviser
        copy.chapter_depth = self.chapter_depth
        copy.section_depth = self.section_depth
        # for v in vars(copy):
        #     vars(copy)[v] = vars(self)[v]
        return copy

    def reset_partially(self):
        self.is_length_reviser = False
        self.chapter_depth = 0
        self.section_depth = 0

    def set_is_in_comment(self):
        self.is_in_comment = not self.is_in_comment

    def set_del_or_ins(self, del_or_ins):
        if del_or_ins == 'del':
            if self.del_or_ins == 'del':
                self.del_or_ins = ''
            else:
                self.del_or_ins = 'del'
        if del_or_ins == 'ins':
            if self.del_or_ins == 'ins':
                self.del_or_ins = ''
            else:
                self.del_or_ins = 'ins'

    def toggle_has_underline(self):
        self.has_underline = not self.has_underline

    def toggle_has_specific_font(self):
        self.has_specific_font = not self.has_specific_font

    def apply_parenthesis(self, parenthesis):
        ps = self.parentheses
        p = parenthesis
        if p == '「' or p == '『' or p == '[' or p == '（' or p == '(':
            ps.append(p)
        if p == ')' or p == '）' or p == ']' or p == '』' or p == '」':
            if len(ps) > 0:
                if ps[-1] == '(' and p == ')' or \
                   ps[-1] == '（' and p == '）' or \
                   ps[-1] == '[' and p == ']' or \
                   ps[-1] == '『' and p == '』' or \
                   ps[-1] == '「' and p == '」':
                    ps.pop(-1)

    def set_chapter_depth(self, depth):
        self.chapter_depth = depth

    def set_section_depth(self, depth):
        self.section_depth = depth

    def get_key(self, chars):
        key = 'c'
        # ANGLE
        if False:
            pass
        elif chars == ' ':
            return 'hsp_tag'
        elif chars == '\u3000':
            return 'fsp_tag'
        elif chars == '\t':
            return 'tab_tag'
        elif self.is_in_comment:
            key += '-0'
        elif chars == 'font decorator':
            key += '-120'
        elif chars == 'half number':
            key += '-210'
        elif chars == 'full number':
            key += '-330'
        elif chars == 'list':
            key += '-330'
        elif chars == 'alignment':
            key += '-180'
        elif chars == 'image':
            if len(self.parentheses) == 0:
                key += '-80'
            elif len(self.parentheses) == 1:
                key += '-120'
            elif len(self.parentheses) >= 2:
                key += '-160'
        elif len(self.parentheses) == 1:
            key += '-80'
        elif len(self.parentheses) == 2:
            key += '-120'
        elif len(self.parentheses) >= 3:
            key += '-160'
        elif chars == '<br>' or chars == '<pgbr>':
            key += '-120'
        elif chars == 'R' or chars == 'red':
            key += '-0'
        elif chars == 'Y' or chars == 'yellow':
            key += '-60'
        elif chars == 'G' or chars == 'green':
            key += '-120'
        elif chars == 'C' or chars == 'cyan':
            key += '-180'
        elif chars == 'B' or chars == 'blue':
            key += '-240'
        elif chars == 'M' or chars == 'magenta':
            key += '-300'
        elif chars == 'fold':
            key += '-10'
        elif self.is_length_reviser:
            key += '-150'
        elif self.chapter_depth > 0:
            key += '-' + str(210 + ((self.chapter_depth - 1) * 10))
        elif self.section_depth > 0:
            key += '-' + str(30 + ((self.section_depth - 1) * 10))
        else:
            key += '-XXX'
        # LIGHTNESS
        if self.del_or_ins == 'del':
            key += '-0'
        elif self.del_or_ins == 'ins':
            key += '-2'
        else:
            key += '-1'
        # FONT
        if chars == 'mincho':
            key += '-m'  # mincho
        else:
            key += '-g'  # gothic
        # UNDERLINE
        if chars == 'font decorator':
            key += '-x'  # no underline
        elif chars == ' ' or chars == '\t' or chars == '\u3000':
            # if not self.is_in_comment:
            key += '-u'  # underline
        elif not self.is_in_comment and self.has_underline:
            key += '-u'  # underline
        elif not self.is_in_comment and self.has_specific_font:
            key += '-u'  # underline
        else:
            key += '-x'  # no underline
        # RETURN
        return key


class LineDatum:

    def __init__(self):
        self.line_number = 0
        self.line_text = ''
        self.beg_chars_state = CharsState()
        self.end_chars_state = CharsState()
        self.must_paint_keywords = False

    def paint_line(self, txt, must_paint_keywords=False):
        # PREPARE
        i = self.line_number
        line_text = self.line_text
        chars_state = self.beg_chars_state.copy()
        self.must_paint_keywords = must_paint_keywords
        # RESET TAG
        for tag in txt.tag_names():
            if tag != 'search_tag':
                txt.tag_remove(tag, str(i + 1) + '.0', str(i + 1) + '.end')
        if line_text == '':
            self.end_chars_state = chars_state.copy()
            return
        if not chars_state.is_in_comment:
            # PAGE BREAK
            if line_text == '<pgbr>\n':
                beg, end = str(i + 1) + '.0', str(i + 1) + '.end'
                key = chars_state.get_key('<pgbr>')                     # 1.key
                #                                                       # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                #                                                       # 5.tmp
                #                                                       # 6.beg
                self.end_chars_state = chars_state.copy()
                return
            # LENGTH REVISERS
            res = '^((<<|<|>|v|V|X)=(\\+|\\-)?[\\.0-9]+\\s+)+$'
            if re.match(res, line_text):
                chars_state.is_length_reviser = True
            # CHAPTER
            if line_text[0] == '$':
                res = '^(\\${,5})(?:-\\$+)*(=[\\.0-9]+)?(?:\\s.*)?\n?$'
                if re.match(res, line_text):
                    dep = len(re.sub(res, '\\1', line_text))
                    chars_state.set_chapter_depth(dep)
            # SECTION
            if line_text[0] == '#':
                res = '^(#{,8})(?:-#+)*(=[\\.0-9]+)?(?:\\s.*)?\n?$'
                if re.match(res, line_text):
                    dep = len(re.sub(res, '\\1', line_text))
                    chars_state.set_section_depth(dep)
        # LOOP
        beg, tmp = str(i + 1) + '.0', ''
        for j, c in enumerate(line_text):
            tmp += c
            s1 = line_text[j - 0:j + 1] if True else ''
            s2 = line_text[j - 1:j + 1] if j > 0 else ''
            s3 = line_text[j - 2:j + 1] if j > 1 else ''
            s4 = line_text[j - 3:j + 1] if j > 2 else ''
            c0 = line_text[j + 1] if j < len(line_text) - 1 else ''
            c1 = c
            c2 = line_text[j - 1] if j > 0 else ''
            c3 = line_text[j - 2] if j > 1 else ''
            c4 = line_text[j - 3] if j > 2 else ''
            c5 = line_text[j - 4] if j > 3 else ''
            s_lft = line_text[:j + 1]
            s_rgt = line_text[j + 1:]
            # BEGINNING OF COMMENT "<!--"
            if (not chars_state.is_in_comment and s4 == '<!--') and \
               (c5 != '\\' or re.match(NOT_ESCAPED + '<!--$', tmp)):
                key = chars_state.get_key('')                           # 1.key
                end = str(i + 1) + '.' + str(j - 3)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                chars_state.set_is_in_comment()                         # 4.set
                tmp = '<!--'                                            # 5.tmp
                beg = end                                               # 6.beg
                continue
            # END OF COMMENT "-->"
            if (chars_state.is_in_comment and s3 == '-->') and \
               (c4 != '\\' or re.match(NOT_ESCAPED + '-->$', tmp)):
                key = chars_state.get_key('')                           # 1.key
                end = str(i + 1) + '.' + str(j + 1)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                chars_state.set_is_in_comment()                         # 4.set
                tmp = ''                                                # 5.tmp
                beg = end                                               # 6.beg
                continue
            # LIST
            if not chars_state.is_in_comment and j == 0 and \
               c == '-' and re.match('\\s', c0):
                key = chars_state.get_key('list')                       # 1.key
                end = str(i + 1) + '.' + str(j + 1)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                tmp = ''                                                # 5.tmp
                beg = end                                               # 6.beg
                continue
            if not chars_state.is_in_comment and j == 1 and \
               re.match('^[0-9]$', c2) and c == '.' and re.match('\\s', c0):
                key = chars_state.get_key('half number')
                txt.tag_remove(key, str(i + 1) + '.0', str(i + 1) + '.1')
                beg, end = str(i + 1) + '.0', str(i + 1) + '.' + str(j + 1)
                key = chars_state.get_key('list')                       # 1.key
                #                                                       # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                tmp = ''                                                # 5.tmp
                beg = end                                               # 6.beg
                continue
            # ALIGNMENT
            if not chars_state.is_in_comment and j == 0 and \
               c == ':' and re.match('\\s', c0):
                key = chars_state.get_key('alignment')                  # 1.key
                end = str(i + 1) + '.' + str(j + 1)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                tmp = ''                                                # 5.tmp
                beg = end                                               # 6.beg
                continue
            if not chars_state.is_in_comment and j >= 2 and \
               re.match('\\s', c3) and c2 == ':' and c == '\n':
                key = chars_state.get_key('')                           # 1.key
                end = str(i + 1) + '.' + str(j - 2)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                # tmp = ' :\n'                                          # 5.tmp
                beg = end                                               # 6.beg
                key = chars_state.get_key('alignment')                  # 1.key
                end = str(i + 1) + '.' + str(j + 1)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                tmp = ''                                                # 5.tmp
                beg = end                                               # 6.beg
                continue
            # DEL ("->", "<-")
            if ((chars_state.del_or_ins == '' and s2 == '->' and
                 (c3 != '\\' or re.match(NOT_ESCAPED + '\\->$', tmp))) or
                (chars_state.del_or_ins == 'del' and s2 == '<-' and
                 (c3 != '\\' or re.match(NOT_ESCAPED + '<\\-$', tmp)))):
                key = chars_state.get_key('')                           # 1.key
                end = str(i + 1) + '.' + str(j - 1)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                chars_state.set_del_or_ins('del')                       # 4.set
                # tmp = '->' or '<-'                                    # 5.tmp
                beg = end                                               # 6.beg
                key = 'c-20-1-g-x'                                      # 1.key
                end = str(i + 1) + '.' + str(j + 1)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                tmp = ''                                                # 5.tmp
                beg = end                                               # 6.beg
                continue
            # INS ("+>", "<+")
            if ((chars_state.del_or_ins == '' and s2 == '+>' and
                 (c3 != '\\' or re.match(NOT_ESCAPED + '\\+>$', tmp))) or
                (chars_state.del_or_ins == 'ins' and s2 == '<+' and
                 (c3 != '\\' or re.match(NOT_ESCAPED + '<\\+$', tmp)))):
                key = chars_state.get_key('')                           # 1.key
                end = str(i + 1) + '.' + str(j - 1)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                chars_state.set_del_or_ins('ins')                       # 4.set
                # tmp = '+>' or '<+'                                    # 5.tmp
                beg = end                                               # 6.beg
                key = 'c-200-1-g-x'                                     # 1.key
                end = str(i + 1) + '.' + str(j + 1)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                tmp = ''                                                # 5.tmp
                beg = end                                               # 6.beg
                continue
            # LINE BREAK
            if (not chars_state.is_in_comment) and re.match('^.*<br>$', tmp):
                key = chars_state.get_key('')                           # 1.key
                end = str(i + 1) + '.' + str(j - 3)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                # tmp = <br>                                            # 5.tmp
                beg = end                                               # 6.beg
                key = chars_state.get_key('<br>')                       # 1.key
                end = str(i + 1) + '.' + str(j + 1)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                tmp = ''                                                # 5.tmp
                beg = end                                               # 6.beg
                continue
            # COLOR
            res_color = '(R|red|Y|yellow|G|green|C|cyan|B|blue|M|magenta)'
            if ((not chars_state.is_in_comment) and
                (re.match('^.*_' + res_color + '_$', tmp) or
                 re.match('^.*\\^' + res_color + '\\^$', tmp))):
                res = '^(.*)[_\\^]' + res_color + '[_\\^]$'
                mdt = re.sub(res, '\\1', tmp)
                col = re.sub(res, '\\2', tmp)
                key = chars_state.get_key('')                           # 1.key
                end = str(i + 1) + '.' + str(j - len(col) - 1)          # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                # tmp = '_.+_' or '^.+^'                                # 5.tmp
                beg = end                                               # 6.beg
                key = chars_state.get_key(col)                          # 1.key
                end = str(i + 1) + '.' + str(j + 1)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                tmp = ''                                                # 5.tmp
                beg = end                                               # 6.beg
                continue
            # FONT DECORATOR ("---", "+++", ">>>", "<<<")
            if (not chars_state.is_in_comment) and \
               (s3 == '---' or s3 == '+++' or s3 == '>>>' or s3 == '<<<') and \
               (c4 != '\\' or re.match(NOT_ESCAPED + '...$', tmp)):
                key = chars_state.get_key('')                           # 1.key
                end = str(i + 1) + '.' + str(j - 2)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                # tmp = '---' or '+++' or '>>>' or '<<<'                # 5.tmp
                beg = end                                               # 6.beg
                key = chars_state.get_key('font decorator')             # 1.key
                end = str(i + 1) + '.' + str(j + 1)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                tmp = ''                                                # 5.tmp
                beg = end                                               # 6.beg
                continue
            # FONT DECORATOR ("--", "++", ">>", "<<")
            if (not chars_state.is_in_comment) and \
               (s2 == '--' or s2 == '++' or s2 == '>>' or s2 == '<<') and \
               (c0 != c1) and \
               (c3 != '\\' or re.match(NOT_ESCAPED + '..$', tmp)):
                key = chars_state.get_key('')                           # 1.key
                end = str(i + 1) + '.' + str(j - 1)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                # tmp = '--' or '++' or '>>' or '<<'                    # 5.tmp
                beg = end                                               # 6.beg
                key = chars_state.get_key('font decorator')             # 1.key
                end = str(i + 1) + '.' + str(j + 1)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                tmp = ''                                                # 5.tmp
                beg = end                                               # 6.beg
                continue
            # FONT DECORATOR ("@.+@", "^.*^", "_.*_")
            if re.match('^.*@[0-9]+$', s_lft) and \
               re.match('^[0-9]*@.*$', s_rgt):
                continue  # @n@
            res = NOT_ESCAPED + '(@[^@]{1,66}@|\\^.*\\^|_.*_)$'
            if re.match(res, tmp) and not chars_state.is_in_comment:
                mdt = re.sub(res, '\\2', tmp)
                hul = chars_state.has_underline
                hsf = chars_state.has_specific_font
                key = chars_state.get_key('')                           # 1.key
                end = str(i + 1) + '.' + str(j - len(mdt) + 1)          # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                if re.match('_.*_', mdt) and hul:
                    chars_state.toggle_has_underline()                  # 4.set
                elif re.match('@.*@', mdt) and hsf:
                    chars_state.toggle_has_specific_font()              # 4.set
                tmp = mdt                                               # 5.tmp
                beg = end                                               # 6.beg
                key = chars_state.get_key('font decorator')             # 1.key
                end = str(i + 1) + '.' + str(j + 1)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                if re.match('_.*_', mdt) and not hul:
                    chars_state.toggle_has_underline()                  # 4.set
                elif re.match('@.*@', mdt) and not hsf:
                    chars_state.toggle_has_specific_font()              # 4.set
                tmp = ''                                                # 5.tmp
                beg = end                                               # 6.beg
                continue
            # IMAGE
            if c == '!' and re.match('^\\[.*\\]\\(.*\\)', line_text[j+1:]):
                key = chars_state.get_key('')                           # 1.key
                end = str(i + 1) + '.' + str(j)                         # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                # tmp = '!'                                             # 5.tmp
                beg = end                                               # 6.beg
                key = chars_state.get_key('image')                      # 1.key
                end = str(i + 1) + '.' + str(j + 1)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                tmp = ''                                                # 5.tmp
                beg = end                                               # 6.beg
            # FOLDING
            if re.match('^#+(-#+)*(\\s.*)?\\.\\.\\.\\[$', s_lft) and \
               re.match(NOT_ESCAPED + '\\.\\.\\.\\[$', s_lft) and \
               re.match('^[0-9]+\\]$', s_rgt):
                continue  # # xxx...[ / n]
            if re.match('^\\.\\.\\.\\[$', s_lft) and \
               re.match('^[0-9]+\\]#+(-#+)*(\\s.*)?$', s_rgt):
                continue  # ...[ / n]# xxx
            if re.match('^#+(-#+)*(\\s.*)?\\.\\.\\.\\[[0-9]+$', s_lft) and \
               re.match(NOT_ESCAPED + '\\.\\.\\.\\[[0-9]+$', s_lft) and \
               re.match('^[0-9]*\\]$', s_rgt):
                continue  # # xxx...[n / ]
            if re.match('^\\.\\.\\.\\[[0-9]+$', s_lft) and \
               re.match('^[0-9]*\\]#+(-#+)*(\\s.*)?$', s_rgt):
                continue  # ...[n / ]xxx
            res = '^(#+(?:-#+)*(?:\\s.*)?)(\\.\\.\\.\\[[0-9]+\\])$'
            if re.match(res, s_lft) and \
               re.match(NOT_ESCAPED + '\\.\\.\\.\\[[0-9]+\\]$', s_lft) and \
               re.match('^\n$', s_rgt):
                fld = re.sub(res, '\\2', s_lft)
                key = chars_state.get_key('')                           # 1.key
                end = str(i + 1) + '.' + str(j + 1 - len(fld))          # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                # tmp = '...[n]'                                        # 5.tmp
                beg = end                                               # 6.beg
                key = chars_state.get_key('fold')                       # 1.key
                end = str(i + 1) + '.' + str(j + 1)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                tmp = ''                                                # 5.tmp
                beg = end                                               # 6.beg
                continue  # xxx...[n] /
            if re.match('^\\.\\.\\.\\[[0-9]+\\]$', s_lft) and \
               re.match('^#+(-#+)*(\\s.*)?\n$', s_rgt):
                key = chars_state.get_key('fold')                       # 1.key
                end = str(i + 1) + '.' + str(j + 1)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                tmp = ''                                                # 5.tmp
                beg = end                                               # 6.beg
                continue  # ...[n]# xxx /
            # PARENTHESES
            if c == '「' or c == '『' or c == '[' or c == '（' or c == '(':
                key = chars_state.get_key('')                           # 1.key
                end = str(i + 1) + '.' + str(j)                         # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                chars_state.apply_parenthesis(c)                        # 4.set
                tmp = c                                                 # 5.tmp
                beg = end                                               # 6.beg
                continue
            if c == ')' or c == '）' or c == ']' or c == '』' or c == '」':
                key = chars_state.get_key('')                           # 1.key
                end = str(i + 1) + '.' + str(j + 1)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                chars_state.apply_parenthesis(c)                        # 4.set
                # tmp = ''                                              # 5.tmp
                beg = end                                               # 6.beg
                continue
            # NUMBER
            if re.match('[0-9]', c):
                key = chars_state.get_key('')                           # 1.key
                end = str(i + 1) + '.' + str(j)                         # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                # tmp = '[0-9]'                                         # 5.tmp
                beg = end                                               # 6.beg
                key = chars_state.get_key('half number')                # 1.key
                end = str(i + 1) + '.' + str(j + 1)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                tmp = ''                                                # 5.tmp
                beg = end                                               # 6.beg
                continue
            if re.match('[０-９零一二三四五六七八九十]', c):
                key = chars_state.get_key('')                           # 1.key
                end = str(i + 1) + '.' + str(j)                         # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                # tmp = '[０-９]'                                       # 5.tmp
                beg = end                                               # 6.beg
                key = chars_state.get_key('full number')                # 1.key
                end = str(i + 1) + '.' + str(j + 1)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                tmp = ''                                                # 5.tmp
                beg = end                                               # 6.beg
                continue
            # ERROR ("★")
            if c == '★':
                key = chars_state.get_key('')                           # 1.key
                end = str(i + 1) + '.' + str(j)                         # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                # tmp = '★'                                            # 5.tmp
                beg = end                                               # 6.beg
                key = 'error_tag'                                       # 1.key
                end = str(i + 1) + '.' + str(j + 1)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                tmp = ''                                                # 5.tmp
                beg = end                                               # 6.beg
                continue
            # MINCHO
            # 002D "-" HYPHEN-MINUS
            # 2010 "‐" HYPHEN
            # 2014 "—" EM DASH
            # 2015 "―" HORIZONTAL BAR
            # 2212 "−" MINUS SIGN
            # 30FC "ー" KATAKANA-HIRAGANA PROLONGED SOUND MARK
            # FF0D "－" FULLWIDTH HYPHEN-MINUS
            if c == '\u2010' or c == '\u2014' or \
               c == '\u2212' or c == '\u30FC':
                key = chars_state.get_key('')                           # 1.key
                end = str(i + 1) + '.' + str(j)                         # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                # tmp = c                                               # 5.tmp
                beg = end                                               # 6.beg
                key = chars_state.get_key('mincho')                     # 1.key
                end = str(i + 1) + '.' + str(j + 1)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                tmp = ''                                                # 5.tmp
                beg = end                                               # 6.beg
                continue
            # SPACE (" ", "\t", "\u3000")
            if c == ' ' or c == '\t' or c == '\u3000':
                key = chars_state.get_key('')                           # 1.key
                end = str(i + 1) + '.' + str(j)                         # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                # tmp = ' ' or '\t' or '\u3000'                         # 5.tmp
                beg = end                                               # 6.beg
                key = chars_state.get_key(c)                            # 1.key
                end = str(i + 1) + '.' + str(j + 1)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                tmp = ''                                                # 5.tmp
                beg = end                                               # 6.beg
                continue
            # SEARCH WORD
            wrd = Makdo.search_word
            if wrd != '' and re.match('^.*' + wrd + '$', tmp):
                key = chars_state.get_key('')                           # 1.key
                end = str(i + 1) + '.' + str(j - len(wrd) + 1)          # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                # tmp = wrd                                             # 5.tmp
                beg = end                                               # 6.beg
                key = 'rev-gx'                                          # 1.key
                end = str(i + 1) + '.' + str(j + 1)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                tmp = ''                                                # 5.tmp
                beg = end                                               # 6.beg
                continue
            # KEYWORD
            if self.must_paint_keywords:
                for kw in KEYWORDS:
                    if re.match('^(.*?)' + kw[0] + '$', tmp):
                        t1 = re.sub('^(.*?)' + kw[0] + '$', '\\1', tmp)
                        t2 = re.sub('^(.*?)' + kw[0] + '$', '\\2', tmp)
                        if t2 == '原告' or t2 == '被告':
                            if re.match('^(?:.|\n)*(本|反)訴$', t1):
                                continue
                        if t2 == '被告' and c0 == '人':
                            continue
                        key = chars_state.get_key('')                   # 1.key
                        end = str(i + 1) + '.' + str(j - len(t2) + 1)   # 2.end
                        txt.tag_add(key, beg, end)                      # 3.tag
                        #                                               # 4.set
                        # tmp = t2                                      # 5.tmp
                        beg = end                                       # 6.beg
                        key = chars_state.get_key(kw[1])                # 1.key
                        end = str(i + 1) + '.' + str(j + 1)             # 2.end
                        txt.tag_add(key, beg, end)                      # 3.tag
                        #                                               # 4.set
                        tmp = ''                                        # 5.tmp
                        beg = end                                       # 6.beg
                    continue
            # END OF THE LINE "\n"
            if c1 == '\n':
                key = chars_state.get_key('')                           # 1.key
                end = str(i + 1) + '.' + str(j + 1)                     # 2.end
                txt.tag_add(key, beg, end)                              # 3.tag
                #                                                       # 4.set
                #                                                       # 5.tmp
                #                                                       # 6.beg
                break
        self.end_chars_state = chars_state.copy()
        return


class ConvertTypefaceDialog(tkinter.simpledialog.Dialog):

    def __init__(self, win, old_typeface, candidates):
        self.win = win
        self.old_typeface = old_typeface
        self.candidates = candidates
        super().__init__(win)

    def body(self, win):
        self.typeface = tkinter.StringVar()
        for cnd in self.candidates:
            rd = tkinter.Radiobutton(win, text=cnd, value=cnd,
                                     font=(GOTHIC_FONT, 24),
                                     variable=self.typeface)
            rd.pack(side=tkinter.LEFT, padx=3, pady=3)
            if cnd == self.old_typeface:
                rd.select()
        self.bind('<Key-Return>', self.ok)
        self.bind('<Key-Escape>', self.cancel)
        super().body(win)

    def buttonbox(self):
        btn = tkinter.Frame(self)
        self.btn1 = tkinter.Button(btn, text='OK', width=6,
                                   command=self.ok)
        self.btn1.pack(side=tkinter.LEFT, padx=3, pady=3)
        self.btn2 = tkinter.Button(btn, text='Cancel', width=6,
                                   command=self.cancel)
        self.btn2.pack(side=tkinter.LEFT, padx=3, pady=3)
        btn.pack()

    def apply(self):
        new_typeface = self.typeface.get()
        self.win.delete('insert', 'insert+1c')
        self.win.insert('insert', new_typeface)
        self.win.mark_set('insert', 'insert-1c')
        self.win.focus_set()


class InsertSymbolDialog(tkinter.simpledialog.Dialog):

    def __init__(self, win, candidates):
        self.win = win
        self.candidates = candidates
        super().__init__(win)

    def body(self, win):
        self.symbol = tkinter.StringVar()
        for i, cnd in enumerate(self.candidates):
            rd = tkinter.Radiobutton(win, text=cnd, value=cnd,
                                     font=(GOTHIC_FONT, 24),
                                     variable=self.symbol)
            y, x = int(i / 10), (i % 10)
            rd.grid(row=y, column=x, columnspan=1, padx=3, pady=3)
        self.bind('<Key-Return>', self.ok)
        self.bind('<Key-Escape>', self.cancel)
        super().body(win)

    def buttonbox(self):
        btn = tkinter.Frame(self)
        self.btn1 = tkinter.Button(btn, text='OK', width=6,
                                   command=self.ok)
        self.btn1.pack(side=tkinter.LEFT, padx=3, pady=3)
        self.btn2 = tkinter.Button(btn, text='Cancel', width=6,
                                   command=self.cancel)
        self.btn2.pack(side=tkinter.LEFT, padx=3, pady=3)
        btn.pack()

    def apply(self):
        symbol = self.symbol.get()
        self.win.insert('insert', symbol)
        # self.win.mark_set('insert', 'insert-1c')
        self.win.focus_set()


class SelectMinchoDialog(tkinter.simpledialog.Dialog):

    def __init__(self, win, candidates):
        self.win = win
        self.candidates = candidates
        super().__init__(win)

    def body(self, win):
        self.mincho = tkinter.StringVar()
        for cnd in self.candidates:
            rd = tkinter.Radiobutton(win, text=cnd, value=cnd,
                                     font=(GOTHIC_FONT, 24),
                                     variable=self.mincho)
            rd.pack(side=tkinter.TOP, padx=3, pady=3)
        self.bind('<Key-Return>', self.ok)
        self.bind('<Key-Escape>', self.cancel)
        super().body(win)

    def buttonbox(self):
        btn = tkinter.Frame(self)
        self.btn1 = tkinter.Button(btn, text='OK', width=6,
                                   command=self.ok)
        self.btn1.pack(side=tkinter.LEFT, padx=3, pady=3)
        self.btn2 = tkinter.Button(btn, text='Cancel', width=6,
                                   command=self.cancel)
        self.btn2.pack(side=tkinter.LEFT, padx=3, pady=3)
        btn.pack()

    def apply(self):
        m = self.mincho.get()
        d = '@' + m + '@（ここはフォントが変わる）@' + m + '@'
        self.win.insert('insert', d)
        self.win.mark_set('insert', 'insert-' + str(len(m) + 2) + 'c')
        self.win.focus_set()


class Makdo:

    search_word = ''

    def __init__(self, args):
        self.tmep_dir = ''
        self.file_path = args.input_file
        self.init_text = ''
        self.file_lines = []
        self.must_make_backup_file = args.input_file
        self.line_data = []
        self.standard_line = 0
        self.global_line_to_paint = 0
        self.local_line_to_paint = 0
        self.akauni_history = ['', '', '', '', '']
        self.must_display_folding_message = True
        # WINDOW
        self.win = TkinterDnD.Tk()  # drag and drop
        # self.win = tkinter.Tk()
        self.win.title('MAKDO')
        self.win.geometry(WINDOW_SIZE)
        self.win.protocol("WM_DELETE_WINDOW", self.quit_makdo)
        # FRAME
        self.frm = tkinter.Frame()
        self.frm.pack(expand=True, fill=tkinter.BOTH)
        self.txt = tkinter.Text(self.frm, width=80, height=30, undo=True)
        self.txt.drop_target_register(DND_FILES)               # drag and drop
        self.txt.dnd_bind('<<Drop>>', self.open_dropped_file)  # drag and drop
        # MENU BAR
        self.mnb = tkinter.Menu()
        # FILE
        self.mc1 = tkinter.Menu(self.mnb, tearoff=False)
        self.mnb.add_cascade(label='ファイル(F)', menu=self.mc1, underline=5)
        self.mc1.add_command(label='ファイルを開く(O)',
                             command=self.open_file,
                             underline=8)
        self.mc1.add_command(label='ファイルを閉じる(C)',
                             command=self.close_file,
                             underline=9)
        self.mc1.add_separator()
        self.mc1.add_command(label='ファイルを保存(S)',
                             command=self.save_file,
                             underline=10,
                             accelerator='Ctrl+S')
        self.mc1.add_command(label='名前を付けて保存(A)',
                             command=self.name_and_save,
                             underline=9)
        self.mc1.add_separator()
        self.mc1.add_command(label='PDFに変換',
                             command=self.convert_to_pdf)
        self.mc1.add_command(label='見た目の確認・印刷(P)',
                             command=self.start_writer,
                             underline=10,
                             accelerator='Ctrl+P')
        self.mc1.add_separator()
        self.mc1.add_command(label='終了(Q)',
                             command=self.quit_makdo,
                             underline=3,
                             accelerator='Ctrl+Q')
        # EDIT
        self.mc2 = tkinter.Menu(self.mnb, tearoff=False)
        self.mnb.add_cascade(label='編集(E)', menu=self.mc2, underline=3)
        self.mc2.add_command(label='元に戻す(U)',
                             command=self.edit_modified_undo,
                             underline=5,
                             accelerator='Ctrl+Z')
        self.mc2.add_command(label='やり直す(R)',
                             command=self.edit_modified_redo,
                             underline=5,
                             accelerator='Ctrl+Y')
        self.mc2.add_separator()
        self.mc2.add_command(label='切り取り(C)',
                             command=self.cut_text,
                             underline=5,
                             accelerator='Ctrl+X')
        self.mc2.add_command(label='コピー(Y)',
                             command=self.copy_text,
                             underline=4,
                             accelerator='Ctrl+C')
        self.mc2.add_command(label='貼り付け(P)',
                             command=self.paste_text,
                             underline=5,
                             accelerator='Ctrl+V')
        self.mc2.add_separator()
        self.mc2.add_command(label='全て選択(A)',
                             command=self.select_all,
                             underline=6,
                             accelerator='Ctrl+A')
        self.mc2.add_separator()
        self.mc2.add_command(label='全て置換（準備中）',
                             command=self.replace_all)
        self.mc2.add_separator()
        self.mc2.add_command(label='数式を計算',
                             command=self.calculate)
        self.mc2.add_separator()
        self.mc2.add_command(label='字体を変える',
                             command=self.transform_to_another_typeface)
        # VISUAL
        self.mc3 = tkinter.Menu(self.mnb, tearoff=False)
        self.mnb.add_cascade(label='表示(V)', menu=self.mc3, underline=3)
        self.mc3sb1 = tkinter.Menu(self.mnb, tearoff=False)
        self.mc3.add_cascade(label='背景色', menu=self.mc3sb1)
        self.is_dark_theme = tkinter.BooleanVar(value=False)
        if args.dark_theme:
            self.is_dark_theme.set(True)
        self.mc3sb1.add_radiobutton(label='白色',
                                    variable=self.is_dark_theme, value=False,
                                    command=self.set_font)
        self.mc3sb1.add_radiobutton(label='黒色',
                                    variable=self.is_dark_theme, value=True,
                                    command=self.set_font)
        self.mc3.add_separator()
        self.mc3sb2 = tkinter.Menu(self.mnb, tearoff=False)
        self.mc3.add_cascade(label='文字サイズ', menu=self.mc3sb2)
        self.font_size = tkinter.IntVar(value=18)
        self.mc3sb2.add_radiobutton(label='サイズ1',
                                    variable=self.font_size, value=6,
                                    command=self.set_font)
        self.mc3sb2.add_radiobutton(label='サイズ2',
                                    variable=self.font_size, value=12,
                                    command=self.set_font)
        self.mc3sb2.add_radiobutton(label='サイズ3',
                                    variable=self.font_size, value=18,
                                    command=self.set_font)
        self.mc3sb2.add_radiobutton(label='サイズ4',
                                    variable=self.font_size, value=27,
                                    command=self.set_font)
        self.mc3sb2.add_radiobutton(label='サイズ5',
                                    variable=self.font_size, value=36,
                                    command=self.set_font)
        self.mc3sb2.add_radiobutton(label='サイズ6',
                                    variable=self.font_size, value=48,
                                    command=self.set_font)
        self.mc3sb2.add_radiobutton(label='サイズ7',
                                    variable=self.font_size, value=60,
                                    command=self.set_font)
        self.mc3sb2.add_radiobutton(label='サイズ8',
                                    variable=self.font_size, value=75,
                                    command=self.set_font)
        self.mc3sb2.add_radiobutton(label='サイズ9',
                                    variable=self.font_size, value=90,
                                    command=self.set_font)
        self.mc3.add_separator()
        self.must_paint_keywords = tkinter.BooleanVar(value=False)
        if args.paint_keywords:
            self.must_paint_keywords.set(True)
        self.mc3.add_checkbutton(label='キーワードに色付け',
                                 variable=self.must_paint_keywords)
        self.mc3.add_separator()
        self.mc3.add_command(label='セクションを折り畳む（テスト）',
                             command=self.fold_section)
        self.mc3.add_command(label='セクションを展開（テスト）',
                             command=self.unfold_section)
        self.mc3.add_command(label='セクションを全て展開（テスト）',
                             command=self.unfold_section_fully)
        self.mc3.add_separator()
        self.mc3.add_command(label='文頭に移動',
                             command=self.move_to_beg_of_doc)
        self.mc3.add_command(label='文末に移動',
                             command=self.move_to_end_of_doc)
        self.mc3.add_command(label='行頭に移動',
                             command=self.move_to_beg_of_line)
        self.mc3.add_command(label='行末に移動',
                             command=self.move_to_end_of_line)
        # INSERT
        self.mc4 = tkinter.Menu(self.mnb, tearoff=False)
        self.mnb.add_cascade(label='挿入(I)', menu=self.mc4, underline=3)
        self.mc4sec = tkinter.Menu(self.mc4, tearoff=False)
        self.mc4.add_cascade(label='セクションを挿入', menu=self.mc4sec)
        self.mc4sec.add_command(label='（書面のタイトル）',
                                command=self.insert_sect_1)
        self.mc4sec.add_command(label='第１　…',
                                command=self.insert_sect_2)
        self.mc4sec.add_command(label='　１　…',
                                command=self.insert_sect_3)
        self.mc4sec.add_command(label='　　(1) …',
                                command=self.insert_sect_4)
        self.mc4sec.add_command(label='　　　ア　…',
                                command=self.insert_sect_5)
        self.mc4sec.add_command(label='　　　　(ｱ) …',
                                command=self.insert_sect_6)
        self.mc4sec.add_command(label='　　　　　ａ　…',
                                command=self.insert_sect_7)
        self.mc4sec.add_command(label='　　　　　　(a) …',
                                command=self.insert_sect_8)
        self.mc4chp = tkinter.Menu(self.mc4, tearoff=False)
        self.mc4.add_cascade(label='チャプターを挿入', menu=self.mc4chp)
        self.mc4chp.add_command(label='第１編　…',
                                command=self.insert_chap_1)
        self.mc4chp.add_command(label='　第１章　…',
                                command=self.insert_chap_2)
        self.mc4chp.add_command(label='　　第１節　…',
                                command=self.insert_chap_3)
        self.mc4chp.add_command(label='　　　第１款　…',
                                command=self.insert_chap_4)
        self.mc4chp.add_command(label='　　　　第１目　…',
                                command=self.insert_chap_5)
        self.mc4.add_command(label='画像を挿入',
                             command=self.insert_images)
        self.mc4tab = tkinter.Menu(self.mc4, tearoff=False)
        self.mc4.add_cascade(label='表を挿入', menu=self.mc4tab)
        self.mc4tab.add_command(label='エクセルから挿入',
                                command=self.insert_table_from_excel)
        self.mc4tab.add_command(label='書式を挿入',
                                command=self.insert_table_format)
        self.mc4.add_command(label='改ページを挿入',
                             command=self.insert_page_break)
        self.mc4.add_command(label='改行を挿入',
                             command=self.insert_line_break)
        self.mc4fnt = tkinter.Menu(self.mc4, tearoff=False)
        self.mc4.add_cascade(label='文字のフォントを変える', menu=self.mc4fnt)
        self.mc4fnt.add_command(label='明朝体を変える',
                                command=self.insert_font_select)
        self.mc4fnt.add_separator()
        self.mc4fnt.add_command(label='ゴシック体に変える',
                                command=self.insert_gothic_font)
        self.mc4fnt.add_separator()
        self.mc4fnt.add_command(label='手動入力',
                                command=self.insert_font_manually)
        self.mc4fsz = tkinter.Menu(self.mc4, tearoff=False)
        self.mc4.add_cascade(label='文字の大きさを変える', menu=self.mc4fsz)
        self.mc4fsz.add_command(label='特小サイズ',
                                command=self.insert_ss_font_size)
        self.mc4fsz.add_command(label='小サイズ',
                                command=self.insert_s_font_size)
        self.mc4fsz.add_command(label='大サイズ',
                                command=self.insert_l_font_size)
        self.mc4fsz.add_command(label='特大サイズ',
                                command=self.insert_ll_font_size)
        self.mc4fsz.add_separator()
        self.mc4fsz.add_command(label='手動入力',
                                command=self.insert_font_size_manually)
        self.mc4fwd = tkinter.Menu(self.mc4, tearoff=False)
        self.mc4.add_cascade(label='文字の幅を変える', menu=self.mc4fwd)
        self.mc4fwd.add_command(label='特細サイズ',
                                command=self.insert_ss_font_width)
        self.mc4fwd.add_command(label='細サイズ',
                                command=self.insert_s_font_width)
        self.mc4fwd.add_command(label='太サイズ',
                                command=self.insert_l_font_width)
        self.mc4fwd.add_command(label='特太サイズ',
                                command=self.insert_ll_font_width)
        self.mc4uln = tkinter.Menu(self.mc4, tearoff=False)
        self.mc4.add_cascade(label='文字に下線をを引く', menu=self.mc4uln)
        self.mc4uln.add_command(label='単線',
                                command=self.insert_single_underline)
        self.mc4uln.add_command(label='二重線',
                                command=self.insert_double_underline)
        self.mc4uln.add_command(label='波線',
                                command=self.insert_wave_underline)
        self.mc4uln.add_command(label='破線',
                                command=self.insert_dash_underline)
        self.mc4uln.add_command(label='点線',
                                command=self.insert_dot_underline)
        self.mc4fcl = tkinter.Menu(self.mc4, tearoff=False)
        self.mc4.add_cascade(label='文字色を変える', menu=self.mc4fcl)
        self.mc4fcl.add_command(label='赤色',
                                command=self.insert_r_font_color)
        self.mc4fcl.add_command(label='黄色',
                                command=self.insert_y_font_color)
        self.mc4fcl.add_command(label='緑色',
                                command=self.insert_g_font_color)
        self.mc4fcl.add_command(label='シアン',
                                command=self.insert_c_font_color)
        self.mc4fcl.add_command(label='青色',
                                command=self.insert_b_font_color)
        self.mc4fcl.add_command(label='マゼンタ',
                                command=self.insert_m_font_color)
        self.mc4fcl.add_command(label='白色',
                                command=self.insert_w_font_color)
        self.mc4hcl = tkinter.Menu(self.mc4, tearoff=False)
        self.mc4.add_cascade(label='下地色を変える', menu=self.mc4hcl)
        self.mc4hcl.add_command(label='赤色',
                                command=self.insert_r_highlight_color)
        self.mc4hcl.add_command(label='黄色',
                                command=self.insert_y_highlight_color)
        self.mc4hcl.add_command(label='緑色',
                                command=self.insert_g_highlight_color)
        self.mc4hcl.add_command(label='シアン',
                                command=self.insert_c_highlight_color)
        self.mc4hcl.add_command(label='青色',
                                command=self.insert_b_highlight_color)
        self.mc4hcl.add_command(label='マゼンタ',
                                command=self.insert_m_highlight_color)
        self.mc4typ = tkinter.Menu(self.mc4, tearoff=False)
        self.mc4.add_cascade(label='人名漢字を挿入（未完成）',
                             menu=self.mc4typ)
        self.mc4typ.add_command(label='"花"の人名漢字',
                                command=self.insert_name_char_of_hana)
        self.mc4.add_separator()
        self.mc4dat = tkinter.Menu(self.mc4, tearoff=False)
        self.mc4.add_cascade(label='日時を挿入', menu=self.mc4dat)
        self.mc4dat.add_command(label='YY年M月D日',
                                command=self.insert_date_YYMD)
        self.mc4dat.add_command(label='令和Y年M月D日',
                                command=self.insert_date_GYMD)
        self.mc4dat.add_command(label='yy年m月d日',
                                command=self.insert_date_yymd)
        self.mc4dat.add_command(label='令和y年m月d日',
                                command=self.insert_date_Gymd)
        self.mc4dat.add_command(label='yyyy-mm-dd',
                                command=self.insert_date_iso)
        self.mc4dat.add_command(label='gyy-mm-dd',
                                command=self.insert_date_giso)
        self.mc4dat.add_separator()
        self.mc4dat.add_command(label='H時M分S秒',
                                command=self.insert_time_HHMS)
        self.mc4dat.add_command(label='午前H時M分S秒',
                                command=self.insert_time_GHMS)
        self.mc4dat.add_command(label='h時m分s秒',
                                command=self.insert_time_hhms)
        self.mc4dat.add_command(label='午前h時m分s秒',
                                command=self.insert_time_Ghms)
        self.mc4dat.add_command(label='hh:mm:ss',
                                command=self.insert_time_iso)
        self.mc4dat.add_command(label='AMhh:mm:ss',
                                command=self.insert_time_giso)
        self.mc4dat.add_separator()
        self.mc4dat.add_command(label='yyyy-mm-ddThh:mm:ss+09:00',
                                command=self.insert_datetime)
        self.mc4dat.add_command(label='yy-mm-dd hh:mm:ss',
                                command=self.insert_datetime_symple)
        self.mc4fil = tkinter.Menu(self.mc4, tearoff=False)
        self.mc4.add_cascade(label='ファイル名を挿入', menu=self.mc4fil)
        self.mc4fil.add_command(label='フルパスで挿入',
                                command=self.insert_file_paths)
        self.mc4fil.add_command(label='ファイル名のみを挿入',
                                command=self.insert_file_names)
        self.mc4.add_command(label='ファイルの内容を挿入',
                             command=self.insert_file)
        self.mc4.add_separator()
        self.mc4.add_command(label='記号',
                             command=self.insert_symbol)
        self.mc4sym = tkinter.Menu(self.mc4, tearoff=False)
        self.mc4.add_cascade(label='横棒を挿入', menu=self.mc4sym)
        self.mc4sym.add_command(label='"-"（002D）半角ハイフンマイナス',
                                command=self.insert_hline_002d)
        self.mc4sym.add_command(label='"‐"（2010）全角ハイフン',
                                command=self.insert_hline_2010)
        self.mc4sym.add_command(label='"—"（2014）全角Ｍダッシュ',
                                command=self.insert_hline_2014)
        self.mc4sym.add_command(label='"―"（2015）全角水平線',
                                command=self.insert_hline_2015)
        self.mc4sym.add_command(label='"−"（2212）全角マイナスサイン',
                                command=self.insert_hline_2212)
        self.mc4sym.add_command(label='"－"（FF0D）全角ハイフンマイナス',
                                command=self.insert_hline_ff0d)
        self.mc4.add_separator()
        self.mc4smp = tkinter.Menu(self.mc4, tearoff=False)
        self.mc4.add_cascade(label='サンプルを挿入', menu=self.mc4smp)
        self.mc4smp.add_command(label='基本',
                                command=self.insert_basis)
        self.mc4smp.add_command(label='民法',
                                command=self.insert_law)
        self.mc4smp.add_command(label='訴状',
                                command=self.insert_petition)
        self.mc4smp.add_command(label='証拠説明書',
                                command=self.insert_evidence)
        self.mc4smp.add_command(label='和解契約書',
                                command=self.insert_settlement)
        # CONFIGURATION
        self.mc5 = tkinter.Menu(self.mnb, tearoff=False)
        self.mnb.add_cascade(label='設定(S)', menu=self.mc5, underline=3)
        self.is_read_only = tkinter.BooleanVar(value=False)
        if args.read_only:
            self.is_read_only.set(True)
        self.mc5.add_checkbutton(label='読取専用',
                                 variable=self.is_read_only,
                                 command=self.toggle_read_only)
        self.mc5.add_separator()
        self.mc5sb1 = tkinter.Menu(self.mnb, tearoff=False)
        self.mc5.add_cascade(label='計算結果', menu=self.mc5sb1)
        self.digit_separator = tkinter.StringVar(value='4')
        self.mc5sb1.add_radiobutton(label='桁区切りなし（12345678）',
                                    value='0', variable=self.digit_separator)
        self.mc5sb1.add_radiobutton(label='3桁区切り（12,345,678）',
                                    value='3', variable=self.digit_separator)
        self.mc5sb1.add_radiobutton(label='4桁区切り（1234万5678）',
                                    value='4', variable=self.digit_separator)
        # NET
        self.mc6 = tkinter.Menu(self.mnb, tearoff=False)
        self.mnb.add_cascade(label='ネット(H)', menu=self.mc6, underline=4)
        self.mc6.add_command(label='辞書で調べる',
                             command=self.browse_dictionary)
        self.mc6.add_command(label='Wikipediaで調べる',
                             command=self.browse_wikipedia)
        self.mc6.add_separator()
        self.mc6.add_command(label='法律を調べる',
                             command=self.browse_law)
        self.mc6.add_command(label='・日本国憲法',
                             command=self.browse_law_constitution_law)
        self.mc6.add_command(label='・民法',
                             command=self.browse_law_civil_law)
        self.mc6.add_command(label='・商法',
                             command=self.browse_law_commercial_law)
        self.mc6.add_command(label='・会社法',
                             command=self.browse_law_corporation_law)
        self.mc6.add_command(label='・民事訴訟法',
                             command=self.browse_law_civil_procedure)
        self.mc6.add_command(label='・刑法',
                             command=self.browse_law_crime_law)
        self.mc6.add_command(label='・刑事訴訟法',
                             command=self.browse_law_crime_procedure)
        self.mc6.add_command(label='裁判所規則を調べる',
                             command=self.browse_rule_of_court)
        # HELP
        self.mc7 = tkinter.Menu(self.mnb, tearoff=False)
        self.mnb.add_cascade(label='ヘルプ(H)', menu=self.mc7, underline=4)
        self.mc7.add_command(label='文字情報',
                             command=self.show_char_info)
        self.mc7.add_separator()
        self.mc7.add_command(label='ヘルプ(H)',
                             command=self.show_help,
                             underline=4)
        self.mc7.add_separator()
        self.mc7.add_command(label='ライセンス情報(F)',
                             command=self.show_license_info,
                             underline=8)
        self.mc7.add_separator()
        self.mc7.add_command(label='Makdoについて(A)',
                             command=self.show_about_makdo,
                             underline=10)
        self.win['menu'] = self.mnb
        # TEXT
        self.txt.pack(expand=True, fill=tkinter.BOTH)
        self.txt.bind('<Key>', self.process_key)
        self.txt.bind('<KeyRelease>', self.process_key_release)
        self.txt.bind('<Button-1>', self.process_button1)
        self.txt.bind('<Button-2>', self.process_button2)
        self.txt.bind('<Button-3>', self.process_button3)
        self.txt.bind('<ButtonRelease-1>', self.process_button1_release)
        self.txt.bind('<ButtonRelease-2>', self.process_button2_release)
        self.txt.bind('<ButtonRelease-3>', self.process_button3_release)
        self.txt.config(insertbackground='#FF7777', blockcursor=True)  # cursor
        # SCROLL BAR
        scb = tkinter.Scrollbar(self.txt, orient=tkinter.VERTICAL,
                                command=self.txt.yview)
        scb.pack(side=tkinter.RIGHT, fill=tkinter.Y)
        self.txt['yscrollcommand'] = scb.set
        # STATUS BAR
        self.stb = tkinter.Frame(self.frm)
        self.stb.pack(anchor=tkinter.W)
        self.stb_fnm1 = tkinter.Label(self.stb, text='')
        self.stb_fnm1.pack(side=tkinter.LEFT)
        self.stb_spc1 = tkinter.Label(self.stb, text=' ')
        self.stb_spc1.pack(side=tkinter.LEFT)
        self.stb_pos1 = tkinter.Label(self.stb, text='1x0/1x0')
        self.stb_pos1.pack(side=tkinter.LEFT)
        self.stb_spc2 = tkinter.Label(self.stb, text=' ')
        self.stb_spc2.pack(side=tkinter.LEFT)
        # self.stb_sor1 = tkinter.Label(self.stb, text='探')
        # self.stb_sor1.pack(side=tkinter.LEFT)
        self.stb_sor2 = tkinter.Entry(self.stb, width=20)
        self.stb_sor2.pack(side=tkinter.LEFT)
        # self.stb_sor2.insert(0, '（検索語）')
        # self.stb_sor3 = tkinter.Label(self.stb, text='換')
        # self.stb_sor3.pack(side=tkinter.LEFT)
        self.stb_sor4 = tkinter.Entry(self.stb, width=20)
        self.stb_sor4.pack(side=tkinter.LEFT)
        # self.stb_sor4.insert(0, '（置換語）')
        self.stb_sor5 = tkinter.Button(self.stb, text='前',
                                       command=self.search_or_replace_backward)
        self.stb_sor5.pack(side=tkinter.LEFT)
        self.stb_sor6 = tkinter.Button(self.stb, text='次',
                                       command=self.search_or_replace_forward)
        self.stb_sor6.pack(side=tkinter.LEFT)
        self.stb_sor7 = tkinter.Button(self.stb, text='消',
                                       command=self.clear_search_word)
        self.stb_sor7.pack(side=tkinter.LEFT)
        self.stb_spc3 = tkinter.Label(self.stb, text=' ')
        self.stb_spc3.pack(side=tkinter.LEFT)
        self.stb_msg1 = tkinter.Label(self.stb, text='')
        self.stb_msg1.pack(side=tkinter.LEFT)
        # FONT
        self.set_font()
        # OPEN FILE
        if args.input_file is not None:
            self.just_open_file(args.input_file)
        # LOOP
        self.txt.focus_set()
        self.run_periodically_to_paint_line()
        self.run_periodically_to_set_position_info()
        self.run_periodically_to_save_auto_file()
        self.win.mainloop()

    ################################################################
    # TOOL

    def get_insert_v_number(self):
        insert_position = self.txt.index('insert')
        insert_v_number = int(re.sub('\\.[0-9]+$', '', insert_position))
        return insert_v_number

    def get_insert_h_number(self):
        insert_position = self.txt.index('insert')
        insert_h_number = int(re.sub('^[0-9]+\\.', '', insert_position))
        return insert_h_number

    def get_max_v_number(self):
        max_position = self.txt.index('end-1c')
        max_v_number = int(re.sub('\\.[0-9]+$', '', max_position))
        return max_v_number

    def get_max_h_number(self):
        line_end_position = self.txt.index('insert lineend')
        max_h_number = int(re.sub('^[0-9]+\\.', '', line_end_position))
        return max_h_number

    def paint_out_line(self, line_number):
        ln = line_number
        # REGION IS SET
        if self.txt.tag_ranges('sel'):
            return
        if 'akauni' in self.txt.mark_names():
            return
        # UPDATE TEXT
        file_text = self.txt.get('1.0', 'end-1c')
        self.file_lines = file_text.split('\n')
        m = len(self.file_lines) - 1
        while len(self.line_data) < m + 1:
            self.line_data.append(LineDatum())
            self.line_data[-1].line_number = len(self.line_data) - 1
        while len(self.line_data) > m + 1:
            self.line_data.pop(-1)
        if m < 0:
            return
        # BAD LINE ID
        if ln < 0 or ln >= len(self.line_data):
            return
        # PREPARE
        line_text = self.file_lines[ln] + '\n'
        if ln == 0:
            chars_state = CharsState()
        else:
            chars_state \
                = self.line_data[ln - 1].end_chars_state.copy()
            chars_state.reset_partially()
        must_paint_keywords = self.must_paint_keywords.get()
        # EXCLUSION
        # if self.line_data[ln].line_text == line_text and \
        #    self.line_data[ln].beg_chars_state == chars_state and \
        #    self.line_data[ln].must_paint_keywords == must_paint_keywords:
        #     return
        # PAINT
        # self.line_data[ln].line_number = ln
        self.line_data[ln].line_text = line_text
        self.line_data[ln].beg_chars_state = chars_state
        self.line_data[ln].end_chars_state = CharsState()
        self.line_data[ln].paint_line(self.txt, must_paint_keywords)

    @staticmethod
    def _get_now():
        now = datetime.datetime.utcnow() + datetime.timedelta(hours=+9)
        jst = datetime.timezone(datetime.timedelta(hours=+9))
        now = now.replace(tzinfo=jst)
        return now

    @staticmethod
    def _convert_half_to_full(half):
        full = half
        full = re.sub('0', '０', full)
        full = re.sub('1', '１', full)
        full = re.sub('2', '２', full)
        full = re.sub('3', '３', full)
        full = re.sub('4', '４', full)
        full = re.sub('5', '５', full)
        full = re.sub('6', '６', full)
        full = re.sub('7', '７', full)
        full = re.sub('8', '８', full)
        full = re.sub('9', '９', full)
        return full

    @staticmethod
    def _get_encoding(raw_data):
        encoding = 'SHIFT_JIS'
        if raw_data != '':
            encoding = chardet.detect(raw_data)['encoding']
        if encoding is None:
            encoding = 'SHIFT_JIS'
        elif (re.match('^utf[-_]?.*$', encoding, re.I)) or \
             (re.match('^shift[-_]?jis.*$', encoding, re.I)) or \
             (re.match('^cp932.*$', encoding, re.I)) or \
             (re.match('^euc[-_]?(jp|jis).*$', encoding, re.I)) or \
             (re.match('^iso[-_]?2022[-_]?jp.*$', encoding, re.I)) or \
             (re.match('^ascii.*$', encoding, re.I)):
            pass
        else:
            # Windows-1252 (Western Europe)
            # MacCyrillic (Macintosh Cyrillic)
            # ...
            encoding = 'SHIFT_JIS'
            msg = '※ 警告: ' \
                + '文字コードを「SHIFT_JIS」に修正しました'
            # msg = 'warning: ' \
            #     + 'changed encoding to "SHIFT_JIS"'
            sys.stderr.write(msg + '\n\n')
        return encoding

    @staticmethod
    def _decode_data(encoding, raw_data):
        try:
            decoded_data = raw_data.decode(encoding)
        except BaseException:
            msg = '※ エラー: ' \
                + 'データを読みません（テキストでないかも？）'
            # msg = 'error: ' \
            #     + 'can\'t read data (maybe not text?)'
            sys.stderr.write(msg + '\n\n')
            raise BaseException('failed to read data')
            if __name__ == '__main__':
                sys.exit(105)
            return ''
        return decoded_data

    def _get_tmp_md(self):
        self.temp_dir = tempfile.TemporaryDirectory()
        md_path = self.temp_dir.name + '/doc.md'
        file_text = self.txt.get('1.0', 'end-1c')
        file_text = self.get_fully_unfolded_document(file_text)
        with open(md_path, 'w') as f:
            f.write(file_text)
        return md_path

    def _get_tmp_docx(self):
        md_path = self._get_tmp_md()
        docx_path = re.sub('md$', 'docx', md_path)
        stderr = sys.stderr
        sys.stderr = tempfile.TemporaryFile(mode='w+')
        importlib.reload(makdo.makdo_md2docx)
        try:
            m2d = makdo.makdo_md2docx.Md2Docx(md_path)
            m2d.save(docx_path)
        except BaseException:
            pass
        sys.stderr.seek(0)
        msg = sys.stderr.read()
        sys.stderr = stderr
        if msg != '':
            n = 'エラー'
            tkinter.messagebox.showerror(n, msg)
            return
        return docx_path

    ################################################################
    # FILE

    ################################
    # OPEN FILE

    def open_file(self):
        ans = self.close_file()
        if ans is None:
            return False
        typ = [('可能な形式', '.md .docx'),
               ('Markdown', '.md'), ('MS Word', '.docx'),
               ('全てのファイル', '*')]
        file_path = tkinter.filedialog.askopenfilename(filetypes=typ)
        if file_path == () or file_path == '':
            return False
        self.just_open_file(file_path)
        return True

    def just_open_file(self, file_path):
        if self.exists_auto_file(file_path):
            self.file_path = ''
            self.init_text = ''
            self.file_lines = []
            return
        # DOCX OR MD
        if re.match('^(?:.|\n)+.docx$', file_path):
            self.temp_dir = tempfile.TemporaryDirectory()
            md_path = self.temp_dir.name + '/doc.md'
        else:
            md_path = file_path
        # OPEN DOCX FILE
        if re.match('^(?:.|\n)+.docx$', file_path):
            stderr = sys.stderr
            sys.stderr = tempfile.TemporaryFile(mode='w+')
            importlib.reload(makdo.makdo_docx2md)
            try:
                d2m = makdo.makdo_docx2md.Docx2Md(file_path)
                d2m.save(md_path)
            except BaseException:
                pass
            sys.stderr.seek(0)
            msg = sys.stderr.read()
            sys.stderr = stderr
            if msg != '':
                n = 'エラー'
                tkinter.messagebox.showerror(n, msg)
                return
        # OPEN MD FILE
        try:
            with open(md_path, 'rb') as f:
                raw_data = f.read()
        except BaseException:
            return
        encoding = self._get_encoding(raw_data)
        decoded_data = self._decode_data(encoding, raw_data)
        init_text = self.get_fully_unfolded_document(decoded_data)
        self.file_path = file_path
        self.init_text = init_text
        self.file_lines = init_text.split('\n')
        # self.txt.delete('1.0', 'end')
        self.txt.insert('1.0', init_text)
        self.txt.focus_set()
        self.txt.mark_set('insert', '1.0')
        file_name = re.sub('^.*[/\\\\]', '', file_path)
        self.win.title(file_name + ' - MAKDO')
        self.set_file_name_on_status_bar(file_name)
        # PAINT
        self.line_data = [LineDatum() for line in self.file_lines]
        for i, line in enumerate(self.file_lines):
            self.line_data[i].line_number = i
            self.line_data[i].line_text = line + '\n'
            if i > 0:
                self.line_data[i].beg_chars_state \
                    = self.line_data[i - 1].end_chars_state.copy()
                self.line_data[i].beg_chars_state.reset_partially()
            self.line_data[i].paint_line(self.txt)
        # CLEAR THE UNDO STACK
        self.txt.edit_reset()

    def open_dropped_file(self, event):                         # drag and drop
        res_doc = '^(.|\n)+\\.(md|docx)$'                       # drag and drop
        res_xls = '^(.|\n)+\\.(xlsx)$'                          # drag and drop
        res_img = '^(.|\n)+\\.(jpg|jpeg|png|gif|tif|tiff|bmp)$'
        file_path = event.data                                  # drag and drop
        file_path = re.sub('^{(.*)}$', '\\1', file_path)        # drag and drop
        if re.match(res_doc, file_path, re.I):                  # drag and drop
            ans = self.close_file()                             # drag and drop
            if ans is None:                                     # drag and drop
                return None                                     # drag and drop
            self.just_open_file(file_path)                      # drag and drop
        elif re.match(res_xls, file_path, re.I):                # drag and drop
            self.insert_table_from_excel(file_path)             # drag and drop
        elif re.match(res_img, file_path, re.I):                # drag and drop
            image_md_text = '![代替テキスト:縦x横](' + file_path + ' "説明")'
            self.txt.insert('insert', image_md_text)            # drag and drop

    ################################
    # CLOSE FILE

    def close_file(self):
        # SAVE FILE
        if self._has_edited():
            ans = self._ask_to_save('保存しますか？')
            if ans is None:
                return None
            elif ans is True:
                if not self.save_file():
                    return None
        if self._has_edited():
            ans = self._ask_to_save('データが消えますが、保存しますか？')
            if ans is None:
                return None
            elif ans is True:
                if not self.save_file():
                    return None
        # REMOVE AUTO SAVE FILE
        self.remove_auto_file(self.file_path)
        self.file_path = None
        self.init_text = ''
        self.txt.delete('1.0', 'end')
        self.win.title('MAKDO')
        self.set_file_name_on_status_bar('')
        return True

    def _has_edited(self):
        file_text = self.txt.get('1.0', 'end-1c')
        file_text = self.get_fully_unfolded_document(file_text)
        if file_text != '':
            if self.init_text != file_text:
                return True
        return False

    def _ask_to_save(self, message):
        tkinter.Tk().withdraw()
        n, m, d = '確認', message, 'yes'
        return tkinter.messagebox.askyesnocancel(n, m, default=d)

    ################################
    # SAVE

    def save_file(self):
        if self._has_edited():
            file_text = self.txt.get('1.0', 'end-1c')
            self._stamp_time(file_text)
            if file_text == '' or file_text[-1] != '\n':
                self.txt.insert('end', '\n')
            file_text = self.txt.get('1.0', 'end-1c')
            file_text = self.get_fully_unfolded_document(file_text)
            if (self.file_path is None) or (self.file_path == ''):
                typ = [('Markdown', '*.md')]
                file_path = tkinter.filedialog.asksaveasfilename(filetypes=typ)
                if file_path == ():
                    return False
                self.file_path = file_path
            if self.must_make_backup_file:
                if os.path.exists(self.file_path) and \
                   not os.path.islink(self.file_path):
                    try:
                        os.rename(self.file_path, self.file_path + '~')
                        self.must_make_backup_file = False
                    except BaseException:
                        n, m = 'エラー', 'バックアップに失敗しました．'
                        tkinter.messagebox.showerror(n, m)
                        return False
            # DOCX OR MD
            if re.match('^(?:.|\n)+.docx$', self.file_path):
                md_path = self.temp_dir.name + '/doc.md'
            else:
                md_path = self.file_path
            # SAVE MD FILE
            try:
                with open(md_path, 'w') as f:
                    f.write(file_text)
            except BaseException:
                n, m = 'エラー', 'ファイルの保存に失敗しました．'
                tkinter.messagebox.showerror(n, m)
                return False
            # SAVE DOCX FILE
            if re.match('^(?:.|\n)+\\.docx$', self.file_path):
                stderr = sys.stderr
                sys.stderr = tempfile.TemporaryFile(mode='w+')
                importlib.reload(makdo.makdo_md2docx)
                try:
                    m2d = makdo.makdo_md2docx.Md2Docx(md_path)
                    m2d.save(self.file_path)
                except BaseException:
                    pass
                sys.stderr.seek(0)
                msg = sys.stderr.read()
                sys.stderr = stderr
                if msg != '':
                    n = 'エラー'
                    tkinter.messagebox.showerror(n, msg)
                    return
            self.set_message_on_status_bar('保存しました')
            self.init_text = self.get_fully_unfolded_document(file_text)
            return True

    def _stamp_time(self, file_text):
        if not re.match('^\\s*<!--', file_text):
            return
        file_text = re.sub('-->(.|\n)*$', '', file_text)
        now = datetime.datetime.utcnow() + datetime.timedelta(hours=+9)
        jst = datetime.timezone(datetime.timedelta(hours=+9))
        now = now.replace(tzinfo=jst)
        res = '^(\\S+:\\s*)(\\S+)(\\s.*)?$'
        for i, line in enumerate(file_text.split('\n')):
            # CREATED TIME
            if re.match('^作成時:', line) or re.match('^created_time:', line):
                cfg = re.sub(res, '\\1', line)
                tim = re.sub(res, '\\2', line)
                usr = re.sub(res, '\\3', line)
                j, k = len(cfg),  len(tim)
                beg = str(i + 1) + '.' + str(j)
                end = str(i + 1) + '.' + str(j + k)
                res_jst = '^' + '[0-9]{4}-[0-9]{2}-[0-9]{2}' + \
                    'T[0-9]{2}:[0-9]{2}:[0-9]{2}\\+09:00' + '(\\s.*)?$'
                if not re.match(res_jst, tim):
                    tim = ''
                try:
                    dt = datetime.datetime.fromisoformat(tim)
                except BaseException:
                    self.txt.delete(beg, end)
                    self.txt.insert(beg, now.isoformat(timespec='seconds'))
            if re.match('^更新時:', line) or re.match('^modified_time:', line):
                cfg = re.sub(res, '\\1', line)
                tim = re.sub(res, '\\2', line)
                usr = re.sub(res, '\\3', line)
                j, k = len(cfg),  len(tim)
                beg = str(i + 1) + '.' + str(j)
                end = str(i + 1) + '.' + str(j + k)
                self.txt.delete(beg, end)
                self.txt.insert(beg, now.isoformat(timespec='seconds'))

    ################################
    # NAME AND SAVE

    def name_and_save(self):
        typ = [('可能な形式', '.md .docx'),
               ('Markdown', '.md'), ('MS Word', '.docx')]
        file_path = tkinter.filedialog.asksaveasfilename(filetypes=typ)
        if file_path == () or file_path == '':
            return False
        self.file_path = file_path
        self.save_file()
        return True

    ################################
    # CONVERT TO PDF

    def convert_to_pdf(self):
        typ = [('PDF', '.pdf')]
        pdf_path = tkinter.filedialog.asksaveasfilename(filetypes=typ)
        tmp_docx = self._get_tmp_docx()
        if sys.platform == 'win32':
            Application = win32com.client.Dispatch("Word.Application")
            Application.Visible = False
            doc = Application.Documents.Open(FileName=tmp_docx,
                                             ConfirmConversions=False,
                                             ReadOnly=True)
            doc.SaveAs(pdf_path, FileFormat=17)  # 17=PDF
        elif sys.platform == 'darwin':
            n, m = 'お詫び', '準備中です．'
            tkinter.messagebox.showinfo(n, m)
        elif sys.platform == 'linux':
            dir_path = re.sub('((?:.|\n)*)/(?:.|\n)+$', '\\1', tmp_docx)
            com = '/usr/bin/libreoffice --headless --convert-to pdf --outdir '
            doc = subprocess.run(com + dir_path + ' ' + tmp_docx,
                                 check=True,
                                 shell=True,
                                 stdout=subprocess.PIPE,
                                 encoding="utf-8")
            tmp_pdf = re.sub('docx$', 'pdf', tmp_docx)
            shutil.move(tmp_pdf, pdf_path)

    ################################
    # START WRITER

    def start_writer(self):
        docx_path = self._get_tmp_docx()
        if sys.platform == 'win32':
            return

            Application = win32com.client.Dispatch("Word.Application")
            Application.Visible = True
            doc = Application.Documents.Open(FileName=docx_path,
                                             ConfirmConversions=False)
            # doc = Application.Documents.Open(FileName=docx_path,
            #                                  ConfirmConversions=False,
            #                                  ReadOnly=True)
        elif sys.platform == 'darwin':
            n, m = 'お詫び', '準備中です．'
            tkinter.messagebox.showinfo(n, m)
        elif sys.platform == 'linux':
            doc = subprocess.run('/usr/bin/libreoffice ' + docx_path,
                                 check=True,
                                 shell=True,
                                 stdout=subprocess.PIPE,
                                 encoding="utf-8")

    ################################
    # QUIT

    def quit_makdo(self):
        ans = self.close_file()
        if ans is None:
            return None
        self.win.quit()
        self.win.destroy()
        sys.exit(0)

    ################################################################
    # EDIT

    ################################
    # UNDE AND REDO

    def edit_modified_undo(self):
        try:
            self.txt.edit_undo()
        except BaseException:
            pass

    def edit_modified_redo(self):
        try:
            self.txt.edit_redo()
        except BaseException:
            pass

    ################################
    # CUT, COPY and PASTE

    def cut_text(self):
        if self.txt.tag_ranges('sel'):
            c = self.txt.get('sel.first', 'sel.last')
            self.win.clipboard_clear()
            self.win.clipboard_append(c)
            self.txt.delete('sel.first', 'sel.last')  # delete
        return

    def copy_text(self):
        if self.txt.tag_ranges('sel'):
            c = self.txt.get('sel.first', 'sel.last')
            self.win.clipboard_clear()
            self.win.clipboard_append(c)
        return

    def paste_text(self):
        beg = self.get_insert_v_number()
        try:
            c = self.win.clipboard_get()
            self.txt.insert('insert', c)
            # self.txt.yview('insert -20 line')
        except BaseException:
            pass
        end = self.get_insert_v_number()
        for i in range(beg - 1, end - 1):
            self.paint_out_line(i)
        return

    ################################
    # SELECT ALL

    def select_all(self):
        self.txt.tag_add('sel', '1.0', 'end-1c')
        return

    ################################
    # REPLACE ALL

    def replace_all(self):
        n, m = 'お詫び', '準備中です．'
        tkinter.messagebox.showinfo(n, m)

    ################################
    # CALCULATE

    def calculate(self):
        line = self.txt.get('insert linestart', 'insert lineend')
        line_head = ''
        line_math = line
        line_rslt = ''
        line_tail = ''
        res = '^(.*(?:<!--|@))(.*)$'
        if re.match(res, line_math):
            line_head = re.sub(res, '\\1', line_math)
            line_math = re.sub(res, '\\2', line_math)
        res = '^(.*)((?:-->|#).*)$'
        if re.match(res, line_math):
            line_tail = re.sub(res, '\\2', line_math)
            line_math = re.sub(res, '\\1', line_math)
        res = '^(.*)(=.*)$'
        if re.match(res, line_math):
            line_rslt = re.sub(res, '\\2', line_math)
            line_math = re.sub(res, '\\1', line_math)
        if line_math == '':
            return
        math = line_math
        math = math.replace('\t', ' ').replace('\u3000', ' ')
        math = math.replace('，', ',').replace('．', '.')
        math = math.replace('０', '0').replace('１', '1').replace('２', '2')
        math = math.replace('３', '3').replace('４', '4').replace('５', '5')
        math = math.replace('６', '6').replace('７', '7').replace('８', '8')
        math = math.replace('９', '9')
        math = math.replace('〇', '0').replace('一', '1').replace('二', '2')
        math = math.replace('三', '3').replace('四', '4').replace('五', '5')
        math = math.replace('六', '6').replace('七', '7').replace('八', '8')
        math = math.replace('九', '9')
        math = math.replace('（', '(').replace('）', ')')
        math = math.replace('｛', '{').replace('｝', '}')
        math = math.replace('［', '[').replace('］', ']')
        math = math.replace('｜', '|').replace('！', '!').replace('＾', '^')
        math = math.replace('＊', '*').replace('／', '/').replace('％', '%')
        math = math.replace('＋', '+').replace('−', '-')
        math = math.replace('×', '*').replace('÷', '/').replace('ー', '-')
        math = math.replace('△', '-').replace('▲', '-')
        math = math.replace('パ-セント', '%')
        # ' ', ','
        math = math.replace(' ', '').replace(',', '')
        # {, }, [, ]
        math = math.replace('{', '(').replace('}', ')')
        math = math.replace('[', '(').replace(']', ')')
        # 千, 百, 十
        temp = ''
        unit = ['千', '百', '十']
        for i in range(len(unit)):
            res = '^([^' + unit[i] + ']*' + unit[i] + ')(.*)$'
            while re.match(res, math):
                t1 = re.sub(res, '\\1', math)  # [^千]*千
                t2 = re.sub(res, '\\2', math)  # .*
                if not re.match('^.*[0-9]' + unit[i] + '$', t1):
                    t1 = re.sub(unit[i] + '$', '1' + unit[i], t1)  # 千 -> 1千
                temp += t1
                math = t2
        math = temp + math
        temp = ''
        unit = ['千', '百', '十', '']
        for i in range(len(unit) - 1):
            res = '^([^' + unit[i] + ']*' + unit[i] + ')(.*)$'
            while re.match(res, math):
                t1 = re.sub(res, '\\1', math)  # [^千]*千
                t2 = re.sub(res, '\\2', math)  # .*
                temp += t1
                if not re.match('^[0-9]' + unit[i + 1], t2):
                    t2 = '0' + unit[i + 1] + t2
                math = t2
        math = temp + math
        math = math.replace('千', '').replace('百', '').replace('十', '')
        # 京, 兆, 億, 万
        temp = ''
        unit = ['京', '兆', '億', '万', '']
        for i in range(len(unit) - 1):
            res = '^([^' + unit[i] + ']*' + unit[i] + ')(.*)$'
            while re.match(res, math):
                t1 = re.sub(res, '\\1', math)  # [^京]*京
                t2 = re.sub(res, '\\2', math)  # .*
                temp += t1
                if re.match('[0-9]{,4}' + unit[i + 1], t2):
                    t2 = '0000' + t2
                    math = re.sub('^[0-9]*([0-9]{4})', '\\1', t2)
                else:
                    math = '0000' + unit[i + 1] + t2  # 0000兆
        math = temp + math
        math = math.replace('京', '').replace('兆', '')
        math = math.replace('億', '').replace('万', '')
        # %, 割, 分, 厘
        math = re.sub('([0-9\\.]+)%', '(\\1/100)', math)
        math = re.sub('([0-9\\.]+)割', '(\\1/10)', math)
        math = re.sub('([0-9\\.]+)分', '(\\1/100)', math)
        math = re.sub('([0-9\\.]+)厘', '(\\1/1000)', math)
        # FRACTION
        res = '^(.*?)' \
            + '([0-9]+|\\([^\\(\\)]+\\))分の([0-9]+|\\([^\\(\\)]+\\))' \
            + '(.*?)$'
        while re.match(res, math):
            math = re.sub(res, '\\1(\\3/\\2)\\4', math)
        # POWER
        math = re.sub('\\^', '**', math)
        # REMOVE
        math = re.sub('pi', '3.141592653589793', math)
        math = re.sub('e', '2.718281828459045', math)
        math = re.sub('[^\\(\\)\\|\\*/%\\-\\+0-9\\.]', '', math)
        # EVAL
        r = str(round(eval(math), 10))
        r = re.sub('\\.0$', '', r)
        if not re.match('^-?([0-9]*\\.)?[0-9]+', r):
            return False
        # REPLACE
        digit_separator = self.digit_separator.get()
        if '.' in r:
            i = re.sub('^(.*)(\\..*)$', '\\1', r)
            f = re.sub('^(.*)(\\..*)$', '\\2', r)
        else:
            i = r
            f = ''
        if digit_separator == '3':
            if re.match('^.*[0-9]{19}$', i):
                i = re.sub('([0-9]{18})$', ',\\1', i)
            if re.match('^.*[0-9]{16}$', i):
                i = re.sub('([0-9]{15})$', ',\\1', i)
            if re.match('^.*[0-9]{13}$', i):
                i = re.sub('([0-9]{12})$', ',\\1', i)
            if re.match('^.*[0-9]{10}$', i):
                i = re.sub('([0-9]{9})$', ',\\1', i)
            if re.match('^.*[0-9]{7}$', i):
                i = re.sub('([0-9]{6})$', ',\\1', i)
            if re.match('^.*[0-9]{4}$', i):
                i = re.sub('([0-9]{3})$', ',\\1', i)
        elif digit_separator == '4':
            if re.match('^.*[0-9]{17}$', i):
                i = re.sub('([0-9]{16})$', '京\\1', i)
            if re.match('^.*[0-9]{13}$', i):
                i = re.sub('([0-9]{12})$', '兆\\1', i)
            if re.match('^.*[0-9]{9}$', i):
                i = re.sub('([0-9]{8})$', '億\\1', i)
            if re.match('^.*[0-9]{5}$', i):
                i = re.sub('([0-9]{4})$', '万\\1', i)
        r = i + f
        v_number = self.get_insert_v_number()
        beg = str(v_number) + '.' + str(len(line_head + line_math))
        end = str(v_number) + '.' + str(len(line_head + line_math + line_rslt))
        self.txt.delete(beg, end)
        self.txt.insert(beg, '=' + r)
        self.win.clipboard_clear()
        self.win.clipboard_append(r)

    def transform_to_another_typeface(self):
        c = self.txt.get('insert', 'insert+1c')
        for tf in TYPEFACES:
            if c in tf:
                ConvertTypefaceDialog(self.txt, c, list(tf))

    ################################################################
    # VISUAL

    def set_font(self):
        is_dark_theme = self.is_dark_theme.get()
        size = self.font_size.get()
        # BASIC FONT
        self.txt['font'] = (GOTHIC_FONT, size)
        self.stb_sor2['font'] = (GOTHIC_FONT, size)
        self.stb_sor4['font'] = (GOTHIC_FONT, size)
        self.txt.tag_config('error_tag', foreground='#FF0000')
        self.txt.tag_config('search_tag', background='#777777')
        # COLOR FONT
        if not is_dark_theme:
            self.txt.config(bg='white', fg='black')
            self.txt.tag_config('akauni_tag', background='#CCCCCC')
            self.txt.tag_config('hsp_tag', foreground='#C8C8FF',
                                underline=True)                   # (0.8, 240)
            self.txt.tag_config('tab_tag', background='#D9E7FF')  # (0.9, 220)
            self.txt.tag_config('fsp_tag', foreground='#90D9FF',
                                underline=True)                   # (0.8, 200)
        else:
            self.txt.config(bg='black', fg='white')
            self.txt.tag_config('akauni_tag', background='#666666')
            self.txt.tag_config('hsp_tag', foreground='#7676FF',
                                underline=True)                   # (0.5, 240)
            self.txt.tag_config('tab_tag', background='#0053EF')  # (0.3, 220)
            self.txt.tag_config('fsp_tag', foreground='#009AED',
                                underline=True)                   # (0.5, 200)
        for u in ['-x', '-u']:
            und = False if u == '-x' else True
            for f in ['-g', '-m']:
                fon = (GOTHIC_FONT, size) if f == '-g' else (MINCHO_FONT, size)
                # WHITE
                for i in range(3):
                    a = '-XXX'
                    y = '-' + str(i)
                    tag = 'c' + a + y + f + u
                    if not is_dark_theme:
                        col = BLACK_SPACE[i]
                    else:
                        col = WHITE_SPACE[i]
                    self.txt.tag_config(tag, font=fon,
                                        foreground=col, underline=und)
                # COLOR
                for i in range(3):  # lightness
                    y = '-' + str(i)
                    for j, c in enumerate(COLOR_SPACE):  # angle
                        a = '-' + str(j * 10)
                        tag = 'c' + a + y + f + u  # example: c-120-1-g-x
                        if not is_dark_theme:
                            col = c[i]
                        else:
                            col = c[i + 1]
                        self.txt.tag_config(tag, font=fon,
                                            foreground=col, underline=und)

    ################################
    # FOLD

    def fold_section(self):
        sub_document = self.txt.get('insert linestart', 'end-1c')
        # CHECK THAT THE LINE IS SECITION
        res = '^#+(?:-#+)*(?:\\s.*)?\n'
        if not re.match(res, sub_document):
            n = 'エラー'
            m = '行がセクションの見出し（"#"から始まる行）ではありません．'
            tkinter.messagebox.showerror(n, m)
            return
        # CHECK THAT HEADING IS NOT EMPTY
        res = '^#+(?:-#+)*\\s*\n\n'
        if re.match(res, sub_document):
            n = 'エラー'
            m = 'セクションの見出しがありません（字下げの調整です）．'
            tkinter.messagebox.showerror(n, m)
            return
        # CHECK THAT THE END OF LINE IS NOT ESCAPED
        fln = sub_document.split('\n')[0]
        if not re.match(NOT_ESCAPED + 'X$', fln + 'X'):
            n = 'エラー'
            m = 'セクションの見出しがエスケープされています' + \
                '（バックスラッシュで終わっています）．'
            tkinter.messagebox.showerror(n, m)
            return
        # CHECK THAT SECITION IS NOT FOLDED
        res = '^#+(?:-#+)*(?:\\s.*)?\\.\\.\\.\\[([0-9]+)\\]\n(?:.|\n)*$'
        if re.match(res, sub_document):
            n, m = 'エラー', 'セクションは折り畳まれています．'
            tkinter.messagebox.showerror(n, m)
            return
        # DISPLAY MESSAGE
        if self.must_display_folding_message:
            self.display_folding_message()
            self.must_display_folding_message = False
        # GET FOLDING NUMBER
        folding_number = 1
        all_document = self.txt.get('1.0', 'end-1c')
        res = '^\\.\\.\\.\\[([0-9]+)\\].*$'
        for line in all_document.split('\n'):
            if re.match(res, line):
                n = int(re.sub(res, '\\1', line))
                if folding_number <= n:
                    folding_number = n + 1
        # GET SECTION LINE
        sub_lines = sub_document.split('\n')
        section_line = sub_lines[0]
        # GET SECTION LEVEL
        res = '^(#+).*$'
        section_level = len(re.sub(res, '\\1', section_line))
        # GET TEXT TO FOLD
        text_to_fold = ''
        is_end_of_document = False
        m = len(sub_lines) - 1
        for i in range(1, m + 1):
            line = sub_lines[i]
            if re.match('^(#+)(?:-#+)*(?:\\s.*)?$', line):
                # SECTION
                level = len(re.sub(res, '\\1', line))
                if level <= section_level:
                    if not re.match('^#+(?:-#+)*\\s*$', line) or \
                       not (i < m and sub_lines[i + 1] == ''):
                        tmp = re.sub('<!--(.|\n)*?-->', '', text_to_fold)
                        if re.match('^(.|\n)*\n<!--(.|\n)*$', tmp):
                            # "\n<!--\n## xxx"
                            text_to_fold \
                                = re.sub('<!--(.|\n)*$', '', text_to_fold)
                            break
                        if not re.match('^(.|\n)*<!--(.|\n)*$', tmp):
                            # not "yyy<!--\n## xxx"
                            break
            if re.match('^\\.\\.\\.\\[[0-9]+\\]#+(?:-#+)*(?:\\s.*)?$', line):
                # FOLDED SECTION
                text_to_fold \
                    = re.sub(DONT_EDIT_MESSAGE + '\n\n$', '', text_to_fold)
                break
            text_to_fold += line + '\n'
        else:
            is_end_of_document = True
        # INSERT FOLDING MARK
        self.txt.insert('insert lineend', '...[' + str(folding_number) + ']')
        # INSERT TEXT TO FOLD
        if is_end_of_document:
            self.txt.insert('end', '\n')
        else:
            if not re.match('^(.|\n)*\n$', sub_document):
                self.txt.insert('end', '\n\n')
            elif not re.match('^(.|\n)*\n\n$', sub_document):
                self.txt.insert('end', '\n')
        self.txt.insert('end', DONT_EDIT_MESSAGE + '\n\n')
        self.txt.insert('end', '...[' + str(folding_number) + ']')
        self.txt.insert('end', section_line + '\n')
        self.txt.insert('end', text_to_fold)
        if re.match('^(.|\n)*\n\n\n', text_to_fold):
            self.txt.delete('end-1c', 'end')
        # DELETE FOLDING TEXT
        beg = 'insert lineend + 1c'
        end = 'insert lineend +' + str(len(text_to_fold)) + 'c'
        self.txt.delete(beg, end)
        # MOVE
        # self.txt.mark_set('insert', 'insert linestart')

    def unfold_section(self):
        sub_document = self.txt.get('insert linestart', 'end-1c')
        # CHECK THAT THE LINE IS SECITION
        res = '^#+(?:-#+)*(?:\\s.*)?\n'
        if not re.match(res, sub_document):
            n = 'エラー'
            m = '行がセクションの見出し（"#"から始まる行）ではありません．'
            tkinter.messagebox.showerror(n, m)
            return
        # CHECK THAT SECITION IS FOLDED
        res = '^#+(?:-#+)*(?:\\s.*)?\\.\\.\\.\\[([0-9]+)\\]\n(?:.|\n)*$'
        if not re.match(res, sub_document):
            n, m = 'エラー', 'セクションが折り畳まれていません．'
            tkinter.messagebox.showerror(n, m)
            return
        # CHECK THAT TEXT TO UNFOLD EXISTS
        folding_number = re.sub(res, '\\1', sub_document)
        res_mark = '\\.\\.\\.\\[' + folding_number + '\\]'
        res = '^' + '((?:.|\n)*?\n)' \
            + '((?:' + DONT_EDIT_MESSAGE + '\n+)?)' \
            + '(' + res_mark + '#+(?:-#+)*(?:\\s.*)?\n)' \
            + '((?:.|\n)*)$'
        if not re.match(res, sub_document):
            n, m = 'エラー', '折り畳み先が見付かりません．'
            tkinter.messagebox.showerror(n, m)
            return
        # DISPLAY MESSAGE
        if self.must_display_folding_message:
            self.display_folding_message()
            self.must_display_folding_message = False
        # GET TEXT
        text_a = re.sub(res, '\\1', sub_document)  # unconcerned
        text_b = re.sub(res, '\\2', sub_document)  # dont edit message
        text_c = re.sub(res, '\\3', sub_document)  # folding mark line
        text_d = re.sub(res, '\\4', sub_document)  # text to unfold
        res = '^' + '((?:.|\n)*?\n)' \
            + '((?:' + DONT_EDIT_MESSAGE + '\n+)?)' \
            + '(\\.\\.\\.\\[[0-9]+\\]#+(?:-#+)*(?:\\s.*)?\n)' \
            + '((?:.|\n)*)$'
        if re.match(res, text_d):
            text_d = re.sub(res, '\\1', text_d)
        # ADJUST LINE BREAK
        number_of_line_break_to_insert = 0
        if self.txt.get('insert lineend +1c', 'insert lineend +2c') == '\n':
            number_of_line_break_to_insert -= 1
        if not re.match('^(.|\n)*\n$', text_d):
            number_of_line_break_to_insert += 2
        elif not re.match('^(.|\n)*\n\n$', text_d):
            number_of_line_break_to_insert += 1
        # INSERT TEXT TO UNFOLD
        self.txt.insert('insert lineend +1c', text_d)
        # PAINT
        beg = self.get_insert_v_number()
        end = beg + text_d.count('\n')
        # REMOVE TEXT TO UNFOLD
        text_e = text_a + text_b + text_c + text_d
        beg = 'insert linestart +' + str(len(text_d + text_a)) + 'c'
        end = 'insert linestart +' + str(len(text_d + text_e)) + 'c'
        self.txt.delete(beg, end)
        # ADJUST LINE BREAK
        if number_of_line_break_to_insert == -1:
            beg = 'insert lineend +' + str(len(text_d)) + 'c'
            end = 'insert lineend +' + str(len(text_d) + 1) + 'c'
            self.txt.delete(beg, end)
        elif number_of_line_break_to_insert > 0:
            ins = 'insert lineend +' + str(len(text_d) + 1) + 'c'
            self.txt.insert(ins, '\n' * number_of_line_break_to_insert)
        # REMOVE FOLDING MARK
        text_f = '...[' + folding_number + ']'
        beg = 'insert lineend -' + str(len(text_f)) + 'c'
        end = 'insert lineend'
        self.txt.delete(beg, end)
        # MOVE
        # self.txt.mark_set('insert', 'insert linestart')

    def display_folding_message(self):
        n = 'ご説明'
        m = 'セクションを折り畳みます' + \
            '（セクションの中身を一時的に文面の最後に移動させます）．\n\n' + \
            'そうすることで、' + \
            '文面の構造を視覚的に把握しやすくできます．\n\n' + \
            '他方で、' + \
            '一時的に文の順序が入れ替わってしまいますので、' + \
            'コメントや下線などの範囲を正しく把握できず、' + \
            '画面上の見た目が崩れる可能性があります．\n\n' + \
            'ファイルを保存する際には、' + \
            '全て展開した状態で保存されます．\n\n' + \
            '注）"...[n]"という記号は、' + \
            '折り畳んだことを記録したもので展開する際に必要ですので、' + \
            '絶対に書き替えたり消したりしないでください．'
        tkinter.messagebox.showinfo(n, m)

    def unfold_section_fully(self):
        old_document = self.txt.get('1.0', 'end-1c')
        if old_document == '':
            return
        new_document = self.get_fully_unfolded_document(old_document)
        self.file_lines = new_document.split('\n')
        self.txt.insert('1.0', new_document)
        self.txt.delete('1.0+' + str(len(new_document)) + 'c', 'end')
        self.txt.focus_set()
        self.txt.mark_set('insert', '1.0')
        # PAINT
        self.line_data = [LineDatum() for line in self.file_lines]
        for i, line in enumerate(self.file_lines):
            self.line_data[i].line_number = i
            self.line_data[i].line_text = line + '\n'
            if i > 0:
                self.line_data[i].beg_chars_state \
                    = self.line_data[i - 1].end_chars_state.copy()
                self.line_data[i].beg_chars_state.reset_partially()
            self.line_data[i].paint_line(self.txt)

    def get_fully_unfolded_document(self, old_document):
        # |                ->  |
        # |## www...[3]    ->  |## www
        # |                ->  |
        # |...[1]#### yyy  ->  |### xxx
        # |                ->  |
        # |zzz             ->  |#### yyy
        # |                ->  |
        # |...[2]### xxx   ->  |zzz
        # |                ->  |
        # |#### yyy...[1]  ->  |
        # |                ->  |
        # |...[3]## www    ->  |
        # |                ->  |
        # |### xxx...[2]   ->  |
        # |                ->  |
        if old_document == '':
            return ''
        old_lines = old_document.split('\n')
        new_lines = []
        remain_lines = [True for i in old_lines]
        m = len(old_lines) - 1
        line_numbers = [0]
        res_mark = '\\.\\.\\.\\[([0-9])+\\]'
        res_from = '^(#+(?:-#+)*(?:\\s.*)?)' + res_mark + '$'
        res_to = '^' + res_mark + '#+(-#+)*(\\s|$)'
        while line_numbers != []:
            i = line_numbers[-1]
            if i > m:
                line_numbers.pop(-1)
                continue
            if not remain_lines[i]:
                line_numbers.pop(-1)
                continue
            if re.match(res_to, old_lines[i]):
                line_numbers.pop(-1)
                if new_lines[-2] == DONT_EDIT_MESSAGE and \
                   new_lines[-1] == '':
                    new_lines.pop(-1)
                    new_lines.pop(-1)
                continue
            if re.match(res_from, old_lines[i]) and \
               re.match(NOT_ESCAPED + res_mark + '$', old_lines[i]):
                folding_number \
                    = re.sub(res_from, '\\2', old_lines[i])
                old_lines[i] \
                    = re.sub(res_from, '\\1', old_lines[i])
                # APPEND "FROM LINE"
                new_lines.append(old_lines[i])
                remain_lines[i] = False
                line_numbers[-1] += 1
                if i < m and old_lines[i + 1] == '':
                    # SKIP "NEXT EMPTY LINE"
                    # new_lines.append(old_lines[i])
                    remain_lines[i + 1] = False
                    line_numbers[-1] += 1
                for j, line in enumerate(old_lines):
                    if not remain_lines[j]:
                        continue
                    res = '^\\.\\.\\.\\[' + folding_number + '\\]'
                    if re.match(res, line):
                        if j >= 2:
                            if old_lines[j - 2] == DONT_EDIT_MESSAGE and \
                               old_lines[j - 1] == '':
                                # SKIP "DONT EDIT MESSAGE"
                                remain_lines[j - 2] = False
                                remain_lines[j - 1] = False
                        line_numbers.append(j)
                        # JUMP TO "TO LINE"
                        # new_lines.append(old_lines[j])
                        remain_lines[j] = False
                        line_numbers[-1] += 1
            else:
                # APPEND "USUAL LINE"
                new_lines.append(old_lines[i])
                remain_lines[i] = False
                line_numbers[-1] += 1
        must_warn = True
        for i, ml in enumerate(old_lines):
            if remain_lines[i]:
                if must_warn:
                    n, m = 'エラー', '折り畳まれたセクションが残っています．'
                    tkinter.messagebox.showerror(n, m)
                new_lines.append(old_lines[i])
        new_document = '\n'.join(new_lines) + '\n\n'
        new_document = re.sub('\n\n+', '\n\n', new_document)
        new_document = re.sub('\n+$', '\n', new_document)
        return new_document

    def fold_or_unfold_section(self):
        pass

    ################################
    # MOVE

    def move_to_beg_of_doc(self):
        self.txt.mark_set('insert', '1.0')

    def move_to_end_of_doc(self):
        self.txt.mark_set('insert', 'end-1c')

    def move_to_beg_of_line(self):
        self.txt.mark_set('insert', 'insert linestart')

    def move_to_end_of_line(self):
        self.txt.mark_set('insert', 'insert lineend')

    ################################################################
    # INSERT

    ################################
    # MARKDOWN

    def insert_sect_1(self):
        self._insert_line_break_as_necessary()
        self.txt.insert('insert', '# ')  # タイトル

    def insert_sect_2(self):
        self._insert_line_break_as_necessary()
        self.txt.insert('insert', '## ')  # 第1

    def insert_sect_3(self):
        self._insert_line_break_as_necessary()
        self.txt.insert('insert', '### ')  # 1

    def insert_sect_4(self):
        self._insert_line_break_as_necessary()
        self.txt.insert('insert', '#### ')  # (1)

    def insert_sect_5(self):
        self._insert_line_break_as_necessary()
        self.txt.insert('insert', '##### ')  # ア

    def insert_sect_6(self):
        self._insert_line_break_as_necessary()
        self.txt.insert('insert', '###### ')  # (ｱ)

    def insert_sect_7(self):
        self._insert_line_break_as_necessary()
        self.txt.insert('insert', '####### ')  # ａ

    def insert_sect_8(self):
        self._insert_line_break_as_necessary()
        self.txt.insert('insert', '######## ')  # (a)

    def insert_chap_1(self):
        self._insert_line_break_as_necessary()
        self.txt.insert('insert', '$ ')  # 第1編

    def insert_chap_2(self):
        self._insert_line_break_as_necessary()
        self.txt.insert('insert', '$$ ')  # 第1章

    def insert_chap_3(self):
        self._insert_line_break_as_necessary()
        self.txt.insert('insert', '$$$ ')  # 第1節

    def insert_chap_4(self):
        self._insert_line_break_as_necessary()
        self.txt.insert('insert', '$$$$ ')  # 第1款

    def insert_chap_5(self):
        self._insert_line_break_as_necessary()
        self.txt.insert('insert', '$$$$$ ')  # 第1目

    def insert_images(self):
        typ = [('画像', '.jpg .jpeg .png .gif .tif .tiff .bmp'),
               ('全てのファイル', '*')]
        image_paths = tkinter.filedialog.askopenfilenames(filetypes=typ)
        for i in image_paths:
            image_md_text = '![代替テキスト:縦x横](' + i + ' "説明")'
            self.txt.insert('insert', image_md_text)

    def insert_table_from_excel(self, file_path=None):
        if file_path is None:
            typ = [('エクセル', '.xlsx')]
            file_path = tkinter.filedialog.askopenfilename(filetypes=typ)
        wb = openpyxl.load_workbook(file_path)
        for sheet_name in wb.sheetnames:
            self.txt.insert('insert', '<!-- ' + sheet_name + ' -->\n')
            ws = wb[sheet_name]
            table = ''
            for row in ws.iter_rows(min_row=1, max_row=ws.max_row,
                                    min_col=1, max_col=ws.max_column):
                for cell in row:
                    table += '|' + str(cell.value)
                table += '|\n'
            self.txt.insert('insert', table + '\n')

    def insert_table_format(self):
        self._insert_line_break_as_necessary()
        table_md_text = ''
        table_md_text += '|タイトル  |タイトル  |タイトル  |=\n'
        table_md_text += '|:---------|:--------:|---------:|\n'
        table_md_text += '|左寄せセル|中寄せセル|右寄せセル|\n'
        table_md_text += '|左寄せセル|中寄せセル|右寄せセル|'
        self.txt.insert('insert', table_md_text)

    def insert_page_break(self):
        self._insert_line_break_as_necessary()
        self.txt.insert('insert', '<pgbr>')

    def insert_line_break(self):
        self.txt.insert('insert', '<br>')

    def insert_font_select(self):
        mincho_list = []
        for f in tkinter.font.families():
            if '明朝' in f:
                mincho_list.append(f)
        SelectMinchoDialog(self.txt, mincho_list)

    def insert_gothic_font(self):
        self.txt.insert('insert', '`（ここはゴシック体）`')
        self.txt.mark_set('insert', 'insert-1c')

    def insert_font_manually(self):
        t = 'フォント'
        p = 'フォント名を入力してください．'
        s = tkinter.simpledialog.askstring(title=t, prompt=p)
        d = '@' + s + '@（ここはフォントが変わる）@' + s + '@'
        self.txt.insert('insert', d)
        self.txt.mark_set('insert', 'insert-' + str(len(s) + 2) + 'c')

    def insert_ss_font_size(self):
        self.txt.insert('insert', '---（ここは文字が特に小さい）---')
        self.txt.mark_set('insert', 'insert-3c')

    def insert_s_font_size(self):
        self.txt.insert('insert', '--（ここは文字が小さい）--')
        self.txt.mark_set('insert', 'insert-2c')

    def insert_l_font_size(self):
        self.txt.insert('insert', '++（ここは文字が大きい）++')
        self.txt.mark_set('insert', 'insert-2c')

    def insert_ll_font_size(self):
        self.txt.insert('insert', '+++（ここは文字が特に大きい）+++')
        self.txt.mark_set('insert', 'insert-3c')

    def insert_font_size_manually(self):
        t = '文字の大きさ'
        p = '文字の大きさを1から100までの数字を入力してください．'
        f = tkinter.simpledialog.askfloat(title=t, prompt=p,
                                          minvalue=1, maxvalue=100)
        if f is None:
            return
        s = str(f)
        s = re.sub('\\.0+$', '', s)
        d = '@' + s + '@（ここは文字の大きさが変わる）@' + s + '@'
        self.txt.insert('insert', d)
        self.txt.mark_set('insert', 'insert-' + str(len(s) + 2) + 'c')

    def insert_ss_font_width(self):
        self.txt.insert('insert', '>>>（ここは文字が特に細い）<<<')
        self.txt.mark_set('insert', 'insert-3c')

    def insert_s_font_width(self):
        self.txt.insert('insert', '>>（ここは文字が細い）<<')
        self.txt.mark_set('insert', 'insert-2c')

    def insert_l_font_width(self):
        self.txt.insert('insert', '<<（ここは文字が太い）>>')
        self.txt.mark_set('insert', 'insert-2c')

    def insert_ll_font_width(self):
        self.txt.insert('insert', '<<<（ここは文字が特に太い）>>>')
        self.txt.mark_set('insert', 'insert-3c')

    def insert_single_underline(self):
        self.txt.insert('insert', '__（ここは下線が引かれる）__')
        self.txt.mark_set('insert', 'insert-2c')

    def insert_double_underline(self):
        self.txt.insert('insert', '_=_（ここは下線が引かれる）_=_')
        self.txt.mark_set('insert', 'insert-3c')

    def insert_wave_underline(self):
        self.txt.insert('insert', '_~_（ここは下線が引かれる）_~_')
        self.txt.mark_set('insert', 'insert-3c')

    def insert_dash_underline(self):
        self.txt.insert('insert', '_-_（ここは下線が引かれる）_-_')
        self.txt.mark_set('insert', 'insert-3c')

    def insert_dot_underline(self):
        self.txt.insert('insert', '_._（ここは下線が引かれる）_._')
        self.txt.mark_set('insert', 'insert-3c')

    def insert_r_font_color(self):
        self.txt.insert('insert', '^R^（ここは文字が赤色）^R^')
        self.txt.mark_set('insert', 'insert-3c')

    def insert_y_font_color(self):
        self.txt.insert('insert', '^Y^（ここは文字が黄色）^Y^')
        self.txt.mark_set('insert', 'insert-3c')

    def insert_g_font_color(self):
        self.txt.insert('insert', '^G^（ここは文字が緑色）^G^')
        self.txt.mark_set('insert', 'insert-3c')

    def insert_c_font_color(self):
        self.txt.insert('insert', '^C^（ここは文字がシアン）^C^')
        self.txt.mark_set('insert', 'insert-3c')

    def insert_b_font_color(self):
        self.txt.insert('insert', '^B^（ここは文字が青色）^B^')
        self.txt.mark_set('insert', 'insert-3c')

    def insert_m_font_color(self):
        self.txt.insert('insert', '^M^（ここは文字がマゼンタ）^M^')
        self.txt.mark_set('insert', 'insert-3c')

    def insert_w_font_color(self):
        self.txt.insert('insert', '^^（ここは文字が白色）^^')
        self.txt.mark_set('insert', 'insert-2c')

    def insert_r_highlight_color(self):
        self.txt.insert('insert', '_R_（ここは下地が赤色）_R_')
        self.txt.mark_set('insert', 'insert-3c')

    def insert_y_highlight_color(self):
        self.txt.insert('insert', '_Y_（ここは下地が黄色）_Y_')
        self.txt.mark_set('insert', 'insert-3c')

    def insert_g_highlight_color(self):
        self.txt.insert('insert', '_G_（ここは下地が緑色）_G_')
        self.txt.mark_set('insert', 'insert-3c')

    def insert_c_highlight_color(self):
        self.txt.insert('insert', '_C_（ここは下地がシアン）_C_')
        self.txt.mark_set('insert', 'insert-3c')

    def insert_b_highlight_color(self):
        self.txt.insert('insert', '_B_（ここは下地が青色）_B_')
        self.txt.mark_set('insert', 'insert-3c')

    def insert_m_highlight_color(self):
        self.txt.insert('insert', '_M_（ここは下地がマゼンタ）_M_')
        self.txt.mark_set('insert', 'insert-3c')

    def insert_name_char_of_hana(self):
        self.txt.insert('insert', '花3;花4;花6;')

    def _insert_line_break_as_necessary(self):
        t = self.txt.get('1.0', 'insert')
        if len(t) == 0:
            pass
        elif len(t) == 1:
            if t[-1] == '\n':
                pass
            else:
                self.txt.insert('insert', '\n\n')
        elif len(t) >= 2:
            if t[-2] == '\n' and t[-1] == '\n':
                pass
            elif t[-1] == '\n':
                self.txt.insert('insert', '\n')
            else:
                self.txt.insert('insert', '\n\n')
        p = self.txt.index('insert')
        t = self.txt.get('insert', 'end-1c')
        if len(t) == 0:
            self.txt.insert('insert', '\n')
        elif len(t) == 1:
            if t[0] == '\n':
                pass
            else:
                self.txt.insert('insert', '\n\n')
        elif len(t) >= 2:
            if t[0] == '\n' and t[1] == '\n':
                pass
            elif t[0] == '\n':
                self.txt.insert('insert', '\n')
            else:
                self.txt.insert('insert', '\n\n')
        self.txt.mark_set('insert', p)

    ################################
    # DATE AND TIME

    def insert_date_YYMD(self):
        now = self._get_now()
        date = now.strftime('%Y年%m月%d日')
        date = self._remove_zero(date)
        date = self._convert_half_to_full(date)
        self.txt.insert('insert', date)

    def insert_date_GYMD(self):
        now = self._get_now()
        year = int(now.strftime('%Y')) - 2018
        date = '令和' + str(year) + '年' + now.strftime('%m月%d日')
        date = self._remove_zero(date)
        date = self._convert_half_to_full(date)
        self.txt.insert('insert', date)

    def insert_date_yymd(self):
        now = self._get_now()
        date = now.strftime('%Y年%m月%d日')
        date = self._remove_zero(date)
        self.txt.insert('insert', date)

    def insert_date_Gymd(self):
        now = self._get_now()
        year = int(now.strftime('%Y')) - 2018
        date = '令和' + str(year) + '年' + now.strftime('%m月%d日')
        date = self._remove_zero(date)
        self.txt.insert('insert', date)

    def insert_date_iso(self):
        now = self._get_now()
        date = now.strftime('%Y-%m-%d')
        self.txt.insert('insert', date)

    def insert_date_giso(self):
        now = self._get_now()
        year = int(now.strftime('%Y')) - 2018
        if year < 10:
            date = 'R0' + str(year) + '-' + now.strftime('%m-%d')
        else:
            date = 'R' + str(year) + '-' + now.strftime('%m-%d')
        self.txt.insert('insert', date)

    def insert_time_HHMS(self):
        now = self._get_now()
        time = now.strftime('%H時%M分%S秒')
        time = self._remove_zero(time)
        time = self._convert_half_to_full(time)
        self.txt.insert('insert', time)

    def insert_time_GHMS(self):
        now = self._get_now()
        hour = int(now.strftime('%H'))
        if hour < 12:
            time = '午前' + str(hour) + '時' + now.strftime('%M分%S秒')
        else:
            time = '午後' + str(hour - 12) + '時' + now.strftime('%M分%S秒')
        time = self._remove_zero(time)
        time = self._convert_half_to_full(time)
        self.txt.insert('insert', time)

    def insert_time_hhms(self):
        now = self._get_now()
        time = now.strftime('%H時%M分%S秒')
        time = self._remove_zero(time)
        self.txt.insert('insert', time)

    def insert_time_Ghms(self):
        now = self._get_now()
        hour = int(now.strftime('%H'))
        if hour < 12:
            time = '午前' + str(hour) + '時' + now.strftime('%M分%S秒')
        else:
            time = '午後' + str(hour - 12) + '時' + now.strftime('%M分%S秒')
        time = self._remove_zero(time)
        self.txt.insert('insert', time)

    def insert_time_iso(self):
        now = self._get_now()
        time = now.strftime('%H:%M:%S')
        self.txt.insert('insert', time)

    def insert_time_giso(self):
        now = self._get_now()
        hour = int(now.strftime('%H'))
        if hour < 12:
            time = 'AM' + str(hour) + ':' + now.strftime('%M:%S')
        else:
            time = 'PM' + str(hour - 12) + ':' + now.strftime('%M:%S')
        self.txt.insert('insert', time)

    def insert_datetime(self):
        now = self._get_now()
        self.txt.insert('insert', now.isoformat(timespec='seconds'))

    def insert_datetime_symple(self):
        now = self._get_now()
        self.txt.insert('insert', now.strftime('%y-%m-%d %H:%M:%S'))

    @staticmethod
    def _remove_zero(text):
        text = re.sub('^0', '', text)
        text = re.sub('年0', '年', text)
        text = re.sub('月0', '月', text)
        text = re.sub('時0', '時', text)
        text = re.sub('分0', '分', text)
        return text

    ################################
    # FILE

    def insert_file_paths(self):
        file_paths = tkinter.filedialog.askopenfilenames()
        for f in file_paths:
            self.txt.insert('insert', f + '\n')

    def insert_file_names(self):
        file_paths = tkinter.filedialog.askopenfilenames()
        for f in file_paths:
            f = re.sub('^(.|\n)*/', '', f)
            self.txt.insert('insert', f + '\n')

    def insert_file(self):
        file_path = tkinter.filedialog.askopenfilename()
        if file_path != () and file_path != '':
            with open(file_path, 'rb') as f:
                raw_data = f.read()
            encoding = self._get_encoding(raw_data)
            decoded_data = self._decode_data(encoding, raw_data)
            self.txt.insert('insert', decoded_data)

    ################################
    # SYMBOL

    def insert_symbol(self):
        symbols = ['⑴', '⑵', '⑶', '⑷', '⑸', '⑹', '⑺', '⑻', '⑼', '⑽',
                   '⑾', '⑿', '⒀', '⒁', '⒂', '⒃', '⒄', '⒅', '⒆', '⒇',
                   '⓪',
                   '①', '②', '③', '④', '⑤', '⑥', '⑦', '⑧', '⑨', '⑩',
                   '⑪', '⑫', '⑬', '⑭', '⑮', '⑯', '⑰', '⑱', '⑲', '⑳',
                   '²', '³',
                   '㊞',
                   ]
        InsertSymbolDialog(self.txt, symbols)

    # "-"（002D）半角ハイフンマイナス
    # "‐"（2010）全角ハイフン
    # "—"（2014）全角Ｍダッシュ
    # "―"（2015）全角水平線
    # "−"（2212）全角マイナスサイン
    # "－"（FF0D）ハイフンマイナス

    def insert_hline_002d(self):
        self.txt.insert('insert', '\u002D')  # 半角ハイフンマイナス

    def insert_hline_2010(self):
        self.txt.insert('insert', '\u2010')  # 全角ハイフン

    def insert_hline_2014(self):
        self.txt.insert('insert', '\u2014')  # 全角Ｍダッシュ

    def insert_hline_2015(self):
        self.txt.insert('insert', '\u2015')  # 全角水平線

    def insert_hline_2212(self):
        self.txt.insert('insert', '\u2212')  # 全角マイナスサイン

    def insert_hline_ff0d(self):
        self.txt.insert('insert', '\uFF0D')  # 全角ハイフンマイナス

    ################################
    # SAMPLE

    def insert_basis(self):
        document = self.insert_configuration('普通', '0.0') + \
            SAMPLE_BASIS
        self.insert_sample(document)

    def insert_law(self):
        document = self.insert_configuration('条文', '0.0') + \
            SAMPLE_LAW
        self.insert_sample(document)

    def insert_petition(self):
        document = self.insert_configuration('普通', '1.0') + \
            SAMPLE_PETITION
        self.insert_sample(document)

    def insert_evidence(self):
        document = self.insert_configuration('普通', '0.0') + \
            SAMPLE_EVIDENCE
        self.insert_sample(document)

    def insert_settlement(self):
        document = self.insert_configuration('契約', '1.0') + \
            SAMPLE_SETTLEMENT
        self.insert_sample(document)

    def insert_configuration(self, document_style, space_before):
        document = '''\
<!--------------------------【設定】-----------------------------

# プロパティに表示される文書のタイトルを指定できます。
書題名: -

# 3つの書式（普通、契約、条文）を指定できます。
文書式: ''' + document_style + '''

# 用紙のサイズ（A3横、A3縦、A4横、A4縦）を指定できます。
用紙サ: A4縦

# 用紙の上下左右の余白をセンチメートル単位で指定できます。
上余白: 3.5 cm
下余白: 2.2 cm
左余白: 3.0 cm
右余白: 2.0 cm

# ページのヘッダーに表示する文字列（別紙 :等）を指定できます。
頭書き:

# ページ番号の書式（無、有、n :、-n-、n/N等）を指定できます。
頁番号: 有

# 行番号の記載（無、有）を指定できます。
行番号: 無

# 明朝体とゴシック体と異字体（IVS）のフォントを指定できます。
明朝体: Times New Roman / ＭＳ 明朝
ゴシ体: = / ＭＳ ゴシック
異字体: IPAmj明朝

# 基本の文字の大きさをポイント単位で指定できます。
文字サ: 12 pt

# 行間隔を基本の文字の高さの何倍にするかを指定できます。
行間隔: 2.14 倍

# セクションタイトル前後の余白を行間隔の倍数で指定できます。
前余白: 0.0 倍, ''' + space_before + ''' 倍, 0.0 倍, 0.0 倍, 0.0 倍, 0.0 倍
後余白: 0.0 倍, 0.0 倍, 0.0 倍, 0.0 倍, 0.0 倍, 0.0 倍

# 半角文字と全角文字の間の間隔調整（無、有）を指定できます。
字間整: 無

# 備考書（コメント）などを消して完成させます。
完成稿: 偽

# 原稿の作成日時と更新日時が自動で記録されます。
作成時: - USER
更新時: - USER

---------------------------------------------------------------->
'''
        return document

    def insert_sample(self, sample_document):
        txt_text = self.txt.get('1.0', 'end-1c')
        if txt_text != '':
            n, m = 'エラー', 'テキストが空ではありません．'
            tkinter.messagebox.showerror(n, m)
            return
        self.file_lines = sample_document.split('\n')
        self.txt.insert('1.0', sample_document)
        self.txt.focus_set()
        self.txt.mark_set('insert', '1.0')
        # PAINT
        self.line_data = [LineDatum() for line in self.file_lines]
        for i, line in enumerate(self.file_lines):
            self.line_data[i].line_number = i
            self.line_data[i].line_text = line + '\n'
            if i > 0:
                self.line_data[i].beg_chars_state \
                    = self.line_data[i - 1].end_chars_state.copy()
                self.line_data[i].beg_chars_state.reset_partially()
            self.line_data[i].paint_line(self.txt)
        # CLEAR THE UNDO STACK
        self.txt.edit_reset()

    ################################################################
    # CONFIGURATION

    def toggle_read_only(self):
        is_read_only = self.is_read_only.get()
        if self.txt['state'] == 'normal' and is_read_only:
            self.txt.configure(state='disabled')
        if self.txt['state'] == 'disabled' and not is_read_only:
            self.txt.configure(state='normal')

    ################################################################
    # NET

    def browse_dictionary(self):
        if self.txt.tag_ranges('sel'):
            w = self.txt.get('sel.first', 'sel.last')
            u = 'https://dictionary.goo.ne.jp/srch/all/' + w + '/m6u/'
            webbrowser.open(u)
        if 'akauni' in self.txt.mark_names():
            w = ''
            w += self.txt.get('akauni', 'insert')
            w += self.txt.get('insert', 'akauni')
            u = 'https://dictionary.goo.ne.jp/srch/all/' + w + '/m6u/'
            webbrowser.open(u)

    def browse_wikipedia(self):
        if self.txt.tag_ranges('sel'):
            w = self.txt.get('sel.first', 'sel.last')
            webbrowser.open('https://ja.wikipedia.org/wiki/' + w)
        if 'akauni' in self.txt.mark_names():
            w = ''
            w += self.txt.get('akauni', 'insert')
            w += self.txt.get('insert', 'akauni')
            webbrowser.open('https://ja.wikipedia.org/wiki/' + w)

    def browse_law(self):
        webbrowser.open('https://laws.e-gov.go.jp/')

    def browse_law_constitution_law(self):
        webbrowser.open('https://laws.e-gov.go.jp/law/321CONSTITUTION')

    def browse_law_civil_law(self):
        webbrowser.open('https://laws.e-gov.go.jp/law/129AC0000000089')

    def browse_law_commercial_law(self):
        webbrowser.open('https://laws.e-gov.go.jp/law/132AC0000000048')

    def browse_law_corporation_law(self):
        webbrowser.open('https://laws.e-gov.go.jp/law/417AC0000000086')

    def browse_law_civil_procedure(self):
        webbrowser.open('https://laws.e-gov.go.jp/law/408AC0000000109')

    def browse_law_crime_law(self):
        webbrowser.open('https://laws.e-gov.go.jp/law/140AC0000000045')

    def browse_law_crime_procedure(self):
        webbrowser.open('https://laws.e-gov.go.jp/law/323AC0000000131')

    def browse_rule_of_court(self):
        u = 'https://www.courts.go.jp/toukei_siryou/kisokusyu/index.html'
        webbrowser.open(u)

    ################################################################
    # HELP

    ################################
    # CHARACTER INFORMATION

    def show_char_info(self):
        n = '文字情報'
        c = self.txt.get('insert', 'insert+1c')
        if c != '':
            m = ''
            m += '文字：\t' + c + '\n'
            m += 'UTF-8：\t' + re.sub('^0x', '', hex(ord(c))).upper() + '\n\n'
            for jk in JOYOKANJI:
                if c in jk[1]:
                    m += '常用漢字です\n'
                    m += '字体：' + jk[1] + '\n'
                    m += '読み：' + jk[2] + '\n'
                    if jk[3] != '':
                        m += '用例：' + jk[3] + '\n'
                    break
            else:
                m += '常用漢字ではありません\n'
                if re.match('^[ -~]$', c):
                    m += '半角英数記号\n'
                if re.match('^[ｦ-ﾟ]$', c):
                    m += '半角カタカナ\n'
                if re.match('^[ぁ-ゖ]$', c):
                    m += 'ひらがな\n'
                if re.match('^[ァ-ヺ]$', c) or re.match('^[ㇰ-ㇿ]$', c):
                    m += 'カタカナ\n'
                if re.match('^[０-９]$', c):
                    m += '数字\n'
            m = re.sub('\n+$', '', m)
            tkinter.messagebox.showinfo(n, m)

    ################################
    # HELP

    def show_help(self):
        n = 'ヘルプ'
        m = 'このダイアログを閉じた後、' + \
            'ウィンドウにMS_Wordのファイル（拡張子docx）を' + \
            'ドラッグアンドドロップしてみてください．'
        tkinter.messagebox.showinfo(n, m)

    ################################
    # LICENSE INFO

    def show_license_info(self):
        n = 'ライセンス情報'
        m = 'Copyright (C) 2022-2024  Seiichiro HATA\n\n' + \
            'このソフトウェアは、' + \
            '"GPLv3"というライセンスで開発されています．\n\n' + \
            'This program is free software: you can redistribute it ' + \
            'and/or modify it under the terms of the GNU General Public ' + \
            'License as published by the Free Software Foundation, either ' + \
            'version 3 of the License, or (at your option) any later ' + \
            'version.\n\n' + \
            'This program is distributed in the hope that it will be ' + \
            'useful, but WITHOUT ANY WARRANTY; without even the implied ' + \
            'warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR ' + \
            'PURPOSE.  ' + \
            'See the GNU General Public License for more details.\n\n' + \
            'You should have received a copy of the GNU General Public ' + \
            'License along with this program.  ' + \
            'If not, see <http://www.gnu.org/licenses/>.\n\n\n' + \
            'このソフトウェアは、' + \
            '"python-docx"というライブラリを利用しています．\n' + \
            '"python-docx"は、' + \
            '"MIT_License"というライセンスで開発されています．\n\n' + \
            'The MIT License (MIT)\n\n' + \
            'Copyright (c) 2013 Steve Canny, https://github.com/scanny\n\n' + \
            'Permission is hereby granted, free of charge, to any person ' + \
            'obtaining a copy of this software and associated ' + \
            'documentation files (the "Software"), to deal in the ' + \
            'Software without restriction, including without limitation ' + \
            'the rights to use, copy, modify, merge, publish, distribute, ' + \
            'sublicense, and/or sell copies of the Software, and to ' + \
            'permit persons to whom the Software is furnished to do so, ' + \
            'subject to the following conditions:\n\n' + \
            'The above copyright notice and this permission notice shall ' + \
            'be included in all copies or substantial portions of the ' + \
            'Software.\n\n' + \
            'THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY ' + \
            'KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE ' + \
            'WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR ' + \
            'PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS ' + \
            'OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR ' + \
            'OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR ' + \
            'OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE ' + \
            'SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.'
        tkinter.messagebox.showinfo(n, m)

    ################################
    # ABOUT MAKDO

    def show_about_makdo(self):
        n = 'バージョン情報'
        m = 'makdo ' + __version__ + '\n\n' + \
            '秦誠一郎により開発されています．'
        tkinter.messagebox.showinfo(n, m)

    ################################################################
    # TEXT

    ################################
    # KEY

    def process_key(self, key):
        self.set_message_on_status_bar('')
        self.set_position_info_on_status_bar()
        self.paint_out_line(self.get_insert_v_number() - 1)
        # FOR AKAUNI
        self.akauni_history.append(key.keysym)
        self.akauni_history.pop(0)
        if key.keysym == 'F19':              # x (ctrl)
            return 'break'
        elif key.keysym == 'Left':
            if 'akauni' in self.txt.mark_names():
                self.txt.tag_remove('akauni_tag', '1.0', 'end')
                self.txt.tag_add('akauni_tag', 'akauni', 'insert-1c')
                self.txt.tag_add('akauni_tag', 'insert-1c', 'akauni')
        elif key.keysym == 'Right':
            if 'akauni' in self.txt.mark_names():
                self.txt.tag_remove('akauni_tag', '1.0', 'end')
                self.txt.tag_add('akauni_tag', 'akauni', 'insert+1c')
                self.txt.tag_add('akauni_tag', 'insert+1c', 'akauni')
        elif key.keysym == 'Up':
            if 'akauni' in self.txt.mark_names():
                self.txt.tag_remove('akauni_tag', '1.0', 'end')
                self.txt.tag_add('akauni_tag', 'akauni', 'insert-1l')
                self.txt.tag_add('akauni_tag', 'insert-1l', 'akauni')
        elif key.keysym == 'Down':
            if 'akauni' in self.txt.mark_names():
                self.txt.tag_remove('akauni_tag', '1.0', 'end')
                self.txt.tag_add('akauni_tag', 'akauni', 'insert+1l')
                self.txt.tag_add('akauni_tag', 'insert+1l', 'akauni')
        elif key.keysym == 'F17':            # } (, calc)
            if self.akauni_history[-2] == 'F13':
                self.calculate()
                return 'break'
        elif key.keysym == 'F21':            # w (undo)
            self.edit_modified_undo()
            return 'break'
        elif key.keysym == 'XF86AudioMute':  # W (redo)
            self.edit_modified_redo()
            return 'break'
        elif key.keysym == 'F22':            # f (mark, save)
            if self.akauni_history[-2] == 'F19':
                self.save_file()
                return 'break'
            else:
                if 'akauni' in self.txt.mark_names():
                    self.txt.mark_unset('akauni')
                self.txt.mark_set('akauni', 'insert')
                return 'break'
        elif key.keysym == 'Delete':         # d (delete, quit)
            if self.akauni_history[-2] == 'F19':
                self.quit_makdo()
                return 'break'
            elif 'akauni' in self.txt.mark_names():
                self.txt.tag_remove('akauni_tag', '1.0', 'end')
                akn = self.txt.index('akauni')
                pos = self.txt.index('insert')
                beg = re.sub('\\..*$', '.0', akn)
                if akn == pos and akn != beg:
                    c = self.txt.get(beg, akn)
                    self.win.clipboard_clear()
                    self.win.clipboard_append(c)
                    self.txt.delete(beg, akn)
                else:
                    c = ''
                    c += self.txt.get('akauni', 'insert')
                    c += self.txt.get('insert', 'akauni')
                    self.win.clipboard_clear()
                    self.win.clipboard_append(c)
                    self.txt.delete('akauni', 'insert')
                    self.txt.delete('insert', 'akauni')
                self.txt.mark_unset('akauni')
                return 'break'
        elif key.keysym == 'F14':            # v (quit)
            if 'akauni' in self.txt.mark_names():
                self.txt.tag_remove('akauni_tag', '1.0', 'end')
                self.txt.mark_unset('akauni')
                return 'break'
        elif key.keysym == 'F15':            # g (paste)
            c = self.win.clipboard_get()
            self.txt.insert('insert', c)
            # self.txt.yview('insert -20 line')
            return 'break'
        elif key.keysym == 'F16':            # c (search forward)
            self.search_or_replace_forward()
            return 'break'
        elif key.keysym == 'cent':           # cent (search backward)
            self.search_or_replace_backward()
            return 'break'
        # ctrl+a '\x01' select all          # ctrl+n '\x0e' new document
        # ctrl+b '\x02' bold                # ctrl+o '\x0f' open document
        # ctrl+c '\x03' copy                # ctrl+p '\x10' print
        # ctrl+d '\x04' font                # ctrl+q '\x11' quit
        # ctrl+e '\x05' centered            # ctrl+r '\x12' right
        # ctrl+f '\x06' search              # ctrl+s '\x13' save
        # ctrl+g '\x07' move                # ctrl+t '\x14' hanging indent
        # ctrl+h '\x08' replace             # ctrl+u '\x15' underline
        # ctrl+i '\x09' italic              # ctrl+v '\x16' paste
        # ctrl+j '\x0a' justified           # ctrl+w '\x17' close document
        # ctrl+k '\x0b' hyper link          # ctrl+x '\x18' cut
        # ctrl+l '\x0c' left                # ctrl+y '\x19' redo
        # ctrl+m '\x0d' indent              # ctrl+z '\x1a' undo
        if key.char == '\x11':    # ctrl-q
            self.quit_makdo()
        elif key.char == '\x13':  # ctrl-s
            self.save_file()
        elif key.keysym == 'Delete':
            if self.txt.tag_ranges('sel'):
                self.cut_text()
            else:
                pos = self.txt.index('insert')
                end = re.sub('\\..*$', '.end', pos)
                c = self.txt.get(pos, end)
                if self.akauni_history[-2] != 'Delete':
                    self.win.clipboard_clear()
                if c == '':
                    self.win.clipboard_append('\n')
                    self.txt.delete(pos, end)
                else:
                    self.win.clipboard_append(c)
                    self.txt.delete(pos, end + '-1c')
        elif key.keysym == 'Tab':
            text = self.txt.get('1.0', 'insert')
            line = self.txt.get('insert linestart', 'insert lineend')
            posi = self.txt.index('insert')
            # CONFIGURATION
            res_open = '^<!--(?:.|\n)*'
            res_close = '^(?:.|\n)*-->(?:.|\n)*'
            if re.match(res_open, text) and not re.match(res_close, text):
                for i, sample in enumerate(CONFIGURATION_SAMPLE):
                    if line == sample:
                        self.txt.delete('insert linestart', 'insert lineend')
                        self.txt.insert('insert', CONFIGURATION_SAMPLE[i + 1])
                        self.txt.mark_set('insert', 'insert linestart')
                        return 'break'
            # CALCULATE
            res_open = '^((?:.|\n)*)(<!--(?:.|\n)*)'
            res_close = '^((?:.|\n)*)(-->(?:.|\n)*)'
            if re.match(res_open, text):
                text = re.sub(res_open, '\\2', text)
                if not re.match(res_close, text):
                    self.calculate()
                    return 'break'
            # INSERT
            if re.match('^.*\\.0$', posi):
                for i, sample in enumerate(PARAGRAPH_SAMPLE):
                    if line == sample:
                        self.txt.delete('insert linestart', 'insert lineend')
                        self.txt.insert('insert', PARAGRAPH_SAMPLE[i + 1])
                        self.txt.mark_set('insert', 'insert linestart')
                        return 'break'
            else:
                for i, sample in enumerate(FONT_DECORATOR_SAMPLE):
                    sample_esc = sample
                    sample_esc = sample_esc.replace('*', '\\*')
                    sample_esc = sample_esc.replace('+', '\\+')
                    sample_esc = sample_esc.replace('^', '\\^')
                    cur_to_end = self.txt.get('insert', 'insert lineend')
                    if re.match('^' + sample_esc, cur_to_end):
                        self.txt.delete(posi,
                                        posi + '+' + str(len(sample)) + 'c')
                        self.txt.insert('insert', FONT_DECORATOR_SAMPLE[i + 1])
                        self.txt.mark_set('insert', posi)
                        return 'break'

    def process_key_release(self, key):
        self.set_position_info_on_status_bar()
        # self.paint_out_line(self.get_insert_v_number() - 1)
        # FOR AKAUNI
        if 'akauni' in self.txt.mark_names():
            self.txt.tag_remove('akauni_tag', '1.0', 'end')
            self.txt.tag_add('akauni_tag', 'akauni', 'insert')
            self.txt.tag_add('akauni_tag', 'insert', 'akauni')

    ################################
    # MOUSE LEFT

    def process_button1(self, click):
        pass

    def process_button1_release(self, click):
        try:
            self.bt3.destroy()
        except BaseException:
            pass
        self.set_position_info_on_status_bar()

    ################################
    # MOUSE CENTER

    def process_button2(self, click):
        pass

    def process_button2_release(self, click):
        try:
            self.bt3.destroy()
        except BaseException:
            pass
        self.paste_text()
        return 'break'

    ################################
    # MOUSE RIGHT

    def process_button3(self, click):
        try:
            self.bt3.destroy()
        except BaseException:
            pass
        self.bt3 = tkinter.Menu(self.win, tearoff=False)
        self.bt3.add_command(label='切り取り',
                             command=self.cut_text)
        self.bt3.add_command(label='コピー',
                             command=self.copy_text)
        self.bt3.add_command(label='貼り付け',
                             command=self.paste_text)
        self.bt3.post(click.x_root, click.y_root)

    def process_button3_release(self, click):
        pass

    ################################################################
    # STATUS BAR

    ################################
    # FILE NAME

    def set_file_name_on_status_bar(self, file_name):
        fn = file_name
        fn = re.sub('\n', '/', fn)
        res = '^(.*)(\\..{1,4})$'
        if re.match(res, fn):
            nam = re.sub(res, '\\1', fn)
            ext = re.sub(res, '\\2', fn)
        else:
            nam = fn
            ext = ''
        if len(fn) > 15:
            nam = re.sub('^(.{' + str(14 - len(ext)) + '})(.*)', '\\1…', nam)
        self.stb_fnm1['text'] = nam + ext

    ################################
    # POSITON INFORMATION

    def set_position_info_on_status_bar(self):
        pos = self.txt.index('insert')
        cur_p = str(pos).replace('.', 'x')
        max_v = self.get_max_v_number()
        max_h = self.get_max_h_number()
        max_p = str(max_v) + 'x' + str(max_h)
        self.stb_pos1['text'] = cur_p + '/' + max_p

    ################################
    # SEARCH OR REPLACE

    def search_or_replace_backward(self):
        word1 = self.stb_sor2.get()
        word2 = self.stb_sor4.get()
        if Makdo.search_word != word1:
            Makdo.search_word = word1
            self._highlight_search_word()
        pos = self.txt.index('insert')
        tex = self.txt.get('1.0', pos)
        res = '^((?:.|\n)*)(' + word1 + '(?:.|\n)*)$'
        if re.match(res, tex):
            t1 = re.sub(res, '\\1', tex)
            t2 = re.sub(res, '\\2', tex)
            # SEARCH
            self.txt.mark_set('insert', pos + '-' + str(len(t2)) + 'c')
            self.txt.yview(pos + '-' + str(len(t2)) + 'c-10line')
            if word2 != '':  # and word2 != '（置換語）'
                # REPLACE
                self.txt.delete('insert', 'insert+' + str(len(word1)) + 'c')
                self.txt.insert('insert', word2)
                # self.set_message_on_status_bar('置換しました')
        self.set_message_on_status_bar('')
        self.txt.focus_set()

    def search_or_replace_forward(self):
        word1 = self.stb_sor2.get()
        word2 = self.stb_sor4.get()
        if Makdo.search_word != word1:
            Makdo.search_word = word1
            self._highlight_search_word()
        pos = self.txt.index('insert')
        tex = self.txt.get(pos, 'end-1c')
        res = '^((?:.|\n)*?' + word1 + ')((?:.|\n)*)$'
        if re.match(res, tex):
            t1 = re.sub(res, '\\1', tex)
            t2 = re.sub(res, '\\2', tex)
            # SEARCH
            self.txt.mark_set('insert', pos + '+' + str(len(t1)) + 'c')
            self.txt.yview(pos + '+' + str(len(t1)) + 'c-10line')
            if word2 != '':  # and word2 != '（置換語）'
                # REPLACE
                self.txt.delete('insert-' + str(len(word1)) + 'c', 'insert')
                self.txt.insert('insert', word2)
                # self.set_message_on_status_bar('置換しました')
        self.set_message_on_status_bar('')
        self.txt.focus_set()

    def clear_search_word(self):
        self.stb_sor2.delete('0', 'end')
        self.stb_sor4.delete('0', 'end')
        self.txt.tag_remove('search_tag', '1.0', 'end')
        Makdo.search_word = ''

    def _highlight_search_word(self):
        word = Makdo.search_word
        tex = self.txt.get('1.0', 'end-1c')
        beg = 0
        res = '^((?:.|\n)*?)' + word + '((?:.|\n)*)$'
        while re.match(res, tex):
            pre = re.sub(res, '\\1', tex)
            tex = re.sub(res, '\\2', tex)
            beg += len(pre)
            end = beg + len(word)
            self.txt.tag_add('search_tag',
                             '1.0+' + str(beg) + 'c',
                             '1.0+' + str(end) + 'c',)
            beg = end

    ################################
    # MESSAGE

    def set_message_on_status_bar(self, msg):
        self.stb_msg1['text'] = msg

    ################################################################
    # AUTO SAVE

    def get_auto_path(self, file_path):
        if file_path is None or file_path == '':
            return None
        if '/' in file_path or '\\' in file_path:
            d = re.sub('^((?:.|\n)*[/\\\\])(.*)$', '\\1', file_path)
            f = re.sub('^((?:.|\n)*[/\\\\])(.*)$', '\\2', file_path)
        else:
            d = ''
            f = file_path
        if '.' in f:
            n = re.sub('^((?:.|\n)*)(\\..*)$', '\\1', f)
            e = re.sub('^((?:.|\n)*)(\\..*)$', '\\2', f)
        else:
            n = f
            e = ''
        n = re.sub('^((?:.|\n){,240})(.*)$', '\\1', n)
        return d + '~$' + n + e + '.zip'

    def exists_auto_file(self, file_path):
        auto_path = self.get_auto_path(file_path)
        if os.path.exists(auto_path):
            # auto_file = re.sub('^(.|\n)*[/\\\\]', '', auto_path)
            n = 'エラー'
            m = '自動保存ファイルが存在します．\n' + \
                '"' + auto_path + '"\n\n' + \
                '①現在、ファイルを編集中\n' + \
                '②過去の編集中のファイルが残存\n' + \
                'の2つの可能性が考えられます．\n\n' + \
                '①現在、ファイルを編集中\n' + \
                'の場合は、「No」を選択してください．\n\n' + \
                '②過去の編集中のファイルが残存\n' + \
                'の場合、異常終了したものと思われます．\n' + \
                '「No」を選択して、' + \
                '自動保存ファイルの中身を確認してから、' + \
                '削除することをおすすめします．\n\n' + \
                '自動保存ファイルを削除しますか？'
            ans = tkinter.messagebox.askyesno(n, m, default='no')
            if ans:
                try:
                    self.remove_auto_file(file_path)
                except BaseException:
                    n, m = 'エラー', '自動保存ファイルの削除に失敗しました．'
                    tkinter.messagebox.showerror(n, m)
        if os.path.exists(auto_path):
            return True
        else:
            return False

    def save_auto_file(self, file_path):
        if file_path is not None and file_path != '':
            new_text = self.txt.get('1.0', 'end-1c')
            auto_path = self.get_auto_path(file_path)
            if os.path.exists(auto_path):
                with zipfile.ZipFile(auto_path, 'r') as old_zip:
                    with old_zip.open('doc.md', 'r') as f:
                        old_text = f.read()
                        if new_text == old_text.decode():
                            return
            with zipfile.ZipFile(auto_path, 'w',
                                 compression=zipfile.ZIP_DEFLATED,
                                 compresslevel=9) as new_zip:
                new_zip.writestr('doc.md', new_text)

    def remove_auto_file(self, file_path):
        if file_path is not None and file_path != '':
            auto_path = self.get_auto_path(file_path)
            if re.match('(^|(.|\n)*[/\\\\])~\\$(.|\n)+\\.zip$', auto_path):
                if os.path.exists(auto_path):
                    os.remove(auto_path)

    ################################################################
    # RECURSIVE CALL

    def run_periodically_to_paint_line(self):
        # GLOBAL PAINTING
        self.paint_out_line(self.global_line_to_paint)
        self.global_line_to_paint += 1
        if self.global_line_to_paint >= len(self.file_lines) - 1:
            self.global_line_to_paint = 0
        # LOCAL PAINTING
        self.paint_out_line(self.standard_line + self.local_line_to_paint - 10)
        self.local_line_to_paint += 1
        if self.local_line_to_paint >= 150:
            i = self.txt.index('insert')
            self.standard_line = int(re.sub('\\..*$', '', i)) - 1
            self.local_line_to_paint = 0
        # POINT PAINTING
        # self.paint_out_line(self.get_insert_v_number() - 1)
        # TO NEXT
        interval = 10
        self.win.after(interval, self.run_periodically_to_paint_line)  # NEXT

    def run_periodically_to_set_position_info(self):
        self.set_position_info_on_status_bar()
        interval = 100
        self.win.after(interval, self.run_periodically_to_set_position_info)

    def run_periodically_to_save_auto_file(self):
        self.save_auto_file(self.file_path)
        interval = 60_000
        self.win.after(interval, self.run_periodically_to_save_auto_file)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description='Markdownファイルを編集します',
        add_help=False)
    parser.add_argument(
        '-h', '--help',
        action='help',
        help='ヘルプメッセージを表示します')
    parser.add_argument(
        '-v', '--version',
        action='version',
        version=('%(prog)s ' + __version__),
        help='バージョン番号を表示します')
    parser.add_argument(
        '-d', '--dark-theme',
        action='store_true',
        help='背景を暗くします')
    parser.add_argument(
        '-p', '--paint-keywords',
        action='store_true',
        help='キーワードに色を付けます')
    parser.add_argument(
        '-r', '--read-only',
        action='store_true',
        help='読み取り専用で開きます')
    parser.add_argument(
        '-b', '--make-backup-file',
        action='store_true',
        help='バックアップファイルを残します')
    parser.add_argument(
        'input_file',
        nargs='?',
        help='Markdownファイル or MS Wordファイル')
    args = parser.parse_args()

    Makdo(args)
